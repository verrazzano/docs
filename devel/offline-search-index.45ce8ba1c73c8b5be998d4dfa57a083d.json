[{"body":"Verrazzano uses the Open Application Model (OAM) specification to provide a layered approach to describing and deploying applications. OAM is a specification developed within the Cloud Native Computing Foundation (CNCF). Verrazzano is compliant with the OAM specification version 0.2.1.\nAn ApplicationConfiguration is a composition of Components. Components encapsulate application implementation details. Application deployers apply Traits and Scopes to customize the Components for the environment.\nThe OAM specification supports extensibility. The behavior of the platform can be extended by adding OAM compliant definitions and controllers. Specifically, new workload, Trait, and Scope definitions can be added. These definitions can be referenced by Components and application configurations and are processed by custom controllers.\nApplication configurations An ApplicationConfiguration is a collection of references to Components. A set of Traits and Scopes can be applied to each Component reference. The platform uses these Components, Traits, and Scopes to generate the final application resources during deployment.\nThe following sample shows the high level structure of an ApplicationConfiguration. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:ApplicationConfiguration...spec:components:- componentName:example-component-1traits:...scopes:...- componentName:example-component-2...   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nComponents A Component wraps the content of a workload. The platform extracts the workload during deployment and creates new resources that result from the application of Traits and Scopes. Verrazzano and the OAM specification provide several workloads, for example VerrazzanoHelidonWorkload and ContainerizedWorkload. The workloads also can be any Kubernetes resource. For some Kubernetes resources, the oam-kubernetes-runtime operator may need to be granted additional permission.\nA Component can also be parameterized; this allows the workload content to be customized when referenced within an ApplicationConfiguration. See the OAM specification for details.\nThe following sample shows the high level structure of a Component. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:Component...spec:workload:...parameters:...   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor information about Traits, see Verrazzano Application Traits. For information about Workloads, see Verrazzano Application Workloads.\nDeployment An application deployment occurs in Verrazzano through a number of Kubernetes controllers, reading and writing various resources. Each controller processes application resources, and generates or updates other related resources. Different types of controllers process different levels of application resources.\nThe ApplicationConfiguration controller processes ApplicationConfiguration and Component resources. This controller extracts and stores a workload for each Component referenced within ApplicationConfiguration resources. Verrazzano implements the ApplicationConfiguration controller within the oam-kubernetes-runtime operator. Similarly, the ApplicationConfiguration controller extracts and stores Trait resources associated with Component resources in the ApplicationConfiguration.\nThe workload controllers process workload resources created by the ApplicationConfiguration controller, for example ContainerizedWorkload or VerrazzanoWebLogicWorkload. This controller processes these workload resources and generates more specific runtime resources. For example, the ContainerizedWorkload controller processes a ContainerizedWorkload resource and generates a Deployment resource. The VerrazzanoWebLogicWorkload controller processes a VerrazzanoWebLogicWorkload resource and generates a Domain resource. These controllers may take into account Traits and Scopes that are applied to the workload’s Component references within the ApplicationConfiguration. Verrazzano implements these workload controllers in two operators. Verrazzano specific workloads, for example VerrazzanoHelidonWorkload, are processed by a controller within the verrazzano-application-operator. Workloads defined by OAM, for example ContainerizedWorkload, are processed by a controller with the oam-kubernetes-runtime operator.\nThe Trait controllers process Trait resources created by the ApplicationConfiguration controller, for example MetricsTrait. The ApplicationConfiguration controller records the Component to which it was applied within each extracted Trait. The Trait controllers process extracted Trait resources, and generate or update other related resources. For example, the IngressTrait controller within the verrazzano-application-operator processes IngressTrait resources and generates related Gateway and VirtualService resources. The same operator contains a MetricsTrait controller which processes MetricsTrait resources and adds annotations to related resources such as Deployments.\nScope controllers read Scope resources updated by the ApplicationConfiguration controller during deployment. The ApplicationConfiguration controller updates the Scope resources with references to each Component to which the Scope is applied.\nThe following diagram shows the relationships between the resources and controllers described previously. The following diagram, based on the hello-helidon example, shows the processing of resources from a Kubernetes operator perspective. Controllers within the oam-kubernetes-runtime process the ApplicationConfiguration and Component resources and generate VerrazzanoHelidonWorkload and IngressTrait. Then controllers within the verrazzano-application-operator process the VerrazzanoHelidonWorkload and IngressTrait resources to generate Deployment, VirtualService, and other resources.\n","categories":"","description":"Learn about Verrazzano application development and deployment","excerpt":"Learn about Verrazzano application development and deployment","ref":"/docs/applications/about-applications/","tags":"","title":"About Applications in Verrazzano"},{"body":"Verrazzano provides the vz analyze command-line tool, which assists in troubleshooting issues in your environment. You can use it to analyze a cluster as well as, to analyze a cluster snapshot captured by the vz bug-report tool. For detailed information about vz bug-report, see here.\nThe vz analyze command-line tool analyzes the cluster or a cluster snapshot, reports the issues found, and prescribes related actions to take. Users, developers, and Continuous Integration (CI) can use this tooling to quickly identify the root cause of encountered problems, determine mitigation actions, and provide a sharable report with other users or tooling.\nSet up the CLI tool To set up the vz command-line tool, follow the steps here.\nAnalyze clusters To analyze a Kubernetes cluster: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz analyze    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAnalyze cluster snapshots   Use the vz bug-report tool to capture a cluster snapshot.\nTo create a bug report in a TAR file named my-bug-report.tar.gz and extract it to a directory my-cluster-snapshot: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz bug-report my-bug-report.tar.gz  mkdir my-cluster-snapshot  tar -xvf my-bug-report.tar.gz -C my-cluster-snapshot    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Use the vz analyze tool to analyze the cluster snapshot.\nTo perform an analysis of the cluster snapshot under my-cluster-snapshot: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz analyze --capture-dir my-cluster-snapshot    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Use the vz analyze tool to analyze multiple snapshots The vz analyze tool will find and analyze all cluster snapshot directories found under a specified root directory. This lets you create a directory to hold the cluster snapshots of related clusters in subdirectories, which the tool can then analyze.\nFor example:\nmy-cluster-snapshots CAPTURE_DIR-1 cluster-snapshot ... CAPTURE_DIR-2 cluster-snapshot ...  To perform an analysis of the clusters under my-cluster-snapshots: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz analyze --capture-dir my-cluster-snapshots    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUsage information Use the following syntax to run vz commands from your terminal window.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz analyze [flags]    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Available options    Command Definition     --capture-dir string Directory holding the captured data.   -h, --help Help for the vz analyze command.   --report-file string Name of the report output file. (Default stdout)   --report-format string The format of the report output. Valid report formats are “summary” and “detailed”. (Default “summary”)   -v, --verbose Enable verbose output.    Available flags These flags apply to all the commands.\n   Flag Definition     --context string The name of the kubeconfig file context to use.   --kubeconfig string Path to the kubeconfig file to use.    ","categories":"","description":"Use the Verrazzano analysis tools to analyze clusters and cluster snapshots","excerpt":"Use the Verrazzano analysis tools to analyze clusters and cluster snapshots","ref":"/docs/troubleshooting/diagnostictools/verrazzanoanalysistool/","tags":"","title":"Analyze Verrazzano Clusters"},{"body":"Verrazzano provides the following support.\nKeycloak Applications can use the Verrazzano Keycloak server as an Identity Provider. Keycloak supports SAML 2.0 and OpenID Connect (OIDC) authentication and authorization flows. Verrazzano does not provide any explicit integrations for applications.\nNOTE If using Keycloak for application authentication and authorization, create a new realm to contain application users and clients. Do not use the verrazzano-system realm, or the default (Keycloak system) realm. The Keycloak root user account (keycloakadmin) has privileges to create realms.  Network security Verrazzano uses Istio to authenticate and authorize incoming network connections for applications. Verrazzano also provides support for configuring Kubernetes NetworkPolicy on Verrazzano projects. NetworkPolicy rules control where network connections can be made.\nNOTE Enforcement of NetworkPolicy requires that a Kubernetes Container Network Interface (CNI) provider, such as Calico, be configured for the cluster.  For more information on how Verrazzano secures network traffic, see Network Security.\nPod security By default, all containers within a pod run as root (UID 0) within the container. Most applications do not require this level of access and doing so is considered a security risk.\nIt is recommended that applications attempt to meet the requirements of the Kubernetes restricted Pod Security Standard. This essentially means running the container within a pod as a non-root user with minimal capabilities, and without the ability to escalate privileges. Each container image also should define a non-root user identity that the container process will run, as by default, for added security.\nIn the Kubernetes Pod specification, there is a Pod SecurityContext for defining security at the pod level and a Container SecurityContext used to define security for containers. Some fields are common between the two security contexts, and others are unique. For details, see the API specifications for each. Where there is overlap, settings defined at the container level override settings defined at the pod level.\nThe following sections describe implementing these standards in more detail.\nSpecify a non-root user in the container image Unless otherwise specified, all containers run as the root user. It is recommended that each container image build explicitly creates an unprivileged, non-root user and group, and then uses that with the USER instruction in the Dockerfile for the container.\nTo achieve this, modify the container’s image build and use the USER \u003cUID\u003e instruction.\nFor example:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # Run as user 1000 USER 1000    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   This will make the process within the container run as UID 1000. Even if there is no entry in /etc/passwd matching the UID declared, the container will run as the specified UID with minimal privileges.\nFor example, this is illustrated by a running image using the kubectl run command with the defaults:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  % kubectl run -it --rm myol --image=ghcr.io/oracle/oraclelinux:7-slim --restart=Never -- bash If you don't see a command prompt, try pressing enter. bash-4.2# whoami root bash-4.2# id uid=0(root) gid=0(root) groups=0(root) bash-4.2#    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   To run the same image as a non-root user, you can override the default user and group for the container process, as shown:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  % kubectl run -it --rm myol --image=ghcr.io/oracle/oraclelinux:7-slim --restart=Never --overrides='{ \"spec\": { \"securityContext\": { \"runAsUser\": 1000, \"runAsGroup\": 1000, \"runAsNonRoot\": true } } }' -- bash If you don't see a command prompt, try pressing enter. bash-4.2$ bash-4.2$ whoami whoami: cannot find name for user ID 1000 bash-4.2$ id uid=1000 gid=1000 groups=1000    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   In the second example, the container is running as UID 1000 with a GID of 1000. Running whoami from within the container returns an error because USER 1000 is not defined in /etc/passwd, but running the id command from the shell shows that the container process is indeed running as the desired UID (1000).\nSpecify security settings for the Pod By default, containers within Kubernetes pods run as the image default user, which in turn defaults to the root user (UID 0).\nYou can use the pod and container securityContext fields to force containers within a pod to run as non-root and prevent the container from acquiring escalated privileges. These will override any USER setting within the image.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: apps/v1 kind: Deployment spec: ... template: ... spec: # Define a security context for all containers in the pod securityContext: runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 seccompProfile: type: RuntimeDefault containers: - name: some-container ... # Define a security context for the container; settings defined here have precedence over the pod securityContext securityContext: allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false ...    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   As mentioned previously, where there is overlap between the pod and container security settings, the settings defined at the container level override settings defined at the pod level.\nHelidon pod security The following YAML shows how to explicitly specify the pod security context for a Helidon application. With these settings, the Helidon application will meet the requirements of the Kubernetes restricted Pod Security Standard.\nNote that the runAsUser 2000 UID does not exist in the container, as described previously.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: core.oam.dev/v1alpha2 kind: Component metadata: name: hello-helidon-component spec: workload: apiVersion: oam.verrazzano.io/v1alpha1 kind: VerrazzanoHelidonWorkload metadata: name: hello-helidon-workload labels: app: hello-helidon version: v1 spec: deploymentTemplate: metadata: name: hello-helidon-deployment podSpec: securityContext: seccompProfile: type: RuntimeDefault containers: - name: hello-helidon-container ... securityContext: runAsNonRoot: true runAsGroup: 2000 runAsUser: 2000 privileged: false allowPrivilegeEscalation: false capabilities: drop: - ALL    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   Pod security for ContainerizedWorkload applications The only means for controlling pod security for the ContainerizedWorkload type is to specify a non-root user, using the USER instruction in the container image build, as described in this section, Specify a non-root user in the container image.\nPod security for applications using standard Kubernetes resources You can deploy applications using standard Kubernetes resources. You configure security for these resources as you typically would for any Kubernetes Deployment resource.\nFor example:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: core.oam.dev/v1alpha2 kind: Component metadata: name: example-deployment spec: workload: kind: Deployment apiVersion: apps/v1 name: oam-kube-dep spec: replicas: 1 selector: matchLabels: app: oam-kube-app template: metadata: labels: app: oam-kube-app spec: securityContext: runAsGroup: 1000 runAsNonRoot: true runAsUser: 1000 seccompProfile: type: RuntimeDefault containers: - name: oam-kube-cnt image: hashicorp/http-echo args: - \"-text=hello\" securityContext: allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   ","categories":"","description":"Learn about securing applications in Verrazzano","excerpt":"Learn about securing applications in Verrazzano","ref":"/docs/security/appsec/appsec/","tags":"","title":"Application Security"},{"body":"Before you begin   Install Verrazzano by following the installation instructions.\n  To download the example image, you must first accept the license agreement.\n In a browser, navigate to https://container-registry.oracle.com/ and sign in. Search for example-bobbys-coherence, example-bobbys-front-end, example-bobs-books-order-manager, example-roberts-coherence, and weblogic. For each one:  Select the image name in the results. From the drop-down menu, select your language and click Continue. Then read and accept the license agreement.    NOTE: The Bob’s Books example application deployment files are contained in the Verrazzano project located at \u003cVERRAZZANO_HOME\u003e/examples/bobs-books, where \u003cVERRAZZANO_HOME\u003e is the root of the Verrazzano project.\n  Overview Bob’s Books consists of three main parts:\n A back-end “order processing” application, which is a Java EE application with REST services and a very simple JSP UI, which stores data in a MySQL database. This application runs on WebLogic Server. A front-end web store “Robert’s Books”, which is a general book seller. This is implemented as a Helidon microservice, which gets book data from Coherence, uses a Coherence cache store to persist data for the order manager, and has a React web UI. A front-end web store “Bobby’s Books”, which is a specialty children’s book store. This is implemented as a Helidon microservice, which gets book data from a (different) Coherence cache store, interfaces directly with the order manager, and has a JSF web UI running on WebLogic Server.  For more information and the source code of this application, see the Verrazzano Examples.\nDeploy the application NOTE To run this application in the default namespace:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl label namespace default verrazzano-managed=true istio-injection=enabled    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If you chose the default namespace, you can skip Step 1 and ignore the -n option in the rest of the commands.\n   Create a namespace for the example and add a label identifying the namespace as managed by Verrazzano. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl create namespace bobs-books $ kubectl label namespace bobs-books verrazzano-managed=true istio-injection=enabled    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Create a docker-registry secret to enable pulling the example image from the registry. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create secret docker-registry bobs-books-repo-credentials \\ --docker-server=container-registry.oracle.com \\ --docker-username=YOUR_REGISTRY_USERNAME \\ --docker-password=YOUR_REGISTRY_PASSWORD \\ --docker-email=YOUR_REGISTRY_EMAIL \\ -n bobs-books    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nReplace YOUR_REGISTRY_USERNAME, YOUR_REGISTRY_PASSWORD, and YOUR_REGISTRY_EMAIL with the values you use to access the registry.\n  Create secrets for the WebLogic domains: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   # Replace the values of the WLS_USERNAME and WLS_PASSWORD environment variables as appropriate. $ export WLS_USERNAME=\u003cusername\u003e $ export WLS_PASSWORD=\u003cpassword\u003e $ kubectl create secret generic bobbys-front-end-weblogic-credentials \\ --from-literal=password=$WLS_PASSWORD \\ --from-literal=username=$WLS_USERNAME \\ -n bobs-books $ kubectl create secret generic bobs-bookstore-weblogic-credentials \\ --from-literal=password=$WLS_PASSWORD \\ --from-literal=username=$WLS_USERNAME \\ -n bobs-books $ kubectl create secret generic mysql-credentials \\ --from-literal=username=$WLS_USERNAME \\ --from-literal=password=$WLS_PASSWORD \\ --from-literal=url=jdbc:mysql://mysql.bobs-books.svc.cluster.local:3306/books \\ -n bobs-books    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNote that the example application is preconfigured to use specific secret names. For the source code of this application, see the Verrazzano Examples. If you want to use secret names that are different from what is specified in the source code, you will need to update the corresponding YAML file and rebuild the Docker images for the example application.\n  To deploy the application, apply the example resources. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/bobs-books/bobs-books-comp.yaml -n bobs-books $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/bobs-books/bobs-books-app.yaml -n bobs-books    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for all of the pods in the Bob’s Books example application to be ready. You can monitor their progress by listing the pods and inspecting the output, or you can use the kubectl wait command.\nYou may need to repeat the kubectl wait command several times before it is successful. The WebLogic Server and Coherence pods may take a while to be created and Ready. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n bobs-books # -or- # $ kubectl wait \\ --for=condition=Ready pods \\ --all -n bobs-books \\ --timeout=600s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the EXTERNAL_IP address of the istio-ingressgateway service. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ADDRESS=$(kubectl get service \\ -n istio-system istio-ingressgateway \\ -o jsonpath='{.status.loadBalancer.ingress[0].ip}') $ echo $ADDRESS # Sample output 11.22.33.44    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the generated host name for the application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ HOST=$(kubectl get gateways.networking.istio.io bobs-books-bobs-books-gw \\ -n bobs-books \\ -o jsonpath='{.spec.servers[0].hosts[0]}') $ echo $HOST # Sample output bobs-books.bobs-books.11.22.33.44.nip.io    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access the application. To access the application in a browser, you will need to do one of the following:\n  Option 1: If you are using nip.io, then you can access the application using the generated host name. For example:\n  Robert’s Books UI at https://bobs-books.bobs-books.11.22.33.44.nip.io/.\n  Bobby’s Books UI at https://bobs-books.bobs-books.11.22.33.44.nip.io/bobbys-front-end/.\n  Bob’s order manager UI at https://bobs-books.bobs-books.11.22.33.44.nip.io/bobs-bookstore-order-manager/orders.\n    Option 2: Temporarily, modify the /etc/hosts file (on Mac or Linux) or c:\\Windows\\System32\\Drivers\\etc\\hosts file (on Windows 10), to add an entry mapping the host used by the application to the external IP address assigned to your gateway. For example:\n11.22.33.44 bobs-books.example.com Then, you can use a browser to access the application, as shown:\n  Robert’s Books UI at https://bobs-books.example.com/.\n  Bobby’s Books UI at https://bobs-books.example.com/bobbys-front-end/.\n  Bob’s order manager UI at https://bobs-books.example.com/bobs-bookstore-order-manager/orders.\n    Option 3: Alternatively, point your own DNS name to the load balancer’s external IP address. In this case, you would need to have edited the bobs-books-app.yaml file to use the appropriate values under the hosts section for the application (such as your-roberts-books-host.your.domain), before deploying the application. Then, you can use a browser to access the application, as shown:\n  Robert’s Books UI at https://\u003cyour-roberts-books-host.your.domain\u003e/.\n  Bobby’s Books UI at https://\u003cyour-bobbys-books-host.your.domain\u003e/bobbys-front-end/.\n  Bob’s order manager UI at https://\u003cyour-bobs-orders-host.your.domain\u003e/.\n      Access the applications using the WebLogic Server Administration Console Use the WebLogic Server Administration Console to access the applications as follows.\nNOTE It is recommended that the WebLogic Server Administration Console not be exposed publicly.  Access bobs-bookstore   Set up port forwarding. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl port-forward pods/bobs-bookstore-adminserver 7001:7001 -n bobs-books    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: If you are using the Oracle Cloud Infrastructure Cloud Shell to run kubectl, in order to access the WebLogic Server Administration Console using port forwarding, you will need to run kubectl on another machine.\n  Access the WebLogic Server Administration Console from your browser. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  http://localhost:7001/console    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access bobbys-front-end   Set up port forwarding. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl port-forward pods/bobbys-front-end-adminserver 7001:7001 -n bobs-books    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: If you are using the Oracle Cloud Infrastructure Cloud Shell to run kubectl, in order to access the WebLogic Server Administration Console using port forwarding, you will need to run kubectl on another machine.\n  Access the WebLogic Server Administration Console from your browser. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  http://localhost:7001/console    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Verify the deployed application   Verify that the application configuration, domains, Coherence resources, and ingress trait all exist. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get ApplicationConfiguration -n bobs-books $ kubectl get Domain -n bobs-books $ kubectl get Coherence -n bobs-books $ kubectl get IngressTrait -n bobs-books    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Verify that the service pods are successfully created and transition to the READY state. Note that this may take a few minutes and that you may see some of the services terminate and restart. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n bobs-books # Sample output NAME READY STATUS RESTARTS AGE bobbys-helidon-stock-application-868b5965c8-dk2xb 3/3 Running 0 19h bobbys-coherence-0 2/2 Running 0 19h bobbys-front-end-adminserver 3/3 Running 0 19h bobbys-front-end-managed-server1 3/3 Running 0 19h bobs-bookstore-adminserver 3/3 Running 0 19h bobs-bookstore-managed-server1 3/3 Running 0 19h mysql-669665fb54-9m8wq 2/2 Running 0 19h robert-helidon-96997fcd5-kzjkf 3/3 Running 0 19h robert-helidon-96997fcd5-nlswm 3/3 Running 0 19h roberts-coherence-0 2/2 Running 0 17h roberts-coherence-1 2/2 Running 0 17h    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Undeploy the application   To undeploy the application, delete the Bob’s Books OAM resources. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/bobs-books/bobs-books-app.yaml -n bobs-books $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/bobs-books/bobs-books-comp.yaml -n bobs-books    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the namespace bobs-books after the application pods are terminated. The secrets created for the WebLogic domain also will be deleted. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete namespace bobs-books    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"An example application based on WebLogic, Helidon, and Coherence","excerpt":"An example application based on WebLogic, Helidon, and Coherence","ref":"/docs/examples/wls-coh/bobs-books/","tags":"","title":"Bob's Books"},{"body":"The Cluster API (CAPI) project was developed as a sub-project of Kubernetes and strives to standardize a set of Kubernetes-style APIs for cluster management. External organizations can then build upon these standard APIs to develop custom cluster management solutions.\nLearn more about CAPI at Kubernetes Cluster API Documentation.\nVerrazzano incorporates CAPI functionality through the clusterAPI component, which provides the ability to quickly design and deploy clusters and then continue managing your clusters throughout their life cycle, all from within Verrazzano.\nNOTE The terminology around clusters differs between CAPI and Verrazzano though the underlying concepts are the same. What CAPI calls Management and Workload clusters are equivalent to admin and managed clusters, respectively, in Verrazzano.  CAPI splits cluster management responsibilities across three main components, which it calls providers:\n  Infrastructure providers standardize the host environment by provisioning any infrastructure or computational resources required by the cluster or machine.\n  Bootstrap providers streamline the node creation process by converting servers into Kubernetes nodes.\n  Control plane providers work with the Kubernetes API to regulate your clusters, ensuring that they always strive toward a desired state.\n  Currently, Verrazzano supports the CAPI provider for Oracle Cloud Native Environment (CAPOCNE) which bundles a bootstrap and a control plane provider together and works with the CAPOCI infrastructure provider offered by Oracle Cloud Infrastructure (OCI).\nDuring the setup process, the bootstrap provider converts a cluster into an admin cluster - a Kubernetes cluster that controls any other, subordinate or managed clusters. It generates certificates, starts and manages the creation of additional nodes, and handles the addition of control plane and worker nodes to the cluster.\nNext, a CAPI infrastructure provider will provision the first instance on the cloud provider and generate a provider ID, a unique identifier that any future nodes and clusters will use to associate with the instance. It will also create a kubeconfig file. The first control plane node is ready after these are created.\nAfter the admin cluster is up and running, you can use the clusterAPI component to create additional managed clusters.\n","categories":"","description":"Use Verrazzano to create and manage new clusters","excerpt":"Use Verrazzano to create and manage new clusters","ref":"/docs/setup/provision-cluster/capi/","tags":"","title":"Cluster API"},{"body":"  Create a namespace for the example application and add labels identifying the namespace as managed by Verrazzano and enabled for Istio. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create namespace hello-helidon $ kubectl label namespace hello-helidon verrazzano-managed=true istio-injection=enabled    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Deploy the Hello Helidon Greet application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: apps/v1 kind: Deployment metadata: annotations: description: Hello Helidon application version: v1.0.0 labels: app: hello-helidon name: hello-helidon-deployment namespace: hello-helidon spec: progressDeadlineSeconds: 600 replicas: 1 revisionHistoryLimit: 10 selector: matchLabels: app: hello-helidon strategy: rollingUpdate: maxSurge: 25% maxUnavailable: 25% type: RollingUpdate template: metadata: annotations: verrazzano.io/metricsEnabled: \"true\" # This annotation is used in the ServiceMonitor YAML to specify whether metrics are enabled. verrazzano.io/metricsPath: /metrics # This annotation is used in the ServiceMonitor YAML to replace the metrics path. verrazzano.io/metricsPort: \"8080\" # This annotation is used in the ServiceMonitor YAML to replace the metrics port. labels: app: hello-helidon # This label is used in the Service YAML in the selector. spec: containers: - image: ghcr.io/verrazzano/example-helidon-greet-app-v1:1.0.0-1-20230126194830-31cd41f imagePullPolicy: IfNotPresent name: hello-helidon-container ports: - containerPort: 8080 name: http protocol: TCP terminationMessagePath: /dev/termination-log terminationMessagePolicy: File dnsPolicy: ClusterFirst restartPolicy: Always terminationGracePeriodSeconds: 30    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access the Hello Helidon Greet application inside the Kubernetes cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: v1 kind: Service metadata: labels: app: hello-helidon name: hello-helidon-deployment namespace: hello-helidon spec: ports: - name: hello-helidon-container-8080 port: 8080 protocol: TCP targetPort: 8080 selector: app: hello-helidon    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"Use these instructions to create a Kubernetes deployment and service","excerpt":"Use these instructions to create a Kubernetes deployment and service","ref":"/docs/applications/kubernetes/create_kubernetes/","tags":"","title":"Create a Kubernetes Deployment and Service"},{"body":"The Verrazzano AuthProxy component enables authentication and authorization for Keycloak users accessing Verrazzano resources. You can customize the AuthProxy component using settings in the Verrazzano custom resource.\nThe following table describes the fields in the Verrazzano custom resource pertaining to the AuthProxy component.\n   Path to Field Description     spec.components.authProxy.kubernetes.replicas The number of pods to replicate. The default is 2 for the prod profile and 1 for all other profiles.   spec.components.authProxy.kubernetes.affinity The pod affinity definition expressed as a standard Kubernetes affinity definition. The default configuration spreads the AuthProxy pods across the available nodes. spec:\ncomponents:\nauthProxy:\nkubernetes:\naffinity:\npodAntiAffinity:\npreferredDuringSchedulingIgnoredDuringExecution:\n- weight: 100\npodAffinityTerm:\nlabelSelector:\nmatchExpressions:\n- key: app\noperator: In\nvalues:\n- verrazzano-authproxy\ntopologyKey: kubernetes.io/hostname     The following example customizes a Verrazzano prod profile as follows:\n Increases the replicas count to 3 Changes the podAffinity configuration to use requiredDuringSchedulingIgnoredDuringExecution  code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: prod components: authProxy: overrides: - values: replicas: 3 affinity: podAntiAffinity: requiredDuringSchedulingIgnoredDuringExecution: - labelSelector: matchExpressions: - key: app operator: In values: - verrazzano-authproxy topologyKey: kubernetes.io/hostname    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"Customize Verrazzano AuthProxy settings","excerpt":"Customize Verrazzano AuthProxy settings","ref":"/docs/security/proxies/authproxy/","tags":"","title":"Customize AuthProxy"},{"body":"The Hello World Helidon example is a Helidon-based service that returns a “Hello World” response when invoked. The example application is specified using Open Application Model (OAM) component and application configuration YAML files, and then deployed by applying those files. The example also demonstrates how to change the placement of the application to a different cluster. .\nBefore you begin Create a multicluster Verrazzano installation with one admin and one managed cluster, and register the managed cluster, by following the instructions here.\nSet up the following environment variables to point to the kubeconfig file for the admin and managed clusters. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ export KUBECONFIG_ADMIN=/path/to/your/adminclusterkubeconfig $ export KUBECONFIG_MANAGED1=/path/to/your/managedclusterkubeconfig    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: The Hello World Helidon application deployment files are contained in the Verrazzano project located at \u003cVERRAZZANO_HOME\u003e/examples/multicluster/hello-helidon, where \u003cVERRAZZANO_HOME\u003e is the root of the Verrazzano project.\nCreate the application namespace Apply the VerrazzanoProject resource on the admin cluster that defines the namespace for the application. The namespaces defined in the VerrazzanoProject resource will be created on the admin cluster and all the managed clusters. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN apply \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/hello-helidon/verrazzano-project.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nDeploy the application   Apply the hello-helidon multicluster application configuration resource to deploy the application. The multicluster resource is an envelope that contains an OAM resource and a list of clusters to which to deploy. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN apply \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/hello-helidon/hello-helidon-comp.yaml $ kubectl --kubeconfig $KUBECONFIG_ADMIN apply \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/hello-helidon/mc-hello-helidon-app.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the application to be ready on the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 wait \\ --for=condition=Ready pods \\ --all -n hello-helidon \\ --timeout=300s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Explore the example application Follow the instructions for exploring the Hello World Helidon application in a single cluster use case. Use the managed cluster kubeconfig file for testing the example application.\nVerify the deployed application Follow the instructions for troubleshooting the Hello World Helidon application in a single cluster use case. Use the managed cluster kubeconfig file for troubleshooting the example application.\n  Verify that the application namespace exists on the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 get namespace hello-helidon    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Verify that the multicluster resource for the application exists. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 get MultiClusterApplicationConfiguration -n hello-helidon    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Locating the application on a different cluster By default, the application is located on the managed cluster called managed1. You can change the application’s location to be on a different cluster, which can be the admin cluster or a different managed cluster. In this example, you change the placement of the application to the admin cluster by patching the multicluster resources.\n  To change the application’s location to the admin cluster, specify the change placement patch file. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # To change the placement to the admin cluster $ export CHANGE_PLACEMENT_PATCH_FILE=\"https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/hello-helidon/patch-change-placement-to-admin.yaml\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThis environment variable is used in subsequent steps.\n  To change its placement, patch the hello-helidon multicluster application configuration. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN patch mcappconf hello-helidon-appconf \\ -n hello-helidon \\ --type merge \\ --patch \"$(curl -s $CHANGE_PLACEMENT_PATCH_FILE)\" # Expected response multiclusterapplicationconfiguration.clusters.verrazzano.io/hello-helidon-appconf patched    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  To verify that its placement has changed, view the multicluster resource. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN get mcappconf hello-helidon-appconf \\ -n hello-helidon \\ -o jsonpath='{.spec.placement}';echo # Expected response {\"clusters\":[{\"name\":\"local\"}]}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe cluster name, local, indicates placement in the admin cluster.\n  To change its placement, patch the VerrazzanoProject. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN patch vp hello-helidon \\ -n verrazzano-mc \\ --type merge \\ --patch \"$(curl -s $CHANGE_PLACEMENT_PATCH_FILE)\" # Expected response verrazzanoproject.clusters.verrazzano.io/hello-helidon patched    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the application to be ready on the admin cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN wait \\ --for=condition=Ready pods \\ --all -n hello-helidon \\ --timeout=300s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: If you are returning the application to the managed cluster, then instead, wait for the application to be ready on the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 wait \\ --for=condition=Ready pods \\ --all -n hello-helidon \\ --timeout=300s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Now, you can test the example application running in its new location.\nTo return the application to the managed cluster named managed1, set the value of the CHANGE_PLACEMENT_PATCH_FILE environment variable to the patch file provided for that purpose, then repeat the previous numbered steps. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # To change the placement back to the managed cluster named managed1 $ export CHANGE_PLACEMENT_PATCH_FILE=\"https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/hello-helidon/patch-return-placement-to-managed1.yaml\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Undeploy the application Regardless of its location, to undeploy the application, delete the application resources and the project from the admin cluster. Undeploy affects all clusters in which the application is located.\n  To undeploy the application, delete the Hello World Helidon OAM resources. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN delete \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/hello-helidon/mc-hello-helidon-app.yaml $ kubectl --kubeconfig $KUBECONFIG_ADMIN delete \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/hello-helidon/hello-helidon-comp.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the project. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN delete \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/hello-helidon/verrazzano-project.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the namespace hello-helidon after the application pod is terminated. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN delete namespace hello-helidon $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 delete namespace hello-helidon    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"Hello World Helidon example appplication deployed to a multicluster environment.","excerpt":"Hello World Helidon example appplication deployed to a multicluster environment.","ref":"/docs/examples/multicluster/hello-helidon/","tags":"","title":"Multicluster Hello World Helidon"},{"body":"Prerequisites  Before you begin, read this document, Verrazzano in a multicluster environment. To set up a multicluster Verrazzano environment, you will need two or more Kubernetes clusters. One of these clusters will be the admin cluster; the others will be managed clusters. For instructions on preparing Kubernetes platforms for installing Verrazzano, see Platform Setup.  NOTE If Rancher is not enabled, then refer to Advanced Multicluster Installation because additional steps are required to register a managed cluster.  The following instructions assume an admin cluster and a single managed cluster. For each additional managed cluster, simply repeat the managed cluster set up and registration instructions.\nSet up the admin cluster One of your clusters will be designated as the admin cluster. This cluster will serve as the central management point for your managed clusters. On the admin cluster, install Verrazzano using the dev or prod profile.\nFor detailed instructions on how to install and customize Verrazzano on a Kubernetes cluster using a specific profile, see the Installation Guide and Installation Profiles.\nSet up the managed cluster The second cluster will be a managed cluster. On this cluster, install Verrazzano using the managed-cluster profile. The managed-cluster profile contains only the components that are required for a full-featured Verrazzano managed cluster. NOTE: You also can use the dev or prod profile, which will install components not required for a managed cluster.\nFor managed cluster configurations that have a smaller footprint than the managed-cluster profile, with correspondingly limited features, see Minimal managed cluster configurations.\nRegister the managed cluster Register the managed clusters in a multicluster environment by following a registration method found here. After registration is completed, your Verrazzano multicluster environment is ready to use.\nMinimal managed cluster configurations You can use minimal Verrazzano managed cluster configurations in cases where managed clusters need to have a smaller footprint, such as in edge clusters. Note that using smaller managed cluster configurations results in limited multicluster features.\nThese examples use Verrazzano with profile: none, which means that no Verrazzano components are enabled by default, and then individually enables the specific Verrazzano components needed.\nMinimum configuration To install Verrazzano on a managed cluster with the smallest possible configuration and the fewest features, you can use the minimal.yaml file.\nIn this configuration:\n No metrics are collected for the managed cluster. You can view and interact with the managed cluster in the Verrazzano Dashboard on the admin cluster. If you have enabled the argoCD component on the admin cluster, you can use ArgoCD GitOps to distribute applications from the admin cluster to the managed cluster.  Observability using Prometheus Use the minimal-prometheus.yaml file to install Verrazzano on the managed cluster, with the minimum footprint needed to get Prometheus federation of metrics.\nIn this configuration:\n The features of the minimum configuration will be available. Metrics will be collected on the managed cluster. Managed cluster metrics will be available in Prometheus on the admin cluster.  Observability using Thanos Use the minimal-thanos.yaml file to install Verrazzano on the managed cluster, with the minimum footprint needed to use Thanos to collect metrics.\nTo use Thanos to get managed cluster metrics, you also must enable Thanos on the admin cluster. For details, and additional Thanos configuration information, see the documentation on how to enable and configure Thanos.\nIn this configuration:\n The features of the minimum configuration are available. Metrics will be collected on the managed cluster. Managed cluster metrics will be available in Thanos on the admin cluster.  ","categories":"","description":"Set up a multicluster Verrazzano environment","excerpt":"Set up a multicluster Verrazzano environment","ref":"/docs/setup/mc-install/multicluster/","tags":"","title":"Install Multicluster Verrazzano"},{"body":"The following instructions show you how to install Verrazzano in a single Kubernetes cluster using the CLI.\nPrerequisites  Find the Verrazzano prerequisite requirements here. Review the list of the software versions supported and installed by Verrazzano.  NOTE To avoid conflicts with Verrazzano system components, we recommend installing Verrazzano into an empty cluster.  Prepare for the installation Before installing Verrazzano, see instructions on preparing Kubernetes platforms and installing the Verrazzano CLI (optional). Make sure that you have a valid kubeconfig file pointing to the Kubernetes cluster that you want to use for installing Verrazzano.\nNOTE: Verrazzano can create network policies that can be used to limit the ports and protocols that pods use for network communication. Network policies provide additional security but they are enforced only if you install a Kubernetes Container Network Interface (CNI) plug-in that enforces them, such as Calico. For instructions on how to install a CNI plug-in, see the documentation for your Kubernetes cluster.\nPerform the installation Verrazzano provides a platform operator to manage the life cycle of Verrazzano installations. Using the Verrazzano custom resource, you can install, uninstall, and upgrade Verrazzano installations. When applying the Verrazzano custom resource, the Verrazzano CLI deploys and installs the Verrazzano platform operator; you need only to install Verrazzano as described in the following section.\nVerrazzano supports the following installation profiles: development (dev), production (prod), and managed cluster (managed-cluster). For more information, see Installation Profiles.\nThis document shows how to create a basic Verrazzano installation using:\n The development (dev) installation profile Wildcard-DNS, where DNS is provided by nip.io (the default)  NOTE: Because the dev profile installs self-signed certificates, when installing Verrazzano on macOS, you might see: Your connection is not private. For a workaround, see this FAQ.\nFor an overview of how to configure Verrazzano, see Modify Verrazzano Installations. For a complete description of Verrazzano configuration options, see the Verrazzano Custom Resource Definition.\nTo use other DNS options, see Customizing DNS for more details.\nInstall Verrazzano To create a Verrazzano installation as described in the previous section, run the following commands.\n Install Verrazzano with its dev profile. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz install -f - \u003c\u003cEOF apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev defaultVolumeSource: persistentVolumeClaim: claimName: verrazzano-storage volumeClaimSpecTemplates: - metadata: name: verrazzano-storage spec: resources: requests: storage: 2Gi EOF     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   This command installs the Verrazzano platform operator and applies the Verrazzano custom resource.\nWait for the installation to complete. Installation logs will be streamed to the command window until the installation has completed or until the default timeout (30m) has been reached.  To use a different profile with the previous example, set the VZ_PROFILE environment variable to the name of the profile you want to install.\nNext steps Verify the installed Verrazzano using the vz CLI. See Verify using CLI.\n","categories":"","description":"Install Verrazzano using the `vz` CLI","excerpt":"Install Verrazzano using the `vz` CLI","ref":"/docs/setup/install/perform/cli-installation/","tags":"","title":"Install With CLI"},{"body":"The following instructions show you how to install Verrazzano in a single Kubernetes cluster using kubectl.\nPrerequisites  Find the Verrazzano prerequisite requirements here. Review the list of the software versions supported and installed by Verrazzano.  NOTE To avoid conflicts with Verrazzano system components, we recommend installing Verrazzano into an empty cluster.  Prepare for the installation Before installing Verrazzano, see instructions on preparing Kubernetes platforms and installing the Verrazzano CLI (optional). Make sure that you have a valid kubeconfig file pointing to the Kubernetes cluster that you want to use for installing Verrazzano.\nNOTE: Verrazzano can create network policies that can be used to limit the ports and protocols that pods use for network communication. Network policies provide additional security but they are enforced only if you install a Kubernetes Container Network Interface (CNI) plug-in that enforces them, such as Calico. For instructions on how to install a CNI plug-in, see the documentation for your Kubernetes cluster.\nYou can install Verrazzano using the Verrazzano CLI or with kubectl. See the following respective sections.\nInstall the Verrazzano platform operator Verrazzano provides a platform operator to manage the life cycle of Verrazzano installations. Using the Verrazzano custom resource, you can install, uninstall, and upgrade Verrazzano installations.\nTo install the Verrazzano platform operator:\n  Deploy the Verrazzano platform operator. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://github.com/verrazzano/verrazzano/releases/download/master/verrazzano-platform-operator.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the deployment to complete. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl -n verrazzano-install rollout status deployment/verrazzano-platform-operator # Expected response deployment \"verrazzano-platform-operator\" successfully rolled out    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Confirm that the operator pod is correctly defined and running. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl -n verrazzano-install get pods  # Sample output NAME READY STATUS RESTARTS AGE verrazzano-platform-operator-59d5c585fd-lwhsx 1/1 Running 0 114s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Perform the installation Verrazzano supports the following installation profiles: development (dev), production (prod), and managed cluster (managed-cluster). For more information, see Installation Profiles.\nThis document shows how to create a basic Verrazzano installation using:\n The development (dev) installation profile Wildcard-DNS, where DNS is provided by nip.io (the default)  NOTE: Because the dev profile installs self-signed certificates, when installing Verrazzano on macOS, you might see: Your connection is not private. For a workaround, see this FAQ.\nFor a complete description of Verrazzano configuration options, see the Verrazzano Custom Resource Definition.\nTo use other DNS options, see Customzing DNS for more details.\nInstall Verrazzano To create a Verrazzano installation as described in the previous section, run the following commands.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOF apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: ${VZ_PROFILE:-dev} EOF     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl wait \\ --timeout=20m \\ --for=condition=InstallComplete verrazzano/example-verrazzano     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  NOTE: If you are installing Verrazzano in an Azure Kubernetes Service (AKS) cluster, add the following annotation for ingressNGINX to access Verrazzano endpoints on Azure.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOF apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev components: ingressNGINX: overrides: - values: controller: service: annotations: service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz dns: wildcard: domain: nip.io EOF     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  To use a different profile with the previous example, set the VZ_PROFILE environment variable to the name of the profile you want to install.\nIf an error occurs, check the log output of the installation. You can view the logs with the following command.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl logs -n verrazzano-install \\ -f $(kubectl get pod \\ -n verrazzano-install \\ -l app=verrazzano-platform-operator \\ -o jsonpath=\"{.items[0].metadata.name}\") | grep '^{.*}$' \\ | jq -r '.\"@timestamp\" as $timestamp | \"\\($timestamp) \\(.level) \\(.message)\"'     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Next steps Verify the installed Verrazzano using kubectl. See Verify using CLI.\n","categories":"","description":"Install Verrazzano using `kubectl`","excerpt":"Install Verrazzano using `kubectl`","ref":"/docs/setup/install/perform/kubectl-installation/","tags":"","title":"Install With kubectl"},{"body":"Verrazzano installs a curated set of open source software. The following table lists the software, its version, and a brief description.\n   Software Version Description     Argo CD 2.7.2 A declarative, GitOps continuous delivery tool for Kubernetes.   cert-manager 1.9.1 Automates the management and issuance of TLS certificates.   cert-manager-webhook-oci 0.1.0 Cert-Manager webhook for Oracle Clould Infrastructure DNS.   Cluster API 1.4.2 Specifies the Cluster API configuration.   Coherence Operator 3.2.10 Assists with deploying and managing Coherence clusters.   ExternalDNS 0.12.2 Synchronizes exposed Kubernetes Services and ingresses with DNS providers.   Fluentd 1.14.5 Collects logs and sends them to OpenSearch.   Fluent Operator 2.2.0 Provides management for FluentBit and Fluentd in a Kubernetes environment.   Grafana 7.5.17 Tool to help you examine, analyze, and monitor metrics.   Istio 1.17.2 Service mesh that layers transparently onto existing distributed applications.   Jaeger 1.42.0 Distributed tracing system for monitoring and troubleshooting distributed systems.   Jaeger Operator 1.42.0 Provides management for Jaeger tools.   Keycloak 20.0.1 Provides single sign-on with Identity and Access Management.   Kiali 1.66.1 Management console for the Istio service mesh.   kube-state-metrics 2.8.2 Provides metrics about the state of Kubernetes API objects.   MySQL 8.0.32 Open source relational database management system used by Keycloak.   MySQL Operator 8.0.32-2.0.8 Operator for managing MySQL InnoDB Cluster setups inside a Kubernetes cluster.   NGINX Ingress Controller 1.7.1 Traffic management solution for cloud‑native applications in Kubernetes.   Node Exporter 1.3.1 Prometheus exporter for hardware and OS metrics.   OAM Kubernetes Runtime 0.3.3 Plug-in for implementing the Open Application Model (OAM) control plane with Kubernetes.   OpenSearch 2.3.0 Provides a distributed, multitenant-capable full-text search engine.   OpenSearch Dashboards 2.3.0 Provides search and data visualization capabilities for data indexed in OpenSearch.   Prometheus 2.44.0 Provides event monitoring and alerting.   Prometheus Adapter 0.10.0 Provides metrics in support of pod autoscaling.   Prometheus Operator 0.64.1 Provides management for Prometheus monitoring tools.   Prometheus Pushgateway 1.4.2 Allows ephemeral and batch jobs to expose their metrics to Prometheus.   Rancher 2.7.5 Manages multiple Kubernetes clusters.   Rancher Backup Operator 3.1.0 Manages backup and restore of Rancher configurations and data.   Thanos 0.30.2 Integrates with Prometheus to access and store metrics data.   Velero 1.9.1 Manages backup and restore of Kubernetes configurations and data.   WebLogic Kubernetes Operator 4.1.0 Assists with deploying and managing WebLogic domains.   WebLogic Monitoring Exporter 2.1.4 Exports Prometheus-compatible metrics from WebLogic instances.    ","categories":"","description":"Verrazzano installed software","excerpt":"Verrazzano installed software","ref":"/docs/setup/install/verify/softwares/","tags":"","title":"Installed Software"},{"body":"","categories":"","description":"Learn about Verrazzano","excerpt":"Learn about Verrazzano","ref":"/docs/introduction/","tags":"","title":"Introduction"},{"body":"The Verrazzano logging stack consists of Fluentd, OpenSearch, and OpenSearch Dashboards components.\n Fluentd: a log aggregator that collects, processes, and formats logs from Kubernetes clusters. OpenSearch: a scalable search and analytics engine for storing Kubernetes logs. OpenSearch Dashboards: a visualization layer that provides a user interface to query and visualize collected logs.  As shown in the following diagram, logs written to stdout by a container running on Kubernetes are picked up by the kubelet service running on that node and written to /var/log/containers.\n","categories":"","description":"Learn about Verrazzano logging components","excerpt":"Learn about Verrazzano logging components","ref":"/docs/observability/logging/logs/","tags":"","title":"Logging Components in Verrazzano"},{"body":"","categories":"","description":"Use case scenarios for microservices example applications","excerpt":"Use case scenarios for microservices example applications","ref":"/docs/examples/microservices/","tags":"","title":"Microservices"},{"body":"","categories":"","description":"View monitoring and diagnostic metrics","excerpt":"View monitoring and diagnostic metrics","ref":"/docs/observability/monitoring/","tags":"","title":"Monitoring"},{"body":"Packages:\n  clusters.verrazzano.io/v1alpha1   clusters.verrazzano.io/v1alpha1   Resource Types:  MultiClusterApplicationConfiguration  MultiClusterComponent  MultiClusterConfigMap  MultiClusterSecret  VerrazzanoProject  MultiClusterApplicationConfiguration   MultiClusterApplicationConfiguration specifies the multicluster application API.\n    Field Description      apiVersion string   clusters.verrazzano.io/v1alpha1      kind string  MultiClusterApplicationConfiguration    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  MultiClusterApplicationConfigurationSpec     The desired state of a multicluster application resource.\n     placement  Placement     Clusters in which the application is to be created.\n    secrets  []string    (Optional) List of secrets used by the application. These secrets must be created in the application’s namespace before deploying a MultiClusterApplicationConfiguration resource.\n    template  ApplicationConfigurationTemplate     Template containing the metadata and spec for an OAM applicationConfiguration resource.\n       status  MultiClusterResourceStatus     The observed state of a multicluster application resource.\n    MultiClusterComponent   MultiClusterComponent specifies the MultiCluster Component API.\n    Field Description      apiVersion string   clusters.verrazzano.io/v1alpha1      kind string  MultiClusterComponent    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  MultiClusterComponentSpec     The desired state of a MultiCluster Component resource.\n     placement  Placement     Clusters in which the component is to be created.\n    template  ComponentTemplate     Template containing the metadata and spec for an OAM component.\n       status  MultiClusterResourceStatus     The observed state of a MultiCluster Component resource.\n    MultiClusterConfigMap   MultiClusterConfigMap specifies the MultiCluster ConfigMap API.\n    Field Description      apiVersion string   clusters.verrazzano.io/v1alpha1      kind string  MultiClusterConfigMap    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  MultiClusterConfigMapSpec     The desired state of a MultiCluster ConfigMap resource.\n     placement  Placement     Clusters in which the ConfigMap is to be created.\n    template  ConfigMapTemplate     The embedded Kubernetes ConfigMap.\n       status  MultiClusterResourceStatus     The observed state of a MultiCluster ConfigMap resource.\n    MultiClusterSecret   MultiClusterSecret specifies the MultiCluster Secret API.\n    Field Description      apiVersion string   clusters.verrazzano.io/v1alpha1      kind string  MultiClusterSecret    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  MultiClusterSecretSpec     The desired state of a MultiCluster Secret resource.\n     placement  Placement     Clusters in which the secret is to be created.\n    template  SecretTemplate     The embedded Kubernetes secret.\n       status  MultiClusterResourceStatus     The observed state of a MultiCluster Secret resource.\n    VerrazzanoProject   VerrazzanoProject specifies the Verrazzano Projects API.\n    Field Description      apiVersion string   clusters.verrazzano.io/v1alpha1      kind string  VerrazzanoProject    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  VerrazzanoProjectSpec     The desired state of a Verrazzano Project resource.\n     placement  Placement     Clusters on which the namespaces are to be created.\n    template  ProjectTemplate     The project template.\n       status  MultiClusterResourceStatus     The observed state of a Verrazzano Project resource.\n    ApplicationConfigurationTemplate   (Appears on:MultiClusterApplicationConfigurationSpec)  ApplicationConfigurationTemplate has the metadata and embedded spec of the OAM applicationConfiguration resource.\n    Field Description      metadata  EmbeddedObjectMeta     Metadata describing the application.\n    spec  OAM core/v1alpha2.ApplicationConfigurationSpec     The embedded OAM application specification.\n     components  []OAM core/v1alpha2.ApplicationConfigurationComponent     Components of which this ApplicationConfiguration consists. Each component will be used to instantiate a workload.\n       Cluster   (Appears on:Placement)  Cluster contains the name of a single cluster.\n    Field Description      name  string    The name of a cluster.\n    ClusterLevelStatus   (Appears on:MultiClusterResourceStatus)  ClusterLevelStatus describes the status of the multicluster resource in a specific cluster.\n    Field Description      lastUpdateTime  string    Last update time of the resource state in this cluster.\n    message  string    Message details about the status in this cluster.\n    name  string    Name of the cluster.\n    state  StateType     State of the resource in this cluster.\n    ComponentTemplate   (Appears on:MultiClusterComponentSpec)  ComponentTemplate has the metadata and embedded spec of the OAM component.\n    Field Description      metadata  EmbeddedObjectMeta     Metadata describing the component.\n    spec  OAM core/v1alpha2.ComponentSpec     The embedded OAM component specification.\n     workload  Kubernetes runtime.RawExtension     A Workload that will be created for each ApplicationConfiguration that includes this Component. Workload is an instance of a workloadDefinition. We either use the GVK info or a special “type” field in the workload to associate the content of the workload with its workloadDefinition\n    parameters  []OAM core/v1alpha2.ComponentParameter     (Optional) Parameters exposed by this component. ApplicationConfigurations that reference this component may specify values for these parameters, which will in turn be injected into the embedded workload.\n       Condition   (Appears on:MultiClusterResourceStatus)  Condition describes current state of a multicluster resource.\n    Field Description      lastTransitionTime  string    (Optional) Last time the condition transitioned from one status to another.\n    message  string    (Optional) A message with details about the last transition.\n    status  Kubernetes core/v1.ConditionStatus     Status of the condition: one of True, False, or Unknown.\n    type  ConditionType     Type of condition.\n    ConditionType (string alias)  (Appears on:Condition)  ConditionType identifies the condition of the multicluster resource which can be checked with kubectl wait.\n    Value Description   \"DeployComplete\"\n DeployComplete means deployment to the specified cluster completed successfully.\n \"DeployFailed\"\n DeployFailed means the deployment to the specified cluster has failed.\n \"DeployPending\"\n DeployPending means deployment to the specified cluster is in progress.\n   ConfigMapTemplate   (Appears on:MultiClusterConfigMapSpec)  ConfigMapTemplate has the metadata and spec of the Kubernetes ConfigMap.\n    Field Description      binaryData  map[string][]byte    Corresponds to the binaryData field of the struct ConfigMap defined in types.go.\n    data  map[string]string    Corresponds to the data field of the struct ConfigMap defined in types.go.\n    immutable  bool    Corresponds to the immutable field of the struct ConfigMap defined in types.go.\n    metadata  EmbeddedObjectMeta     Metadata describing the ConfigMap.\n    EmbeddedObjectMeta   (Appears on:ApplicationConfigurationTemplate, ComponentTemplate, ConfigMapTemplate, SecretTemplate)  EmbeddedObjectMeta is metadata describing a resource.\n    Field Description      annotations  map[string]string    (Optional) Annotations for the resource.\n    labels  map[string]string    (Optional) Labels for the resource.\n    name  string    (Optional) Name of the resource.\n    namespace  string    (Optional) Namespace of the resource.\n    MultiClusterApplicationConfigurationSpec   (Appears on:MultiClusterApplicationConfiguration)  MultiClusterApplicationConfigurationSpec defines the desired state of a multicluster application.\n    Field Description      placement  Placement     Clusters in which the application is to be created.\n    secrets  []string    (Optional) List of secrets used by the application. These secrets must be created in the application’s namespace before deploying a MultiClusterApplicationConfiguration resource.\n    template  ApplicationConfigurationTemplate     Template containing the metadata and spec for an OAM applicationConfiguration resource.\n    MultiClusterComponentSpec   (Appears on:MultiClusterComponent)  MultiClusterComponentSpec defines the desired state of a MultiCluster Component.\n    Field Description      placement  Placement     Clusters in which the component is to be created.\n    template  ComponentTemplate     Template containing the metadata and spec for an OAM component.\n    MultiClusterConfigMapSpec   (Appears on:MultiClusterConfigMap)  MultiClusterConfigMapSpec defines the desired state of a MultiCluster ConfigMap.\n    Field Description      placement  Placement     Clusters in which the ConfigMap is to be created.\n    template  ConfigMapTemplate     The embedded Kubernetes ConfigMap.\n    MultiClusterResourceStatus   (Appears on:MultiClusterApplicationConfiguration, MultiClusterComponent, MultiClusterConfigMap, MultiClusterSecret, VerrazzanoProject)  MultiClusterResourceStatus is the runtime status of a multicluster resource.\n    Field Description      clusters  []ClusterLevelStatus     Status information for each cluster.\n    conditions  []Condition     The current state of a multicluster resource.\n    state  StateType     The state of the multicluster resource. State values are case-sensitive and formatted as follows: Failed: deployment to cluster failedPending: deployment to cluster is in progressSucceeded: deployment to cluster successfully completed\n    MultiClusterSecretSpec   (Appears on:MultiClusterSecret)  MultiClusterSecretSpec defines the desired state of a MultiCluster Secret.\n    Field Description      placement  Placement     Clusters in which the secret is to be created.\n    template  SecretTemplate     The embedded Kubernetes secret.\n    NamespaceTemplate   (Appears on:ProjectTemplate)  NamespaceTemplate contains the metadata and specification of a Kubernetes namespace.\n    Field Description      metadata  Kubernetes meta/v1.ObjectMeta     (Optional) Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  Kubernetes core/v1.NamespaceSpec     The specification of a namespace.\n     finalizers  []Kubernetes core/v1.FinalizerName     (Optional) Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\n       NetworkPolicyTemplate   (Appears on:ProjectTemplate)  NetworkPolicyTemplate contains the metadata and specification of a Kubernetes NetworkPolicy. NOTE To add an application NetworkPolicy, see NetworkPolicies for applications. \n    Field Description      metadata  Kubernetes meta/v1.ObjectMeta     (Optional) Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  Kubernetes networking/v1.NetworkPolicySpec     The specification of a network policy.\n     podSelector  Kubernetes meta/v1.LabelSelector     Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.\n    ingress  []Kubernetes networking/v1.NetworkPolicyIngressRule     (Optional) List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod’s local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)\n    egress  []Kubernetes networking/v1.NetworkPolicyEgressRule     (Optional) List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8\n    policyTypes  []Kubernetes networking/v1.PolicyType     (Optional) List of rule types that the NetworkPolicy relates to. Valid options are [“Ingress”], [“Egress”], or [“Ingress”, “Egress”]. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ “Egress” ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include “Egress” (since such a policy would not include an Egress section and would otherwise default to just [ “Ingress” ]). This field is beta-level in 1.8\n       Placement   (Appears on:MultiClusterApplicationConfigurationSpec, MultiClusterComponentSpec, MultiClusterConfigMapSpec, MultiClusterSecretSpec, VerrazzanoProjectSpec)  Placement contains the name of each cluster where a resource will be located.\n    Field Description      clusters  []Cluster     List of clusters.\n    ProjectTemplate   (Appears on:VerrazzanoProjectSpec)  ProjectTemplate contains the list of namespaces to create and the optional security configuration for each namespace.\n    Field Description      namespaces  []NamespaceTemplate     The list of application namespaces to create for this project.\n    networkPolicies  []NetworkPolicyTemplate     (Optional) Network policies applied to namespaces in the project.\n    security  SecuritySpec     (Optional) The project security configuration.\n    SecretTemplate   (Appears on:MultiClusterSecretSpec)  SecretTemplate has the metadata and spec of the Kubernetes Secret.\n    Field Description      data  map[string][]byte    Corresponds to the data field of the struct Secret defined in types.go.\n    metadata  EmbeddedObjectMeta     Metadata describing the secret.\n    stringData  map[string]string    Corresponds to the stringData field of the struct Secret defined in types.go.\n    type  Kubernetes core/v1.SecretType     The type of secret.\n    SecuritySpec   (Appears on:ProjectTemplate)  SecuritySpec defines the security configuration for a Verrazzano Project.\n    Field Description      projectAdminSubjects  []Kubernetes rbac/v1.Subject     (Optional) The subjects to bind to the verrazzano-project-admin role.\n    projectMonitorSubjects  []Kubernetes rbac/v1.Subject     (Optional) The subjects to bind to the verrazzano-project-monitoring role.\n    StateType (string alias)  (Appears on:ClusterLevelStatus, MultiClusterResourceStatus)  StateType identifies the state of a multicluster resource.\n    Value Description   \"Failed\"\n Failed is the state when deploy to specified cluster has failed.\n \"Pending\"\n Pending is the state when deploy to specified cluster is in progress.\n \"Succeeded\"\n Succeeded is the state when deploy to specified cluster is completed.\n   VerrazzanoProjectSpec   (Appears on:VerrazzanoProject)  VerrazzanoProjectSpec defines the desired state of a Verrazzano Project.\n    Field Description      placement  Placement     Clusters on which the namespaces are to be created.\n    template  ProjectTemplate     The project template.\n      Generated with gen-crd-api-reference-docs on git commit 238db2c3e. \n","categories":"","description":"","excerpt":"Packages:\n  clusters.verrazzano.io/v1alpha1   clusters.verrazzano.io/v1alpha1   Resource Types:  MultiClusterApplicationConfiguration  MultiClusterComponent  MultiClusterConfigMap  MultiClusterSecret …","ref":"/docs/reference/vao-clusters-v1alpha1/","tags":"","title":"Multicluster and Verrazzano Project"},{"body":"Verrazzano may be installed in a multicluster environment, consisting of an admin cluster and optionally, one or more managed clusters.\n The admin cluster is a central point from which Verrazzano applications in managed clusters can be deployed and monitored. Managed clusters are registered with an admin cluster. MultiClusterApplicationConfiguration resources are used to target applications to any cluster in a multicluster Verrazzano environment.  The following diagram shows a high-level overview of how multicluster Verrazzano works. For a more detailed view, see the diagram here.\nAdmin cluster A Verrazzano admin cluster is a central management point for:\n Deploying and undeploying applications to the managed clusters registered with the admin cluster. Viewing logs and metrics for both Verrazzano Components and applications that reside in the managed clusters.  You may register one or more managed clusters with the admin cluster by creating a VerrazzanoManagedCluster resource in the verrazzano-mc namespace of an admin cluster.\nNOTE: The admin cluster has a fully functional Verrazzano installation. You can locate applications on the admin cluster as well as on managed clusters.\nManaged clusters A Verrazzano managed cluster has a minimal footprint of Verrazzano, installed using the managed-cluster installation profile. A managed cluster has the following additional characteristics:\n It is registered with an admin cluster with a unique name. Logs for Verrazzano system Components and Verrazzano multicluster applications are sent to OpenSearch running on the admin cluster, and are viewable from that cluster. A Verrazzano MultiClusterApplicationConfiguration Kubernetes resource, created on the admin cluster, will be retrieved and deployed to a managed cluster if all of the following are true:  The MultiClusterApplicationConfiguration is in a namespace governed by a VerrazzanoProject. The VerrazzanoProject has a placement value that includes this managed cluster. The MultiClusterApplicationConfiguration itself has a placement value that includes this managed cluster.    Verrazzano multicluster applications Verrazzano includes a MultiClusterApplicationConfiguration resource definition for applications that may be targeted for placement in one or more clusters.\n A MultiClusterApplicationConfiguration is a wrapper for an ApplicationConfiguration, and additionally allows the placement of the underlying resource to be specified as a list of names of the clusters in which the ApplicationConfiguration must be placed. MultiClusterApplicationConfiguration resources, along with their associated Component and Secret resources, are created in the admin cluster, in a namespace that is part of a VerrazzanoProject, and targeted for placement in either the local admin cluster or a remote managed cluster. A multicluster application is considered part of a VerrazzanoProject if it is in a namespace that is governed by that VerrazzanoProject.  Managed cluster registration A managed cluster may be registered with an admin cluster using a two-step process:\nStep 1: Create a VerrazzanoManagedCluster resource in the verrazzano-mc namespace of the admin cluster.\nStep 2: Retrieve the Kubernetes manifest file generated in the VerrazzanoManagedCluster resource and apply it on the managed cluster to complete the registration.\nWhen a managed cluster is registered, the following will happen:\n After both steps of the registration are complete, the managed cluster begins polling the admin cluster for VerrazzanoProject resources and MultiClusterApplicationConfiguration resources, which specify a placement in this managed cluster.  Any VerrazzanoProject resources placed in this managed cluster are retrieved, and the corresponding namespaces and security permissions (RoleBindings) are created in the managed cluster. Any MultiClusterApplicationConfigurations that are placed in this managed cluster, and are in a VerrazzanoProject that is also placed in this managed cluster, are retrieved, and created or updated on the managed cluster. The underlying ApplicationConfiguration represented by the MultiClusterApplicationConfiguration is unwrapped, and created or updated on the managed cluster. The managed cluster namespace of the MultiClusterApplicationConfiguration and its underlying ApplicationConfiguration match the admin cluster namespace of the MultiClusterApplicationConfiguration. Any Component and Secret resources referenced by the retrieved MultiClusterApplicationConfigurations, are also retrieved and created on the managed cluster.   When the managed cluster connects to the admin cluster, it updates the VerrazzanoManagedCluster resource for this managed cluster with:  The endpoint URL that the admin cluster should use to scrape Prometheus metrics from the managed cluster. The date and time of the most recent successful connection from the managed cluster to the admin cluster.   For MultiClusterApplicationConfigurations retrieved and unwrapped on a managed cluster, the application logs are sent to OpenSearch on the admin cluster, and may be viewed from the Verrazzano-installed OpenSearch Dashboards on the admin cluster. Likewise, application metrics will be scraped by the admin cluster and available from Verrazzano-installed Prometheus on the admin cluster.  Detailed view of multicluster Verrazzano This diagram shows a detailed view of how multicluster Verrazzano works.\nFor more information, see the API Documentation for the resources described here.\nDeploy multicluster applications For an example of how to deploy an application in a multicluster environment, see Multicluster ToDo List.\n","categories":"","description":"Understand application deployment in a multicluster environment","excerpt":"Understand application deployment in a multicluster environment","ref":"/docs/applications/multicluster/intro/","tags":"","title":"Multicluster Application Deployment"},{"body":"Install Oracle Cloud Native Environment Deploy Oracle Cloud Native Environment with the Kubernetes module, following instructions from Oracle Cloud Native Environment: Getting Started.\n Install a Kubernetes network load balancer implementation, such as OCI-CCM or MetalLB. Install a Container Storage Interface Driver, such as OCI-CCM or Gluster.  Notes   The oci-ccm module does not elect a default StorageClass or configure policies for the CSIDrivers that it installs. A reasonable choice is the oci-bv StorageClass with its CSIDriver configured with the File group policy. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  kubectl patch sc oci-bv -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}' kubectl apply -f - \u003c\u003cEOF apiVersion: storage.k8s.io/v1 kind: CSIDriver metadata: name: blockvolume.csi.oraclecloud.com spec: fsGroupPolicy: File EOF     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Unless explicitly configured, the externalip-validation-webhook-service defaults to blocking all external IP addresses in the cluster, which causes the Verrazzano installation to fail because an IP address cannot be assigned to an ingress controller. When this situation occurs, the Verrazzano platform operator logs will contain a message similar to this: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  admission webhook \"validate-externalip.webhook.svc\" denied the request: spec.externalIPs: Invalid value: \"\u003cexternal IP address\u003e\": externalIP specified is not allowed to use     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nTo avoid this error, either disable the externalip-validation-webhook-service or configure the service with your load balancer IP addresses prior to installing Verrazzano. For more information, see Enabling Access to all externalIPs.\n  Examples  Oracle Cloud Infrastructure The following is an example of Oracle Cloud Infrastructure that can be used to evaluate Verrazzano installed on Oracle Cloud Native Environment. If other environments are used, the capacity and configuration should be similar. You can use the VCN Wizard of the Oracle Cloud Infrastructure Console to automatically create most of the described network infrastructure. Additional security lists and rules, as detailed in the following sections, need to be added manually. All Classless Inter-Domain Routing (CIDR) values provided are examples and can be customized as required.\nVirtual Cloud Network (for example, CIDR 10.0.0.0/16) Public Subnet for Load Balancer (for example, CIDR 10.0.0.0/24)\nSecurity List / Ingress Rules\n   Stateless Destination Protocol Source Ports Destination Ports Type \u0026 Code Description     No 0.0.0.0/0 ICMP   3, 4 ICMP errors   No 10.0.0.0/16 ICMP   3 ICMP errors   No 0.0.0.0/0 TCP All 22  SSH   No 0.0.0.0/0 TCP All 443  HTTPS load balancer    Security List / Egress Rules\n   Stateless Destination Protocol Source Ports Destination Ports Type \u0026 Code Description     No 10.0.1.0/24 TCP All 22  SSH   No 10.0.1.0/24 TCP All 31443  HTTPS load balancer   No 10.0.1.0/24 TCP All 32443  HTTPS load balancer    Private Subnet for Kubernetes Cluster (for example, CIDR 10.0.1.0/24)\nSecurity List / Ingress Rules\n   Stateless Destination Protocol Source Ports Destination Ports Type \u0026 Code Description     No 0.0.0.0/0 ICMP   3, 4 ICMP errors   No 10.0.0.0/16 ICMP   3 ICMP errors   No 10.0.0.0/16 TCP All 22  SSH   No 10.0.0.0/24 TCP All 31443  HTTPS load balancer   No 10.0.0.0/24 TCP All 32443  HTTPS load balancer   No 10.0.1.0/24 TCP All 2379-2380  Kubernetes etcd   No 10.0.1.0/24 TCP All 6443  Kubernetes API Server   No 10.0.1.0/24 TCP All 6446  MySQL   No 10.0.1.0/24 TCP All 8090-8091  Oracle Cloud Native Environment Platform Agent   No 10.0.1.0/24 UDP All 8472  Flannel   No 10.0.1.0/24 TCP All 10250-10255  Kubernetes Kublet    Security List / Egress Rules\n   Stateless Destination Protocol Source Ports Destination Ports Type and Code Description     No 10.0.0.0/16 TCP    All egress traffic    DHCP Options\n   DNS Type     Internet and VCN Resolver    Route Tables\nPublic Subnet Route Table Rules\n   Destination Target     0.0.0.0/0 Internet Gateway    Private Subnet Route Table Rules\n   Destination Target     0.0.0.0/0 NAT Gateway   All Oracle Cloud Infrastructure Services Service Gateway    Compute Instances The following compute resources adhere to the guidelines provided in Oracle Cloud Native Environment: Getting Started. The attributes indicated (for example, Subnet, RAM, Shape, and Image) are recommendations that have been tested. Other values can be used if required.\n   Role Subnet Suggested RAM Compatible VM Shape Compatible VM Image     SSH Jump Host Public 8 GB VM.Standard3.Flex Oracle Linux 7.9   Oracle Cloud Native Environment Operator Host Private 16 GB VM.Standard3.Flex Oracle Linux 7.9   Kubernetes Control Plane Node Private 32 GB VM.Standard3.Flex Oracle Linux 7.9   Kubernetes Worker Node 1 Private 32 GB VM.Standard3.Flex Oracle Linux 7.9   Kubernetes Worker Node 2 Private 32 GB VM.Standard3.Flex Oracle Linux 7.9   Kubernetes Worker Node 3 Private 32 GB VM.Standard3.Flex Oracle Linux 7.9     Next steps To continue, see the Installation Guide.\n","categories":"","description":"Set up an Oracle Cloud Native Environment cluster for Verrazzano","excerpt":"Set up an Oracle Cloud Native Environment cluster for Verrazzano","ref":"/docs/setup/install/prepare/platforms/olcne/","tags":"","title":"Prepare an Oracle Cloud Native Environment Cluster"},{"body":"","categories":"","description":"Prepare your environment for installing Verrazzano","excerpt":"Prepare your environment for installing Verrazzano","ref":"/docs/setup/install/prepare/","tags":"","title":"Prepare to Install Verrazzano"},{"body":"A Verrazzano installation consists of a stack of components, such as cert-manager, where each component has a specific release version that may be different from the overall Verrazzano version. The Verrazzano platform operator knows the versions of each component associated with the Verrazzano version. When you perform the initial Verrazzano installation, the appropriate version of each component is installed by the platform operator. Post installation, it may be necessary to update one or more of the component images or Helm charts. This update is also handled by the platform operator and is called an upgrade. Currently, Verrazzano does only patch-level upgrades, where a helm upgrade command can be issued for the component. Typically, patch-level upgrades simply replace component images with newer versions.\nApplication and system pod restarts If Verrazzano has a new version of Istio, then all the pods with Istio proxy sidecars need to be restarted. This is done so that the new version of the proxy sidecar can be injected into the pods. All Verrazzano system pods containing Istio proxy sidecars will be restarted. Additionally, OAM application workloads with old versions of the Istio proxy sidecar will be restarted as well. Verrazzano will perform a rolling restart of all OAM workloads, except WebLogic workloads with an Istio proxy sidecar that is out of date by two minor versions or more. For these workloads, Verrazzano will stop the WebLogic domain prior to upgrade and restart it after the upgrade has been completed. This may result in downtime during upgrade for these WebLogic workloads. There is no user involvement related to restarting OAM applications; it is done automatically during upgrade.\n","categories":"","description":"Pre-upgrade information","excerpt":"Pre-upgrade information","ref":"/docs/setup/upgrade/prepare/","tags":"","title":"Prepare to Upgrade Verrazzano"},{"body":"Verrazzano requires the following:\n  A Kubernetes cluster and a compatible kubectl.\n  Two load balancers. Note that in a Verrazzano multicluster environment, two load balancers are required for each cluster.\n  dev profile - Each node in the cluster should contain at least two CPUs, 16 GB RAM, and 100 GB of disk storage. The entire cluster requires at least six CPUs, 48 GB RAM, and 100 GB of disk storage. In addition, about 52 GB of storage is required for the persistent volumes.\n  prod profile - Each node in the cluster should contain at least four CPUs, 32 GB RAM, and 100 GB of disk storage. The entire cluster requires at least eight CPUs, 64 GB RAM, and 150 GB of disk storage. In addition, about 450 GB of storage is required for the persistent volumes.\nThe storageClassName is not available for all the components where you configure persistent volumes, therefore, when it is not specified, the default StorageClass from the cluster is used.\n  NOTE To avoid conflicts with Verrazzano system components, we recommend installing Verrazzano into an empty cluster. Also, depending on the resource requirements of the applications you deploy, the configurations previously suggested may or may not be sufficient.  Supported hardware Verrazzano requires x86-64; other architectures are not supported.\nSupported software versions Verrazzano supports the following software versions.\nKubernetes You can install Verrazzano on the following Kubernetes versions.\n   Verrazzano Kubernetes Versions     1.6 1.24, 1.25, 1.26   1.5 1.21, 1.22, 1.23, 1.24   1.4 1.21, 1.22, 1.23, 1.24   1.3 1.21, 1.22, 1.23   1.2 1.19, 1.20, 1.21   1.1 1.19, 1.20, 1.21   1.0 1.18, 1.19, 1.20    For more information, see Kubernetes Release Documentation. For platform specific details, see Verrazzano platform setup.\nWebLogic Server The supported versions of WebLogic Server are dependent on the WebLogic Kubernetes Operator version. See the WebLogic Server versions supported here.\nCoherence The supported versions of Coherence are dependent on the Coherence Operator version. See the Coherence versions supported here.\nHelidon Verrazzano supports all versions of Helidon. For more information, see Helidon and Helidon Commercial Offerings.\nVerrazzano installed software For a detailed list of Verrazzano installed software, see here.\n","categories":"","description":"Review the prerequisite requirements and the software versions supported by Verrazzano","excerpt":"Review the prerequisite requirements and the software versions supported by Verrazzano","ref":"/docs/setup/install/prepare/prereqs/","tags":"","title":"Prerequisites"},{"body":"The Quick Start assumes that you have already installed a Kubernetes cluster. For instructions on preparing Kubernetes platforms for installing Verrazzano, see Platform Setup. For detailed installation instructions, see the Installation Guides.\nNOTE: If you just created the cluster, then you must wait until your nodes reach Ready status before installing Verrazzano.\nGetting up and running quickly with Verrazzano is as easy as 1 - 2 - 3:\n1. Install CLI The Verrazzano command-line tool, vz, is available for Linux and Mac systems.\nDownload the binary you want from the Releases page.\nFor example, to download the latest release for Linux AMD64 machines: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ curl -LO https://github.com/verrazzano/verrazzano/releases/download/master/verrazzano-1.6.0-linux-amd64.tar.gz     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUnpack and copy the vz binary. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ tar xvf verrazzano-2.0.0-linux-amd64.tar.gz     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe following command needs to be run as root.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ sudo cp verrazzano-2.0.0/bin/vz /usr/local/bin     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  2. Install Verrazzano You install Verrazzano by creating a Verrazzano custom resource in your Kubernetes cluster. Verrazzano currently supports several installation profiles.\nUsing the Quick Start, you’ll install the dev profile, which is suitable for evaluation.\nNOTE Because the dev profile installs self-signed certificates, when installing Verrazzano on macOS, you might see: Your connection is not private. For a workaround, see this FAQ.  Install Verrazzano with its dev profile. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz install -f - \u003c\u003cEOF apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev defaultVolumeSource: persistentVolumeClaim: claimName: verrazzano-storage volumeClaimSpecTemplates: - metadata: name: verrazzano-storage spec: resources: requests: storage: 2Gi EOF     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nWait for the installation to complete. Installation logs will be streamed to the command window until the installation has completed or until the default timeout (30m) has been reached.\nNOTE: For some applications, the Kiali console may show warnings for objects that replicate hostname/port configurations across multiple IngressTraits. These warnings do not impact functionality and can be suppressed with the following component override.\n3. Deploy an application The Hello World Helidon example application provides a simple Hello World REST service written with Helidon. For more information and the code of this application, see the Verrazzano Examples.\nTo deploy the Hello World Helidon example application:\n  Create a namespace for the example application and add labels identifying the namespace as managed by Verrazzano and enabled for Istio. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create namespace hello-helidon $ kubectl label namespace hello-helidon verrazzano-managed=true istio-injection=enabled     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Apply the hello-helidon resources to deploy the application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-comp.yaml -n hello-helidon $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-app.yaml -n hello-helidon     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the application to be ready. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl wait \\ --for=condition=Ready pods \\ --all -n hello-helidon \\ --timeout=300s # Sample output pod/hello-helidon-deployment-78468f5f9c-czmp4 condition met     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThis creates the Verrazzano OAM Component application resources for the example and waits for the pods in the hello-helidon namespace to be ready.\n  Save the host name of the load balancer exposing the application’s REST service endpoints. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ HOST=$(kubectl get gateways.networking.istio.io hello-helidon-hello-helidon-gw \\ -n hello-helidon \\ -o jsonpath='{.spec.servers[0].hosts[0]}')     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the default message. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -sk \\ -X GET \\ \"https://${HOST}/greet\" # Expected response {\"message\":\"Hello World!\"}     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Next steps See the Verrazzano Example Applications.\n","categories":"","description":"Get started using Verrazzano","excerpt":"Get started using Verrazzano","ref":"/docs/setup/quickstart/","tags":"","title":"Quick Start"},{"body":"Verrazzano provides Jaeger, a distributed tracing system used for monitoring and troubleshooting microservices.\nAbout distributed tracing Distributed tracing is a method for tracking application behavior as it propagates through distributed systems. You can track application requests as they flow from front end devices to back end services and databases.\nDistributed tracing is useful for tracking and observability, in general, however, it can also help you identify the exact line of occurrence of a error in a complex architecture. You can use distributed tracing to troubleshoot requests that exhibit high latency or errors.\nWith distributed tracing, the application transactions are captured using request and response headers. A trace header gets added from the original request to subsequent requests and thus creating a link through out the entire transaction that can be traced back to the origin. A single trace typically shows the activity for an individual transaction or request within the application being monitored, from the browser or mobile device, down through to the database and back.\nIn distributed tracing, a single trace contains a series of tagged time intervals called spans. A span can be thought of as a single unit of work. Spans have a start and end time, and optionally may include other metadata, like tags or events. Spans have relationships between one another, including parent-child relationships, which are used to show the specific path a particular transaction takes through the numerous services or components that make up the application.\n A trace represents an end-to-end request; it’s made up of a single or multiple spans. A span represents work done by a single-service with time intervals and associated metadata, such as tags and events:  Tags let you query your traces to filter the results and help with your collaboration and debugging efforts. Events will show up as logs associated with the span that added the event.    About Jaeger tracing As with most other distributed tracing systems, Jaeger works with spans and traces, as defined in the OpenTracing specification.\nIn Verrazzano, Jaeger is comprised of the following components:\n Collector service, which receives traces from clients, processes them, and stores them in a storage back end. Query service, which exposes the APIs for retrieving traces from storage and hosts the Jaeger console for searching and analyzing traces. Storage, may be ephemeral or backed by OpenSearch.  Jaeger can be configured to use one of several choices for storage back ends. In Verrazzano, trace records are stored in OpenSearch; OpenSearch must be enabled in Verrazzano for this to work.    Jaeger is very configurable. See the Jaeger documentation for detailed information about Jaeger features and architecture. In Verrazzano, Jaeger does not include the Ingester service, Kafka, or Sparks jobs.\nNext steps  Enable Jaeger and customize your Verrazzano Jaeger installation. See configure tracing. Configure your applications to send traces to Jaeger. Then, use the Verrazzano Jaeger console to view traces.  ","categories":"","description":"Learn how application tracing components work in Verrazzano","excerpt":"Learn how application tracing components work in Verrazzano","ref":"/docs/observability/tracing/application-tracing/","tags":"","title":"Understand Application Tracing Components in Verrazzano"},{"body":"The Verrazzano metrics stack automates metrics aggregation and consists of Prometheus, Thanos, and Grafana components. Metrics sources expose system and application metrics. The Prometheus and Thanos components retrieve and store the metrics and Grafana provides dashboards to visualize them.\nThe following is a representation of metrics collection in a single cluster environment.\nMetrics sources The following sections describe metrics sources that Verrazzano provides for OAM and standard Kubernetes applications.\nOAM Metrics sources produce metrics and expose them to the Kubernetes Prometheus system using annotations in the pods. The metrics annotations may differ slightly depending on the resource type. The following is an example of the WebLogic Prometheus-related configuration specified in the todo-list application pod:\n$ kubectl describe pod tododomain-adminserver -n todo-list\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  Annotations: prometheus.io/path: /wls-exporter/metrics prometheus.io/port: 7001 prometheus.io/scrape: true    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  For other resource types, such as Coherence or Helidon, the annotations would look similar to this:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  Annotations: verrazzano.io/metricsEnabled: true verrazzano.io/metricsPath: /metrics verrazzano.io/metricsPort: 8080    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  To look directly at the metrics that are being made available by the metric source, map the port and then access the path.\nFor example, for the previous metric source:\n  Map the port being used to expose the metrics. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl port-forward tododomain-adminserver 7001:7001 -n todo-list    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the user name and password used to access the metrics source from the corresponding secret. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get secret \\ --namespace todo-list tododomain-weblogic-credentials \\ -o jsonpath={.data.username} | base64 \\ --decode; echo $ kubectl get secret \\ --namespace todo-list tododomain-weblogic-credentials \\ -o jsonpath={.data.password} | base64 \\ --decode; echo    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access the metrics at the exported path, using the user name and password retrieved in the previous step. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -u USERNAME:PASSWORD localhost:7001/wls-exporter/metrics    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Standard Kubernetes workloads Verrazzano supports enabling metric sources for Kubernetes workloads deployed without OAM Components. To enable metrics for Kubernetes workloads, you must create a Service Monitor or Pod Monitor, as applicable.\nMetrics Traits use Service Monitors which require Services for metrics collection.\nFor details on Service Monitor and Pod Monitor, refer to the Prometheus Operator documentation.\nWhen creating the Service Monitor or Pod Monitor for your workload, include the label release, with the value prometheus-operator on the monitor resource.\nVerify metrics collection To verify that the metrics are being collected for your workload, follow these steps.\n Access the Prometheus console. From the console, use the navigation bar to access Status/Targets. On this page, you will see a target name with this formatting: \u003cmonitor-type\u003e/\u003cworkload-namespace\u003e_\u003cworkload-name\u003e_\u003cworkload-type\u003e, where monitor-type may be serviceMonitor or podMonitor. Copy this job name from the target labels for use in future queries. Verify that the State of this target is UP. Next, use the navigation bar to access the Graph. Here, use the job name you copied to construct this expression: {job=\"\u003cjob_name\u003e\"} Use the graph to run this expression and verify that you see application metrics appear.  If you are unable to verify metrics collection, you might need to manually create a Service for the workload.\nFor more information on Prometheus solutions, see Troubleshooting Prometheus.\nLegacy workloads Standard Kubernetes workloads that were metrics sources in earlier versions of Verrazzano (1.3.x or earlier), will continue to be supported when upgrading to later versions of Verrazzano.\nFor workloads that used the legacy default metrics template, Verrazzano will create a Service Monitor in the workload’s namespace to ensure that metrics continue to be scraped. You can make any ongoing changes to the metrics source configuration by editing the Service Monitor.\nFor workloads that used a legacy custom metrics template, Verrazzano will configure the Prometheus Operator to ensure that metrics continue to be scraped.\nMetrics server  Verrazzano installs the Prometheus Operator in the verrazzano-monitoring namespace. A single Prometheus pod is created by Prometheus Operator in the same namespace. Discovers exposed metrics source endpoints. Scrapes metrics from metrics sources. Responsible for exposing all metrics.  ","categories":"","description":"Learn about Verrazzano metrics gathering and viewing","excerpt":"Learn about Verrazzano metrics gathering and viewing","ref":"/docs/observability/monitoring/configure-metrics/","tags":"","title":"Understand Monitoring Components in Verrazzano"},{"body":"Before uninstalling Verrazzano, you should delete your Verrazzano applications because they may not function properly after the uninstall operation is done.\nWhen you uninstall Verrazzano:\n All of the Verrazzano components are uninstalled. The CRDs installed by Verrazzano are not deleted. Any applications that were deployed will still exist, but they may not be functional.  ","categories":"","description":"Items to consider before uninstalling Verrazzano","excerpt":"Items to consider before uninstalling Verrazzano","ref":"/docs/setup/uninstall/uninstall_considerations/","tags":"","title":"Uninstall Considerations"},{"body":"To register a cluster, complete the following steps:\n  Enable syncClusters. For information about syncClusters, see Enable syncClusters. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  kubectl apply -f - \u003c\u003cEOF apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: admin spec: profile: prod components: clusterOperator: overrides: - values: syncClusters: enabled: true EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  On the admin cluster, open the Rancher console. You can find the Rancher console URL for your cluster by following the instructions here.\n  Select Cluster Management, and then click Import Existing Cluster.\n  Provide a name for your managed cluster, for example, managed1.\n  Optional. In your Verrazzano configuration, if you specified a cluster label selector, then under Labels \u0026 Annotations provide the label and value for the cluster. The label and value information must match the cluster selection matchExpression in your Verrazzano configuration for selective cluster registration to occur.\n  Click Create.\n  On the next screen, follow the on-screen instructions to complete the registration by running the provided command against the managed cluster.\n  After the cluster reaches the Active state in the console, synchronization with Verrazzano will happen automatically and a VerrazzanoManagedCluster resource will be created in the verrazzano-mc namespace.\nRun the following command to view the details and status of Verrazzano’s multicluster initialization operations: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get vmc -n verrazzano-mc \u003cRancher_cluster_name\u003e -o yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor more information, see Registering Existing Clusters in the Rancher documentation.\nNOTE: You can also register managed clusters using kubectl, see Register Managed Clusters using kubectl.\nNext steps  Verify your multicluster Verrazzano environment set up by following the instructions at Verify Multicluster Installation. Deploy multicluster example applications. See Examples of using Verrazzano in a multicluster environment.  NOTE To deregister a managed cluster, see Deregister a Managed Cluster.  ","categories":"","description":"Register managed clusters using the Verrazzano Console","excerpt":"Register managed clusters using the Verrazzano Console","ref":"/docs/setup/mc-install/register/ui-register/","tags":"","title":"Use the Verrazzano Console"},{"body":"To verify the Verrazzano installation, you can use the vz status command to determine the status of your installation. After a successful installation, Verrazzano should be in the Ready state.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz status  # Sample output for a dev profile install Verrazzano Status  Name: example-verrazzano  Namespace: default  Profile: prod  Version: v1.5.1  State: Ready  Available Components: 23/23  Access Endpoints:  consoleUrl: https://verrazzano.default.10.0.0.1.nip.io  grafanaUrl: https://grafana.vmi.system.default.10.0.0.1.nip.io  keyCloakUrl: https://keycloak.default.10.0.0.1.nip.io  kialiUrl: https://kiali.vmi.system.default.10.0.0.1.nip.io  openSearchDashboardsUrl: https://osd.vmi.system.default.10.0.0.1.nip.io  openSearchUrl: https://opensearch.vmi.system.default.10.0.0.1.nip.io  prometheusUrl: https://prometheus.vmi.system.default.10.0.0.1.nip.io  rancherUrl: https://rancher.default.10.0.0.1.nip.io    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  For installation troubleshooting help, see the Analysis Advice.\nAfter the installation has completed, you can use the Verrazzano consoles. For information on how to get the consoles URLs and credentials, see Access Verrazzano.\nNext steps (Optional) Run the example applications located here.\n","categories":"","description":"Verify installed Verrazzano using the `vz` CLI","excerpt":"Verify installed Verrazzano using the `vz` CLI","ref":"/docs/setup/install/verify/cli-verify/","tags":"","title":"Verify Using CLI"},{"body":"Traits customize Component workloads and generate related resources during deployment. Verrazzano provides several Traits, for example IngressTrait and MetricsTrait. The platform extracts Traits contained within an ApplicationConfiguration during deployment. This processing is similar to the extraction of workload content from Component resources. Note that for some Kubernetes resources, the oam-kubernetes-runtime operator may need to be granted create permission.\nA Kubernetes operator, for example verrazzano-application-operator, processes these extracted Traits and may create additional related resources or may alter related workloads. Each Trait implementation will behave differently.\nThe following sample shows an IngressTrait applied to a referenced Component. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:ApplicationConfiguration...spec:components:- componentName:example-componenttraits:- trait:apiVersion:oam.verrazzano.io/v1alpha1kind:IngressTraitspec:rules:- paths:- path:\"/greet\"   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nEach Trait type optionally can have an associated TraitDefinition. This provides the platform with additional information about the Trait’s schema and workloads to which the Trait can be applied. A TraitDefintion is typically provided by the platform, not an end user.\nThe Verrazzano platform provides several Trait definitions and implementations:\n IngressTrait MetricsTrait LoggingTrait  ","categories":"","description":"Learn about Verrazzano traits","excerpt":"Learn about Verrazzano traits","ref":"/docs/applications/oam/traits/about-traits/","tags":"","title":"About Verrazzano Traits"},{"body":"Components contain an embedded workload. Verrazzano and the OAM specification provide several workloads, for example VerrazzanoWebLogicWorkload and ContainerizedWorkload. Workloads can also be any Kubernetes resource.\nThe following sample shows a VerrazzanoHelidonWorkload workload embedded within a Component. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:Component...spec:workload:apiVersion:oam.verrazzano.io/v1alpha1kind:VerrazzanoHelidonWorkloadspec:deploymentTemplate:podSpec:containers:- name:example-containerimage:......   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nA workload can optionally have an associated WorkloadDefinition. This provides the platform with information about the schema of the workload. A WorkloadDefintion is typically provided by the platform, not an end user.\nScopes Scopes customize Component workloads and generate related resources during deployment. An ApplicationConfiguration contains Scope references instead of the Scope’s content being embedded. The platform will update the Scopes with a reference to each applied Component. This update triggers the related operator to process the Scope.\nThe following sample shows a reference to a HealthScope named example-health-scope. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:ApplicationConfiguration...spec:components:- componentName:example-componentscopes:- scopeRef:apiVersion:core.oam.dev/v1alpha2kind:HealthScopename:example-health-scope...   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe following sample shows the configuration details of the referenced HealthScope. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:HealthScopemetadata:name:example-health-scopespec:probe-method:GETprobe-endpoint:/health   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nEach Scope type can optionally have an associated ScopeDefinition. This provides the platform with additional information about processing the Scope:\n The Scope’s schema The workload types to which the Scope can be applied The field within the Scope used to record related Component references  A ScopeDefintion is typically provided by the platform, not an end user.\nThe Verrazzano platform provides several workload definitions and implementations:\n The VerrazzanoWebLogicWorkload is used for WebLogic workloads. See WebLogic Workload. The VerrazzanoCoherenceWorkload is used for Coherence workloads. See Coherence Workload. The VerrazzanoHelidonWorkload is used for Helidon workloads. See Helidon Workload.  OAM ContainerizedWorkload The ContainerizedWorkload should be used for long-running container workloads which are not covered by the workload types described previously. This workload type is similar to the Deployment workload. It is provided to ensure that OAM can be used for non-Kubernetes deployment environments. See the OAM specification.\n","categories":"","description":"Learn about Verrazzano workloads","excerpt":"Learn about Verrazzano workloads","ref":"/docs/applications/oam/workloads/about-workloads/","tags":"","title":"About Verrazzano Workloads"},{"body":"Alertmanager sends alerts that are firing in Prometheus to configured receivers. PrometheusRules will trigger alerts based on the value of metrics. Alertmanager groups, routes, and silences these alerts according to its configuration. Alertmanager provides receiver integrations for email, Slack, PagerDuty, and other popular notification services.\nEnable Alertmanager First, enable Alertmanager by configuring it in the Prometheus Operator component in the Verrazzano custom resource. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: custom-prometheus spec: components: prometheusOperator: overrides: - values: alertmanager: enabled: true    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nCreate an AlertmanagerConfig Next, create an AlertmanagerConfig to configure the receivers to which Alertmanager will send alerts. To create the AlertmanagerConfig, access the Verrazzano console and navigate to the following location:\nMonitoring \u003e Alerting \u003e AlertmanagerConfigs\nAlertmanager will automatically discover AlertmanagerConfigs in the same namespace where it is deployed, which is verrazzano-monitoring, by default.\nFor more information about Alertmanager configurations, see the Alertmanager Documentation.\nDeploy a PrometheusRule After you have enabled Alertmanager and configured an AlertmanagerConfig with a receiver and route, you can deploy rules that trigger alerts. To create a TestAlertRule, run the following command. This PrometheusRule will send an alert if the last configuration reload in the Prometheus pod was unsuccessful. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOF apiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata: labels: release: prometheus-operator name: prometheus-operator-test namespace: verrazzano-monitoring spec: groups: - name: test rules: - alert: TestAlertRule annotations: description: Test alert rule runbook_url: test-runbook-url summary: Test alert rule expr: |- prometheus_config_last_reload_successful{job=\"prometheus-operator-kube-p-prometheus\",namespace=\"verrazzano-monitoring\"} == 0 for: 10m labels: severity: critical EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor more information, see Deploying Prometheus Rules.\n","categories":"","description":"Customize Alertmanager alert handling","excerpt":"Customize Alertmanager alert handling","ref":"/docs/observability/monitoring/configure/alertmanager/","tags":"","title":"Alertmanager"},{"body":"Each Verrazzano installation sits on top of a Kubernetes cluster (that can be hosted on a variety of environments). Verrazzano relies on the Kubernetes API to pull information from the cluster to its components and push instructions from its components down to the cluster. Specifically, Verrazzano uses custom resources, extensions of the Kubernetes API to configure Kubernetes environments and provide additional functionality.\nBecause Verrazzano extends Kubernetes, you can continue to use many of the Kubernetes management tools you’re already familiar with, such as kubectl and kubeadm.\nEach Kubernetes cluster must have both a Container Network Interface (CNI) and a Container Storage Interface (CSI) plugin.\nInside a Verrazzano installation Verrazzano consists of many, discrete components. To coordinate between these components, Verrazzano engages the Istio service mesh - an infrastructure layer that manages the flow of information between services. Most Verrazzano components operate from within the Istio service mesh and rely on it to facilitate fast, reliable, and secure communication between them. Istio also provides useful features such as load balancing, traffic control, observability, and more.\nLearn more about how Istio handles traffic and network security in Verrazzano at Networking.\nThe components within the service mesh can broadly be organized into the following categories:\n Backup and restore Certificate management Cluster management GitOps Identity management Observability Verrazzano operators  See Installed Software for a list of the components included with Verrazzano. Depending on which installation profile you choose to apply, some components are not enabled by default.\nOne Verrazzano component that does not reside within the service mesh is the Verrazzano platform operator, a custom Kubernetes operator that handles the management of Verrazzano itself - including installation (and uninstallation), upgrades, and troubleshooting. The platform operator also works with the service mesh to synchronize actions between the components and Kubernetes clusters.\nApplication deployment With Verrazzano, you can manage a variety of application types. Depending on their type, applications are deployed from different spaces within the architecture of Verrazzano.\nApplications that conform to the Open Application Model (OAM) specification are deployed within the service mesh. Their close proximity to other components allows for significant automation and configuration benefits.\nOther application types are deployed in the Kubernetes cluster. They can still use Verrazzano features but may require additional configuration. Whichever application types you use, they’ll benefit from Verrazzano’s comprehensive management solution.\nMulticluster support You can use Verrazzano in single and multicluster Kubernetes environments. In a multicluster environment, there is an admin cluster, which is the central management point for deploying and monitoring applications, and one or more managed clusters, which look to the admin cluster for configurations.\nVerrazzano is installed on every cluster; admin clusters are installed with either a dev or prod profile, while managed clusters use a managed-cluster profile which has fewer components enabled by default and requires registration to an admin cluster. See Installation Profiles for details.\nAfter registration, a managed cluster submits logging and metrics data to its admin cluster, and receives configuration instructions in turn, over HTTPS.\n","categories":"","description":"","excerpt":"Each Verrazzano installation sits on top of a Kubernetes cluster (that can be hosted on a variety of environments). Verrazzano relies on the Kubernetes API to pull information from the cluster to its …","ref":"/docs/introduction/architecture/","tags":"","title":"Verrazzano Architecture"},{"body":"Verrazzano provides an Argo CD deployment that automates the deployment of the desired application states in the specified target environments. There are scenarios where you may want to back up your Argo CD data and restore it.\nVerrazzano uses Velero to facilitate backing up and restoring Argo CD data.\n Velero operator prerequisites Argo CD backup using Velero Argo CD restore using Velero  Velero operator prerequisites Before proceeding with an Argo CD backup or restore operation, the following details should be kept handy:\n Object store bucket name.  An Amazon S3 compatible object storage bucket. This can be an Oracle Cloud Object Storage bucket in any compartment of your Oracle Cloud tenancy.  For reference, make a note of the bucket name and tenancy name. For more information about creating a bucket with Object Storage, see Managing Buckets.   For private clouds, enterprise networks, or air-gapped environments, this could be MinIO or an equivalent object store solution.   Object store prefix name. This will be a child folder under the bucket, which the backup component creates. Object store region name. Object store signing key.  A signing key, which is required to authenticate with the Amazon S3 compatible object store; this is an Access Key/Secret Key pair. In Oracle Cloud Infrastructure, you or your administrator creates the Customer Secret Key.  An associated Access Key will be generated for the secret key. To create a Customer Secret Key, see Customer Secret Key.      To back up or restore Argo CD, you must first enable Velero.\n  The following configuration shows you how to enable velero with a prod installation profile. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f -\u003c\u003cEOFapiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:example-verrazzanospec:profile:prodcomponents:velero:enabled:trueEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  After Verrazzano installation is completed, verify that the Velero pods are running in the verrazzano-backup namespace. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pod -n verrazzano-backup # Sample of pods running after enabling the velero component NAME READY STATUS RESTARTS AGE restic-ndxfk 1/1 Running 0 21h velero-5ff8766fd4-xbn4z 1/1 Running 0 21h    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Velero requires a secret to communicate with the S3 compatible object store, so we create a backup-secret.txt file, which has the object store credentials. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  [default] aws_access_key_id=\u003cobject store access key\u003e aws_secret_access_key=\u003cobject store secret key\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  In the namespace verrazzano-backup, create a Kubernetes secret, for example verrazzano-backup-creds. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create secret generic -n verrazzano-backup \u003csecret-name\u003e --from-file=\u003ckey\u003e=\u003cfull_path_to_creds_file\u003e The following is an example:\n$ kubectl create secret generic -n verrazzano-backup verrazzano-backup-creds --from-file=cloud=backup-secret.txt NOTE: To avoid misuse of sensitive data, ensure that the backup-secret.txt file is deleted after the Kubernetes secret is created.\n  function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Create a BackupStorageLocation resource, which the backup component will reference for subsequent backups. See the following BackupStorageLocation example, which uses Oracle Cloud Object Storage. For more information, see Backup Storage Location in the Velero documentation. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f -\u003c\u003cEOFapiVersion:velero.io/v1kind:BackupStorageLocationmetadata:name:verrazzano-backup-locationnamespace:verrazzano-backupspec:provider:awsobjectStorage:bucket:example-verrazzanoprefix:backup-democredential:name:verrazzano-backup-credskey:cloudconfig:region:us-phoenix-1s3ForcePathStyle:\"true\"s3Url:https://\u003cmyobjstorenamespace\u003e.compat.objectstorage.us-phoenix-1.oraclecloud.comEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Argo CD backup using Velero If you created applications with resources running in different namespaces, other than argocd, then based on the following criteria you can back up and restore Argo CD:\n If applications running in different namespaces use persistent volumes, then you can back up the namespace where the applications are running with the PV. If applications running in different namespaces do not use persistent storage, then:  Take a backup of all the namespaces where the application is running by specifying the namespaces as a list. Take a backup of only the argocd namespace, create all the namespaces of different applications, and then restore from the backup.    The following example shows a sample Velero Backup API resource that you can create to initiate an Argo CD backup. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOFapiVersion:velero.io/v1kind:Backupmetadata:name:verrazzano-argocd-backupnamespace:verrazzano-backupspec:includedNamespaces:- argocddefaultVolumesToRestic:falsestorageLocation:verrazzano-backup-locationEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe preceding example backs up the Argo CD components:\n The defaultVolumesToRestic is set to false so that Velero ignores the associated PVCs. If the deployed applications refer to a database or persistent volumes, then you need to manually create a backup.   Argo CD backup status code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # To display the status of the backup, run the following command $ kubectl get backup.velero.io -n verrazzano-backup verrazzano-argocd-backup -o yaml # Sample output showing just the status portion of the backup status: completionTimestamp: ... expiration: ... formatVersion: 1.1.0 phase: Completed progress: itemsBackedUp: 232 totalItems: 232 startTimestamp: ... version: 1    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   Argo CD scheduled backups Velero supports a Schedule API that is a repeatable request that is sent to the Velero server to perform a backup for a given cron notation. After the Schedule object is created, the Velero server will start the backup process. Then, it will wait for the next valid point in the given cron expression and run the backup process on a repeating basis.\nArgo CD restore using Velero To initiate an Argo CD restore operation, first delete the existing Argo CD running on the system and all related data. Make sure that the data you are deleting is not needed. The restore operation will only restore data from the specified backup, and any additional data since that backup will be destroyed by the deletion.\nIf you restore Argo CD to a different cluster, create a Velero BackupStorageLocation resource in the new cluster that points to the same backup storage location configured in the original cluster. This ensures that the Velero resources created by the original cluster’s backup are automatically synced to the new cluster. Once the sync completes, you will be able to access the backup from the original cluster on the new cluster. It is recommended to configure the BackupStorageLocation on the new cluster as read-only by setting accessMode to ReadOnly in the BackupStorageLocation spec. This ensures that the backup in the object store is not modified from the new cluster. For more information, see Backup Storage Location in the Velero documentation.\n  Delete the Argo CD components and the namespace. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # These are sample commands to demonstrate the Argo CD restore process $ kubectl delete sts -l app.kubernetes.io/part-of=argocd -n argocd $ kubectl delete deploy -l app.kubernetes.io/part-of=argocd -n argocd $ kubectl delete pvc -n argocd \u003cpvc name\u003e $ kubectl delete ns argocd    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  To perform an Argo CD restore operation, you can invoke the following example Velero Restore API object. NOTE: For Argo CD, includedNamespaces should list all the namespaces across which the applications are deployed. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOFapiVersion:velero.io/v1kind:Restoremetadata:name:verrazzano-argocd-restorenamespace:verrazzano-backupspec:backupName:verrazzano-argocd-backupincludedNamespaces:- argocdEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe preceding example will restore an Argo CD cluster from an existing backup.\n  Wait for all the Argo CD pods to be in the RUNNING state. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl wait -n argocd --for=condition=ready pod -l app.kubernetes.io/instance=argocd Sample output:\n pod/argocd-application-controller-0 condition met pod/argocd-applicationset-controller-8489bfbb8-4f686 condition met pod/argocd-notifications-controller-c4f5c9684-8qzl8 condition met pod/argocd-redis-548968fdd9-4jcrf condition met pod/argocd-repo-server-5889c8cc68-5n8j6 condition met pod/argocd-server-67b6994987-j9z99 condition met    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n   Argo CD restore status code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # To display the status of the restore, run the following command $ kubectl get restore -n verrazzano-backup verrazzano-argocd-restore -o yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  # Sample output showing just the status portion of the restore status: completionTimestamp: ... phase: Completed progress: itemsRestored: 75 totalItems: 75 startTimestamp: ...  ","categories":"","description":"Back up and restore Argo CD","excerpt":"Back up and restore Argo CD","ref":"/docs/backup/argocd/","tags":"","title":"Argo CD"},{"body":"The Verrazzano command-line tool, vz, is available for Linux and Mac systems. Download the binary you want from the Releases page.\nNOTE  Installing the command-line tool, vz, is optional. For optimal functionality, install or upgrade the CLI version to match the desired Verrazzano version.   Install the vz CLI These instructions demonstrate installing the CLI on Linux AMD64 machines.\nDownload the latest release code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ curl -LO https://github.com/verrazzano/verrazzano/releases/download/master/verrazzano-1.6.0-linux-amd64.tar.gz     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Validate the binary (optional) Download the vz checksum file. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ curl -LO https://github.com/verrazzano/verrazzano/releases/download/master/verrazzano-1.6.0-linux-amd64.tar.gz.sha256     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nValidate the vz binary against the checksum file. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ sha256sum -c verrazzano-2.0.0-linux-amd64.tar.gz.sha256     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUnpack and copy the vz binary  $ tar xvf verrazzano-2.0.0-linux-amd64.tar.gz The following command needs to be run as root.\n $ sudo cp verrazzano-2.0.0/bin/vz /usr/local/bin Test to ensure that the version you installed is up-to-date code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ vz version     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The resulting output should be similar to the following. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  Version: master BuildDate: 2023-02-12T21:07:26Z GitCommit: cb0778bbf7a2cd90e1ae8458abd242f9da27a100     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUse the vz CLI Verrazzano provides a command-line tool for managing a Verrazzano environment using the Verrazzano and Kubernetes API.\nCommon use cases include installing, upgrading, and uninstalling Verrazzano, as well as analyzing failures in a running Verrazzano environment.\nUsage information Use the following syntax to run vz commands from your terminal window. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  vz [command] [flags]     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAvailable commands    Command Definition     analyze Analyze cluster   bug-report Collect information from the cluster to report an issue   completion Generate the autocompletion script for the specified shell   help Help about any command   install Install Verrazzano   status Status of the Verrazzano installation and access endpoints   uninstall Uninstall Verrazzano   upgrade Upgrade Verrazzano   version Verrazzano version information    Available Flags These flags apply to all the commands.\n   Flag Definition     --context string The name of the kubeconfig file context to use.   -h, --help Help for vz.   --kubeconfig string Path to the kubeconfig file to use.    ","categories":"","description":"Install the Verrazzano command-line tool (optional)","excerpt":"Install the Verrazzano command-line tool (optional)","ref":"/docs/setup/install/prepare/cli-setup/","tags":"","title":"CLI Setup"},{"body":"","categories":"","description":"Learn about configuring the monitoring components","excerpt":"Learn about configuring the monitoring components","ref":"/docs/observability/monitoring/configure/","tags":"","title":"Configure Monitoring Components"},{"body":"Verrazzano creates an OpenSearch cluster as the store and search engine for the logs processed by Fluentd. Records written by Fluentd can be queried using the OpenSearch REST API.\nFor example, you can use curl to get all of the OpenSearch data streams. First, you must get the password for the verrazzano user and the host for the Verrazzano Monitoring Instance (VMI) OpenSearch. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ PASS=$(kubectl get secret \\ --namespace verrazzano-system verrazzano \\ -o jsonpath={.data.password} | base64 \\ --decode; echo) $ HOST=$(kubectl get ingress \\ -n verrazzano-system vmi-system-os-ingest \\ -o jsonpath={.spec.rules[0].host}) $ curl -ik \\ --user verrazzano:$PASS https://$HOST/_data_stream    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nTo see all of the records for a specific data stream, do the following: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ DATA_STREAM=verrazzano-application-todo-list $ curl -ik \\ --user verrazzano:$PASS https://$HOST/$DATA_STREAM/_search?q=message:*    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nVerrazzano provides support for Installation Profiles. The production profile (prod), which is the default, provides a 3-node OpenSearch and persistent storage for the VMI. The development profile (dev) provides a single node OpenSearch and no persistent storage for the VMI. The managed-cluster profile does not install OpenSearch or OpenSearch Dashboards in the local cluster; all logs are forwarded to the admin cluster’s OpenSearch instance.\nIf you want the logs sent to an external OpenSearch, instead of the default VMI OpenSearch, specify opensearchURL and opensearchSecret in the FluentdComponent configuration in your Verrazzano custom resource.\nThe following is an example of a Verrazzano custom resource to send the logs to the OpenSearch endpoint https://external-os.default.172.18.0.231.nip.io. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: default spec: components: fluentd: opensearchURL: https://external-os.default.172.18.0.231.nip.io opensearchSecret: external-os-secret    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor information on OpenSearch, see the Customize OpenSearch.\nOpenSearch Dashboards OpenSearch Dashboards is a visualization dashboard for the content indexed on an OpenSearch cluster. Verrazzano creates a OpenSearch Dashboards deployment to provide a user interface for querying and visualizing the log data collected in OpenSearch.\nTo access the OpenSearch Dashboards, read Access Verrazzano.\nTo see the records of an OpenSearch index or data stream through OpenSearch Dashboards, create an index pattern to filter for records under the desired data stream or index.\nFor example, to see the log records of a WebLogic application deployed to the todo-list namespace, create an index pattern of verrazzano-application-todo-*.\n","categories":"","description":"Configure OpenSearch clusters and access OpenSearch dashboards","excerpt":"Configure OpenSearch clusters and access OpenSearch dashboards","ref":"/docs/observability/logging/configure-opensearch/","tags":"","title":"Configure OpenSearch Clusters"},{"body":"Verrazzano issues certificates to secure access from external clients to secure system endpoints.\nA certificate from a certificate authority (CA) must be configured to issue the endpoint certificates in one of the following ways:\n Let Verrazzano generate a self-signed CA (the default). Configure a CA that you provide. Configure LetsEncrypt as the certificate issuer (requires Oracle Cloud Infrastructure DNS).  In all cases, Verrazzano uses cert-manager to manage the creation of certificates.\nNOTE Self-signed certificate authorities generate certificates that are NOT signed by a trusted authority; typically, they are not used in production environments.  Use the Verrazzano self-signed CA By default, Verrazzano creates its own self-signed CA. No configuration is required.\nUse a custom CA If you want to provide your own CA, you must:\n  (Optional) Create your own signing key pair and CA certificate.\nFor example, you can use the openssl CLI to create a key pair for the nip.io domain. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # Generate a CA private key $ openssl genrsa -out tls.key 2048 # Create a self-signed certificate, valid for 10yrs with the 'signing' option set $ openssl req -x509 -new -nodes -key tls.key -subj \"/CN=*.nip.io\" -days 3650 -reqexts v3_req -extensions v3_ca -out tls.crt    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe output of these commands will be two files, tls.key and tls.crt, the key and certificate for your signing key pair. These files must be named in that manner for the next step.\nIf you already have generated your own key pair, you must name the private key and certificate, tls.key and tls.crt, respectively. If your issuer represents an intermediate, ensure that tls.crt contains the issuer’s full chain in the correct order.\nYou can find more details on providing your own CA, in the cert-manager CA documentation.\n  Save your signing key pair as a Kubernetes secret. The secret must be created in the namespace corresponding to the clusterResourceNamespace used by cert-manager (cert-manager by default).\nFor more information, see the cert-manager documentation. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create ns mynamespace $ kubectl create secret tls myca --namespace=mynamespace --cert=tls.crt --key=tls.key    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Specify the secret name and namespace location in the Verrazzano custom resource.\nThe custom CA secret must be provided to cert-manager using the following fields in spec.components.clusterIssuer.ca in the Verrazzano custom resource:\n spec.components.clusterIssuer.ca.secretName (If needed) spec.components.clusterIssuer.clusterResourceNamespace  For example, if you created a CA secret named myca in the namespace mynamespace, you would configure it as shown: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: custom-ca-example spec: profile: dev components: clusterIssuer: clusterResourceNamespace: mynamespace ca: secretName: myca    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIn this example, mynamespace will be configured as the clusterResourceNamespace for the Verrazzano cert-manager instance when it is installed.\n  Use LetsEncrypt certificates You can configure Verrazzano to use certificates generated by LetsEncrypt. LetsEncrypt implements the ACME protocol, which provides a standard protocol for the automated issuance of certificates signed by a trusted authority. This is managed through the spec.components.clusterIssuer.letsEncrypt field in the Verrazzano custom resource.\nNOTE Using LetsEncrypt for certificates also requires using Oracle Cloud Infrastructure DNS for DNS management. For details, see the Customize DNS page.  To configure cert-manager to use LetsEncrypt as the certificates provider, you must configure the Verrazzano Let’s Encrypt issuer with the following values in the Verrazzano custom resource:\n Set the spec.components.clusterIssuer.letsEncrypt.emailAddress field to a valid email address for the letsEncrypt account. (Optional) Set the spec.components.clusterIssuer.letsEncrypt.environment field to either staging or production (the default).  The following example configures Verrazzano to use the LetsEncrypt production environment by default, with Oracle Cloud Infrastructure DNS for DNS record management. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: letsencrypt-certs-example spec: profile: dev components: clusterIssuer: letsEncrypt: emailAddress: jane.doe@mycompany.com dns: oci: ociConfigSecret: oci dnsZoneCompartmentOCID: ocid1.compartment.oc1..... dnsZoneOCID: ocid1.dns-zone.oc1..... dnsZoneName: example.com    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe following example configures Verrazzano to use the LetsEncrypt staging environment with Oracle Cloud Infrastructure DNS. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: letsencrypt-certs-example spec: profile: dev components: clusterIssuer: letsEncrypt: emailAddress: jane.doe@mycompany.com environment: staging dns: oci: ociConfigSecret: oci dnsZoneCompartmentOCID: ocid1.compartment.oc1..... dnsZoneOCID: ocid1.dns-zone.oc1..... dnsZoneName: example.com    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE Certificates issued by the LetsEncrypt staging environment are signed by untrusted authorities, similar to self-signed certificates. They are typically not used in production environments.  LetsEncrypt staging versus production LetsEncrypt provides rate limits on generated certificates to ensure fair usage across all clients. The production environment limits can be exceeded more frequently in environments where Verrazzano may be installed or reinstalled frequently (like a test environment). This can result in failed installations due to rate limit exceptions on certificate generation.\nIn such environments, it is better to use the LetsEncrypt staging environment, which has much higher limits than the production environment. For test environments, the self-signed CA also may be more appropriate to completely avoid LetsEncrypt rate limits.\nUse your own cert-manager You can either use the Verrazzano-provided cert-manager or use your own. To use your own cert-manager, disable the certManager component in the Verrazzano CR as shown:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: custom-cm-example spec: profile: dev components: certManager: enabled: false    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The Verrazzano certificates issuer is configured using the spec.components.clusterIssuer component. The Verrazzano default clusterIssuer assumes that cert-manager is installed in the cert-manager namespace, and that the clusterResourceNamespace for cert-manager is cert-manager.\nIf your cert-manager is installed into a different namespace or uses a separate namespace for the clusterResourceNamespace, you can configure this on the Verrazzano clusterIssuer component.\nIn the following example, the clusterIssuer is configured to use the namespace my-cm-resources as the clusterResourceNamespace:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: custom-cmres-example spec: profile: dev components: certManager: enabled: false clusterIssuer: clusterResourceNamespace: my-cm-resources    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Use Let’s Encrypt with OCI DNS with your own cert-manager Verrazzano uses a webhook component to support Let’s Encrypt certificates with OCI DNS. This webhook implements the cert-manager solver webhook pattern to support solving DNS01 challenges for OCI DNS.\nIn most circumstances, you will not need to configure this because it will automatically deploy when OCI DNS and Let’s Encrypt certificates are in use. However, if you are using your own cert-manager installed in a namespace other than cert-manager and/or the clusterResourceNamespace is something other than cert-manager, you will need to configure this for the webhook.\nThe following example configures the webhook to use the namespace my-cm for the cert-manager installation namespace and my-cm-resources for the clusterResourceNamespace:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: custom-cm-letsencrypt-example spec: profile: dev components: certManager: enabled: false clusterIssuer: clusterResourceNamespace: my-cm-resources letsEncrypt: emailAddress: jane.doe@mycompany.com environment: staging dns: oci: ociConfigSecret: oci dnsZoneCompartmentOCID: ocid1.compartment.oc1..... dnsZoneOCID: ocid1.dns-zone.oc1..... dnsZoneName: example.com certManagerWebhookOCI: overrides: - values: certManager: namespace: my-cm clusterResourceNamespace: my-cm-resources    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"Customize SSL certificate generation for Verrazzano system endpoints","excerpt":"Customize SSL certificate generation for Verrazzano system endpoints","ref":"/docs/networking/security/certificates/","tags":"","title":"Customize Certificates"},{"body":"Verrazzano supports three DNS choices for Verrazzano services and applications:\n Free wildcard DNS services (nip.io and sslip.io) Oracle Cloud Infrastructure DNS managed by Verrazzano Custom (user-managed) DNS  How Verrazzano constructs a DNS domain Regardless of which DNS management you use, the value in the spec.environmentName field in your installation will be prepended to the configured domain in the spec.components.dns section of the custom resource, to form the full DNS domain name used to access Verrazzano endpoints.\nFor example, if spec.environmentName is set to sales and the domain is configured in spec.components.dns as us.example.com, Verrazzano will create sales.us.example.com as the DNS domain for the installation.\nWildcard DNS Services Verrazzano can be configured to use either the nip.io or sslip.io free wildcard DNS services. When queried with a host name with an embedded IP address, wildcard DNS services return that IP address.\nFor example, using the nip.io service, the following DNS names all map to the IP address 10.0.0.1: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  10.0.0.1.nip.io app.10.0.0.1.nip.io customer1.app.10.0.0.1.nip.io    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nTo configure Verrazzano to use one of these services, set the spec.wildcard.domain field in the Verrazzano custom resource to either nip.io or sslip.io; the default is nip.io.\nFor example, the following configuration uses sslip.io, instead of nip.io, for wildcard DNS with a dev installation profile. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev components: dns: wildcard: domain: sslip.io    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nOracle Cloud Infrastructure DNS Verrazzano can directly manage records in Oracle Oracle Cloud Infrastructure DNS when configured to use the spec.components.dns.oci field. This is achieved through the External DNS Service, which is a component that is conditionally installed when Oracle Cloud Infrastructure DNS is configured for DNS management in Verrazzano.\nPrerequisites The following prerequisites must be met before using Oracle Cloud Infrastructure DNS with Verrazzano:\n  You must have control of a DNS domain.\n  You must have an Oracle Cloud Infrastructure DNS Service Zone that is configured to manage records for that domain. Verrazzano also supports the use of both GLOBAL and PRIVATE Oracle Cloud Infrastructure DNS zones.\nA DNS Service Zone is a distinct portion of a domain namespace. You must ensure that the zone is appropriately associated with a parent domain. For example, an appropriate zone name for parent domain example.com is us.example.com.\nTo create an Oracle Cloud Infrastructure DNS zone using the Oracle Cloud Infrastructure CLI: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ oci dns zone create \\ -c \u003ccompartment ocid\u003e \\ --name \u003czone-name-prefix\u003e.example.com \\ --zone-type PRIMARY     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  To create an Oracle Cloud Infrastructure DNS zone using the Oracle Cloud Infrastructure Console, see Managing DNS Service Zones.\n  You must have a valid Oracle Cloud Infrastructure API signing key that can be used to communicate with Oracle Cloud Infrastructure DNS in your tenancy.\nFor example, you can create an API signing key using the Oracle Cloud Infrastructure CLI. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ oci setup keys --key-name myapikey Enter a passphrase for your private key (empty for no passphrase): Public key written to: /Users/jdoe/.oci/myapikey_public.pem Private key written to: /Users/jdoe/.oci/myapikey.pem Public key fingerprint: 39:08:44:69:9f:f5:73:86:7a:46:d8:ad:34:4f:95:29     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If you haven’t already uploaded your API signing public key through the console, follow the instructions in this section, How to upload the public key.\nAfter the key pair has been created, you must upload the public key to your account in your Oracle Cloud Infrastructure tenancy. For details, see the Oracle Cloud Infrastructure documentation, Required Keys and OCIDs.\n  Create an Oracle Cloud Infrastructure API secret in the target cluster To communicate with Oracle Cloud Infrastructure DNS to manage DNS records, Verrazzano needs to be made aware of the necessary API credentials.\nA generic Kubernetes secret must be created in the cluster’s verrazzano-install namespace with the required credentials. That secret must then be referenced by the custom resource that is used to install Verrazzano.\nAfter you have an Oracle Cloud Infrastructure API key ready for use, create a YAML file, oci.yaml, with the API credentials in the form: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  auth: region: \u003coci-region\u003e tenancy: \u003coci-tenancy-ocid\u003e user: \u003coci-user-ocid\u003e key: | \u003coci-api-private-key-file-contents\u003e fingerprint: \u003coci-api-private-key-fingerprint\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThis information typically can be found in your Oracle Cloud Infrastructure CLI config file or in the Oracle Cloud Infrastructure Console. The \u003coci-api-private-key-file-contents\u003e contents are the PEM-encoded contents of the key_file value within the Oracle Cloud Infrastructure CLI configuration profile.\nFor example, your oci.yaml file will look similar to the following: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  auth: region: us-ashburn-1 tenancy: ocid1.tenancy.oc1..... user: ocid1.user.oc1..... key: | -----BEGIN RSA PRIVATE KEY----- ... -----END RSA PRIVATE KEY----- fingerprint: 12:d3:4c:gh:fd:9e:27:g8:b9:0d:9f:00:22:33:c3:gg    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nVerrazzano also supports the use of instance principals to communicate with Oracle Cloud Infrastructure in order to create or update Oracle Cloud Infrastructure DNS records. Instance principals require some prerequisites that can be found here.\nWhen using instance principals, your oci.yaml file will look as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  auth: authtype: instance_principal    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThen, you can create a generic Kubernetes secret in the cluster’s verrazzano-install namespace using kubectl. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create secret generic -n verrazzano-install \u003csecret-name\u003e --from-file=\u003cpath-to-oci-yaml-file\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor example, to create a secret named oci from a file oci.yaml, do the following: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create secret generic -n verrazzano-install oci --from-file=oci.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThis secret will later be referenced from the Verrazzano custom resource used during installation.\nUse a Verrazzano helper script to create an Oracle Cloud Infrastructure secret Verrazzano also provides a helper script to create the necessary Kubernetes secret based on your Oracle Cloud Infrastructure CLI configuration file, assuming that you have the Oracle Cloud Infrastructure CLI installed and a valid Oracle Cloud Infrastructure CLI profile with the required API key information. The script create_oci_config_secret.sh reads your Oracle Cloud Infrastructure CLI configuration file to create the secret.\nFirst, download the create_oci_config_secret.sh script. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl \\ -o ./create_oci_config_secret.sh \\ https://raw.githubusercontent.com/verrazzano/verrazzano/master/platform-operator/scripts/install/create_oci_config_secret.sh    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNext, set your KUBECONFIG environment variable to point to your cluster and run create_oci_config_secret.sh -h to display the script options. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ chmod +x create_oci_config_secret.sh $ export KUBECONFIG=\u003ckubeconfig-file\u003e $ ./create_oci_config_secret.sh -h usage: ./create_oci_config_secret.sh [-o oci_config_file] [-s config_file_section] -o oci_config_file The full path to the Oracle Cloud Infrastructure configuration file (default ~/.oci/config) -s config_file_section The properties section within the Oracle Cloud Infrastructure configuration file. Default is DEFAULT -k secret_name The secret name containing the Oracle Cloud Infrastructure configuration. Default is oci -c context_name The kubectl context to use -a auth_type The auth_type to be used to access Oracle Cloud Infrastructure. Valid values are user_principal/instance_principal. Default is user_principal. -h Help    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor example, to have the script create the YAML file using your [DEFAULT] Oracle Cloud Infrastructure CLI profile and then create a Kubernetes secret named oci, you can run the script with no arguments, as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ./create_oci_config_secret.sh secret/oci created    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe following example creates a secret myoci using an Oracle Cloud Infrastructure CLI profile named [dev]. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ./create_oci_config_secret.sh -s dev -k myoci secret/myoci created    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nWhen using instance principals, all other parameters will be ignored automatically. The following example creates a secret myoci using Oracle Cloud Infrastructure instance principal. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ./create_oci_config_secret.sh -a instance_principal secret/myoci created    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nInstallation After the Oracle Cloud Infrastructure API secret is created, create a Verrazzano custom resource for the installation that is configured to use Oracle Cloud Infrastructure DNS and reference the secret you created.\nAs a starting point, download the sample Verrazzano custom resource install-oci.yaml file for Oracle Cloud Infrastructure DNS. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl \\ -o ./install-oci.yaml \\ https://raw.githubusercontent.com/verrazzano/verrazzano/master/platform-operator/config/samples/install-oci.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nEdit the install-oci.yaml file to provide values for the following configuration settings in the custom resource spec:\n spec.environmentName spec.components.dns.oci.ociConfigSecret spec.components.dns.oci.dnsZoneCompartmentOCID spec.components.dns.oci.dnsZoneOCID spec.components.dns.oci.dnsZoneName spec.components.dns.oci.dnsScope  The field spec.components.dns.oci.ociConfigSecret should reference the secret created earlier. For details on the Oracle Cloud Infrastructure DNS configuration settings, see spec.components.dns.oci.\nFor example, a custom resource for a prod installation profile using Oracle Cloud Infrastructure DNS might look as follows, yielding a domain of myenv.example.com (Oracle Cloud Infrastructure identifiers redacted): code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: prod environmentName: myenv components: dns: oci: ociConfigSecret: oci dnsZoneCompartmentOCID: ocid1.compartment.oc1..compartment-ocid dnsZoneOCID: ocid1.dns-zone.oc1..zone-ocid dnsZoneName: example.com    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf using a private DNS zone, then the same prod installation profile using Oracle Cloud Infrastructure DNS will look as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: my-verrazzano spec: profile: prod environmentName: myenv components: dns: oci: ociConfigSecret: oci dnsZoneCompartmentOCID: ocid1.compartment.oc1..compartment-ocid dnsZoneOCID: ocid1.dns-zone.oc1..zone-ocid dnsZoneName: example.com dnsScope: PRIVATE    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAfter the custom resource is ready, apply it using kubectl apply -f \u003cpath-to-custom-resource-file\u003e.\nCustom DNS You can specify your own externally managed, custom DNS domain. In this scenario, you manage your own DNS domain and all DNS records in that domain.\nAn externally managed DNS domain is specified in the spec.components.dns.external.suffix field of the Verrazzano custom resource.\nWhen using an externally managed DNS domain, you are responsible for:\n Configuring A records for Verrazzano ingress points (load balancers) Configuring CNAME records for host names in the domain that point to the A records, as needed  The Verrazzano installer searches the DNS zone you provide for two specific A records.\nThese are used to configure the cluster and should refer to external addresses of the load balancers provisioned by the user.\nThe A records need to be created manually.\n   Record Use     ingress-mgmt Set as the .spec.externalIPs value of the ingress-controller-nginx-ingress-controller service.   ingress-verrazzano Set as the .spec.externalIPs value of the istio-ingressgateway service.    For example, if spec.environmentName is set to myenv, and spec.components.dns.external.suffix is set to example.com, the A records would need to be set up as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  198.51.100.10 A ingress-mgmt.myenv.example.com. 203.0.113.10 A ingress-verrazzano.myenv.example.com.    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThis example assumes that load balancers exist for ingress-mgmt on 198.51.100.10 and for ingress-verrazzano on 203.0.113.10.\nFor a more complete example, see the documentation for setting up Verrazzano on the Oracle Cloud Native Environment Platform.\n","categories":"","description":"Customize DNS configurations for Verrazzano system and application endpoints","excerpt":"Customize DNS configurations for Verrazzano system and application endpoints","ref":"/docs/networking/traffic/dns/","tags":"","title":"Customize DNS"},{"body":"During installation, Verrazzano generates several default accounts.\n   System Account Secret Secret Namespace Description     Keycloak keycloakadmin keycloak-http keycloak Keycloak root user: full administrative privileges for Keycloak.   Keycloak verrazzano verrazzano verrazzano-system Verrazzano root user: can manage the verrazzano-system realm in Keycloak, including managing users in that realm. This user is a member of the verrazzano-admins group, and, if default role bindings are used, has the verrazzano-admin role.   Rancher admin rancher-admin-secret cattle-system Rancher root user: full administrative privileges for Rancher.    ","categories":"","description":"Learn about default user accounts","excerpt":"Learn about default user accounts","ref":"/docs/security/accounts/accounts/","tags":"","title":"Default User Accounts"},{"body":"Developing and deploying applications in Verrazzano consists of:\n Packaging the application as a Docker image. Publishing the application’s Docker image to a container registry. Applying the application’s Verrazzano components to the cluster. Applying the application’s Verrazzano applications to the cluster.  This section does not provide the full details for the first two steps. An existing example application Docker image has been packaged and published for use.\nVerrazzano supports application definition using the Open Application Model (OAM). Verrazzano applications are composed of components and application configurations. This section demonstrates creating OAM resources that define an application as well as the steps required to deploy those resources.\n","categories":"","description":"","excerpt":"Developing and deploying applications in Verrazzano consists of:\n Packaging the application as a Docker image. Publishing the application’s Docker image to a container registry. Applying the …","ref":"/docs/applications/oam/","tags":"","title":"Deploy Applications With the Open Application Model"},{"body":"You may want to add additional sidecars to Verrazzano workloads; you can use any image or sidecar container. This guide will serve as an introduction by showing you how to create a custom Fluentd sidecar for application logs.\nVerrazzano creates and manages a Fluentd sidecar injection for each WebLogic pod. This allows application logs to interact with the cluster-wide Fluentd DaemonSet. However, these resources are not currently configurable and additional containers are required to customize the Fluentd configuration file and the container image. For more information on Fluentd sidecars and DaemonSet, see Configure Fluentd for Log Collection.\nThe following instructions use the ToDo List example application to demonstrate how to attach and deploy a custom Fluentd sidecar to a VerrazzanoWebLogicWorkload component. Before deploying the application, you will need to edit the application and component YAML files. Run the following commands to create a local copy of them:\n$ curl https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/todo-list/todo-list-components.yaml --output todo-list-components.yaml $ curl https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/todo-list/todo-list-application.yaml --output todo-list-application.yaml The todo-list-components.yaml file contains the VerrazzanoWebLogicWorkload, which is where you will modify the deployment.\nCreate a Fluentd custom sidecar configuration file Before deploying the VerrazzanoWebLogicWorkload component, create a ConfigMap that contains the Fluentd config file. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:v1kind:ConfigMapmetadata:name:fluentdconfnamespace:todo-listdata:fluent.conf:|... \u003cmatch **\u003e @type stdout \u003c/match\u003e   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  To interact with the Fluentd DaemonSet that Verrazzano manages, the configuration must redirect logs to stdout, as shown in the match block at the end of the Fluentd configuration file. This ConfigMap must be deployed before or with all other application resources.\nCreate Fluentd custom sidecar volumes Now that the Fluentd configuration ConfigMap is deployed, create volumes to grant Fluentd access to the application logs and the Fluentd configuration file. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:Componentmetadata:name:todo-domainnamespace:todo-listspec:workload:apiVersion:oam.verrazzano.io/v1alpha1kind:VerrazzanoWebLogicWorkloadspec:template:metadata:name:todo-domainnamespace:todo-listspec:domainUID:tododomaindomainHome:/u01/domains/tododomainimage:container-registry.oracle.com/verrazzano/example-todo:0.1.12-1-20210624160519-017d358imagePullSecrets:- name:tododomain-repo-credentialsdomainHomeSourceType:\"FromModel\"includeServerOutInPodLog:truereplicas:1webLogicCredentialsSecret:name:tododomain-weblogic-credentialsconfiguration:introspectorJobActiveDeadlineSeconds:900model:configMap:tododomain-jdbc-configdomainType:WLSmodelHome:/u01/wdt/modelsruntimeEncryptionSecret:tododomain-runtime-encrypt-secretsecrets:- tododomain-jdbc-tododbserverPod:# ---- BEGIN: Add volumes for Fluentd container ----volumes:- emptyDir:{}name:shared-log-files- name:fdconfigconfigMap:name:fluentdconf# ---- END: Add volumes for Fluentd container ----env:- name:JAVA_OPTIONSvalue:\"-Dweblogic.StdoutDebugEnabled=false\"- name:USER_MEM_ARGSvalue:\"-Djava.security.egd=file:/dev/./urandom -Xms64m -Xmx256m \"- name:WL_HOMEvalue:/u01/oracle/wlserver- name:MW_HOMEvalue:/u01/oracle   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The example volume shared-log-files is used to enable the Fluentd container to view logs from application containers. This example uses an emptyDir volume type for ease of access, but you can use other volume types.\nThe fdconfig example volume mounts the previously deployed ConfigMap containing the Fluentd configuration. This allows the attached Fluentd sidecar to access the embedded Fluentd configuration file.\nCreate the Fluentd custom sidecar container The final resource addition to the VerrazzanoWebLogicWorkload is to create the custom sidecar container. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:Componentmetadata:name:todo-domainnamespace:todo-listspec:workload:apiVersion:oam.verrazzano.io/v1alpha1kind:VerrazzanoWebLogicWorkloadspec:template:metadata:name:todo-domainnamespace:todo-listspec:domainUID:tododomaindomainHome:/u01/domains/tododomainimage:container-registry.oracle.com/verrazzano/example-todo:0.1.12-1-20210624160519-017d358imagePullSecrets:- name:tododomain-repo-credentialsdomainHomeSourceType:\"FromModel\"includeServerOutInPodLog:truereplicas:1webLogicCredentialsSecret:name:tododomain-weblogic-credentialsconfiguration:introspectorJobActiveDeadlineSeconds:900model:configMap:tododomain-jdbc-configdomainType:WLSmodelHome:/u01/wdt/modelsruntimeEncryptionSecret:tododomain-runtime-encrypt-secretsecrets:- tododomain-jdbc-tododbserverPod:# ---- BEGIN: Add Fluentd container with volumeMounts ----containers:- image:ghcr.io/verrazzano/fluentd-kubernetes-daemonset:v1.12.3-20210517195222-f345ec2name:fluentdenv:- name:FLUENT_UIDvalue:root- name:FLUENT_CONFvalue:fluent.conf- name:FLUENTD_ARGSvalue:-c /fluentd/etc/fluent.confvolumeMounts:- mountPath:/scratchname:shared-log-filesreadOnly:true- name:fdconfigmountPath:/fluentd/etc/# ---- END: Add Fluentd container with volumeMounts ----volumes:- emptyDir:{}name:shared-log-files- name:fdconfigconfigMap:name:fluentdconfenv:- name:JAVA_OPTIONSvalue:\"-Dweblogic.StdoutDebugEnabled=false\"- name:USER_MEM_ARGSvalue:\"-Djava.security.egd=file:/dev/./urandom -Xms64m -Xmx256m \"- name:WL_HOMEvalue:/u01/oracle/wlserver- name:MW_HOMEvalue:/u01/oracle   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThis example container uses the Verrazzano Fluentd image, but you can use any image with additional Fluentd plug-ins in its place.\nMounted are both volumes created to enable the Fluentd sidecar to monitor and parse logs. VerrazzanoWebLogicWorkloads mount a volume in the /scratch directory containing log files. Thus, any sidecar containers are limited to log access under that directory. As shown previously, the shared-log-file volume is mounted at /scratch for this reason.\nThe example Fluentd configuration volume is mounted at /fluentd/etc/. While this path is more flexible, the FLUEND_ARGS environment variable needs to be updated accordingly.\nDeploy the Fluentd sidecar Now that the resources have been configured, you can deploy the application. Follow Steps 1 through 3 in the ToDo List example application instructions. Replace the deployment commands in Step 4 with your locally edited YAML files: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f todo-list-components.yaml $ kubectl apply -f todo-list-application.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNow, follow the ToDo List instructions from Step 5 onward, as needed.\nTo verify that a deployment successfully created a custom Fluentd sidecar:\n  Verify that the container name exists on the WebLogic application pod. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n \u003capplication-namespace\u003e \u003capplication-pod-name\u003e -o jsonpath=\"{.spec.containers[*].name}\" | tr -s '[[:space:]]' '\\n' ... fluentd ...    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Verify that the Fluentd sidecar is redirecting logs to stdout. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs -n \u003capplication-namespace\u003e \u003capplication-pod-name\u003e fluentd    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Follow the instructions at Verrazzano Logging to ensure that the Fluentd DaemonSet collected the logs from stdout. These logs will appear in the Verrazzano-managed OpenSearch and OpenSearch Dashboards.\n  ","categories":"","description":"A guide for deploying custom sidecars to Verrazzano workload components","excerpt":"A guide for deploying custom sidecars to Verrazzano workload components","ref":"/docs/guides/sidecar/","tags":"","title":"Deploy a Kubernetes Sidecar with Verrazzano"},{"body":"","categories":"","description":"Use Verrazzano analysis tooling","excerpt":"Use Verrazzano analysis tooling","ref":"/docs/troubleshooting/diagnostictools/","tags":"","title":"Diagnostic Tools"},{"body":"The Verrazzano Enterprise Container Platform delivers a unified platform for standardizing application and cluster management across various hosting environments. It’s built from many familiar open source projects, each working in concert on Kubernetes clusters to provide vital container management services.\nGetting started with Verrazzano is easy - the basic installation process is simple yet flexible enough to evolve with your requirements.\nUnified hosting environment for all application types The flexibility of Verrazzano ensures that you can deploy both cloud native and traditional applications in on-premises and multicloud environments and manage them all using the same components. Using a consistent set of tools and processes reduces overhead related to training and maintenance, leaving more development resources available to address your business needs.\nVerrazzano can even accelerate your approach to modernizing your traditional applications. While cloud native technologies offer many advantages, the labor requirements necessary to convert your existing applications can be intimidating. Verrazzano presents a bridge between the two: developers can immediately start building new applications cloud natively, while simultaneously maintaining and converting their existing traditional applications on a timeline that makes sense, all within the same platform.\nComplete application life cycle management Starting with deployment, Verrazzano supports an application through all phases of its life cycle. It extensively automates the deployment process so you can reproduce successful application deployments reliably, even in multicloud environments.\nVerrazzano understands that application management is a continuous and dynamic process where deployment is just the beginning. As an application moves through its life cycle, its management system must be able to adapt to its developing needs. Day 2 operations are given equal consideration so that post-deployment, you can continue to optimize your applications and their clusters over the course of their lifetime.\nWith management occurring within a single platform, Verrazzano makes it easy to follow the principles of DevOps and GitOps. Coordination between diverse types of users becomes effortless, encouraging quick resolutions and creative innovations.\nFor a list of the software that make up Verrazzano and what they do, see Installed Software.\nDependable infrastructure management Verrazzano also recognizes that the direct management of applications is only part of what makes up a useful container management platform: to consistently provide a stable and reliable service, you need to start with a healthy foundation. The infrastructure supporting your applications must be equally well supported.\nVerrazzano tracks and receives valuable and timely information on the state of your clusters to ensure they’re operating optimally.\nVerrazzano also supports both single and multicluster Kubernertes environments.\nFor more information on how Verrazzano works in a multicluster environment, see Multicluster.\nComprehensive observability Verrazzano includes a variety of logging, monitoring, and tracing components so you can make intelligent decisions based on the comprehensive data generated by your application and its environment. Many of the components in this observability stack offer significant automated functionality which means Verrazzano alerts you to problems before you know to look for them.\nFor more information on the available observability options, see Observability.\nIntegrated security Verrazzano protects your applications and other resources with a robust set of security-focused components. It takes advantage of Kubernetes Role-Based Access Control to authorize only the right users to the right resources. Verrazzano also incorporates an identity solution that’s easily integrated with OAuth and LDAP systems so you can streamline user management and implement Single Sign On services, protecting Verrazzano components and your applications.\nFurthermore, a single and cohesive platform can reduce potential security gaps that often arise when working across unrelated software components. Verrazzano seals potential breaches between its individual components to minimize any compatibility issues and ensure each component remains on a supported and secure version.\nFor more information on how Verrazzano protects your applications, see Security.\n","categories":"","description":"","excerpt":"The Verrazzano Enterprise Container Platform delivers a unified platform for standardizing application and cluster management across various hosting environments. It’s built from many familiar open …","ref":"/docs/introduction/features/","tags":"","title":"Verrazzano Features"},{"body":"Beginning in v1.6.0, Fluent Operator is included in the logging stack and when enabled, the Fluent Operator configures and manages Fluent Bit, a logging agent that runs as a DaemonSet.\nFluent Bit Fluent Bit is a logging agent that collects, processes, and sends logs from Kubernetes clusters to log stores.\nUsing Fluent Operator, Verrazzano deploys the Fluent Bit DaemonSet, which runs one Fluent Bit replica per node in the verrazzano-system namespace. Each instance reads logs from the node’s /var/log/containers directory and writes them to a target OpenSearch data store.\nIn Fluent Bit, the four fundamental types of configurations are:\n Input: to collect data from a source. Filter: to process data that was collected. Output: to send collected and processed logs to a data store. Parser: to parse data in a specific format. Inputs and Filters make use of parser configurations.  Fluent Operator Verrazzano includes Fluent Operator as an optional component. When enabled, the operator is installed in the cluster in the verrazzano-system namespace and creates the Fluent Bit DaemonSet in the same namespace, using the required custom resources. For a list of custom resources that the operator supports to configure Fluent Bit, see Fluent Bit resources. All the CRDs with the prefix Cluster are cluster-wide configurations that you can use to configure all the cluster logs.\nLike cluster-wide resources, the operator comes with namespaced resources, which when created will process logs from the namespace in which these resources exist. The namespaced and cluster-wide configurations will run in conjunction and complement each other. Creating a namespaced resource doesn’t override an existing cluster-wide resource.\nEnable logging with Fluent Operator The Verrazzano resource defines two components to configure logging using Fluent Operator:\n fluentOperator: When enabled, installs Fluent Operator and configures a Fluent Bit instance running as a DaemonSet in the cluster. The fluentOperator component creates ClusterInput custom resources of type tail and systemd, and a set of ClusterFilters to enrich the collected logs with Kubernetes metadata. fluentbitOpensearchOutput: When enabled, creates two ClusterOutput resources to send logs from the cluster to OpenSearch. The two ClusterOutput resources are:  opensearch-system-clusteroutput: A central output sink to send logs coming from namespaces where the Verrazzano components reside to the verrazzano-system data stream in OpenSearch. opensearch-application-clusteroutput: Sends logs coming from namespaces that are not system to the verrazzano-application-\u003cnamespace_name\u003e data stream.    By default, these two components are disabled and must be enabled in the Verrazzano custom resource. The following is an example of a Verrazzano resource manifest file with the two components enabled.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev components: fluentOperator: enabled: true fluentbitOpensearchOutput: enabled: true    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If Verrazzano is installed and running, then to enable these two components, see Modify Verrazzano Installations.\nNOTE: To collect, process, and send logs to OpenSearch, both components must be enabled.\nTo get the system and application ClusterOutput resources, run the following command:\n$ kubectl get cfbo You will see an opensearch-system-clusteroutput and an opensearch-application-clusteroutput.\nUninstall Fluentd Fluentd is the default logging agent, which runs as a DaemonSet that collects, processes, and sends logs to log stores. When Verrazzano is installed, Fluentd is installed by default. With the inclusion of Fluent Bit via the Fluent Operator, you now have the option to run either of these components. These two, Fluentd and Fluent Bit, can co-exist, but if your log store is Verrazzano OpenSearch, then you should uninstall Fluentd because both components will send the same logs to Verrazzano OpenSearch resulting in duplicate logs.\nNOTE: Fluent Bit does not support sending logs to OCI-Logging. If your log store is OCI-Logging, then continue using Fluentd.\nTo uninstall Fluentd, use the following Verrazzano resource manifest file. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev components: fluentOperator: enabled: true fluentbitOpensearchOutput: enabled: true fluentd: enabled: false    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nConfigure custom cluster-wide resources If you prefer to create a cluster-wide resource, like a ClusterFilter, to filter all the logs from the cluster in a specific manner, or a ClusterOutput, such that most of the logs get stored in a custom log store, then add the following label under metadata.labels of the custom resource manifest file.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  fluentbit.fluent.io/enabled: \"true\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The following is an example of ClusterOutput that sends logs from a cluster to an OpenSearch index.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOF apiVersion: fluentbit.fluent.io/v1alpha2 kind: ClusterOutput metadata: labels: fluentbit.fluent.io/enabled: \"true\" name: example-clusteroutput spec: match: * opensearch: host: \u003chost-url\u003e httpPassword: valueFrom: secretKeyRef: key: \u003cpassword-key\u003e name: \u003cyour-secret-name\u003e httpUser: valueFrom: secretKeyRef: key: \u003cusername-key\u003e name: \u003cyour-secret-name\u003e index: \u003cindex-name\u003e port: \u003cport-number\u003e suppressTypeName: true EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   Replace \u003chost-url\u003e, \u003cport-number\u003e, and \u003cindex-name\u003e with the appropriate values. Replace \u003cyour-secret-name\u003e, \u003cpassword-key\u003e, and \u003cusername-key\u003e with the appropriate values.  For any ClusterOutput, create the secret containing the user credentials in the verrazzano-system namespace.\nConfigure custom namespaced resources To process logs for an application namespace, you must configure namespaced resources.\nFluentBitConfig The Fluent Operator supports configurability at the namespace level that lets you create Fluent Bit configurations for logs from your application namespace.\nThe FluentBitConfig custom resource is a namespaced resource, which is used by the Fluent Operator to select resources, like Filters, Outputs, and Parsers using label selectors. These resources will be checked in the same namespace as FluentBitConfig. Using label selectors, FluentBitConfig can also select ClusterParser resources.\nIf you use the namespace level configurability feature of the operator, then you must create a minimum of one FluentBitConfig resource in your namespace. The FluentBitConfig resource should contain the following label under metadata.labels.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  fluentbit.verrazzano.io/namespace-config: \"verrazzano\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The following is an example of a FluentBitConfig resource to select all Filters, Outputs, and Parsers with the label, label: \"foo\".\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOF apiVersion: fluentbit.fluent.io/v1alpha2 kind: FluentBitConfig metadata: labels: fluentbit.verrazzano.io/namespace-config: \"verrazzano\" name: example-fluentbitconfig namespace: \u003capplication-namespace\u003e spec: filterSelector: matchLabels: foo: \"bar\" parserSelector: matchLabels: foo: \"bar\" outputSelector: matchLabels: foo: \"bar\" EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  You can set the labels under spec.filterSelector, spec.parserSelector, and spec.outputSelector to any valid label; you just need to create the corresponding Filter, Output and Parser custom resources with that label.\nCustom filtering and parsing The following is an example of a Filter and a Parser to parse logs from the myapp application, running in the my-app namespace, and a FluentBitConfig resource to locate these Filter and Parser resources in the same namespace, where logs emitted have the following format:\n2023-05-29T09:53:35.959135345Z stdout F 2023-05-29 09:53:35 +0000 [warn]: #0 got incomplete line before first line from /logs/myapp-0.log: \"(thread=DefaultHttpServerThread-1, member=3, up=342.673): Health: checking safe\\n\" code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOF ----- apiVersion: fluentbit.fluent.io/v1alpha2 kind: FluentBitConfig metadata: labels: fluentbit.verrazzano.io/namespace-config: \"verrazzano\" name: myapp-fluentbitconfig namespace: my-app spec: filterSelector: matchLabels: app: \"myapp\" parserSelector: matchLabels: app: \"myapp\" --- apiVersion: fluentbit.fluent.io/v1alpha2 kind: Filter metadata: labels: app: \"myapp\" name: myapp-filter namespace: my-app spec: filters: - parser: keyName: log reserveData: true parser: myapp-parser match: kube.* --- apiVersion: fluentbit.fluent.io/v1alpha2 kind: Parser metadata: labels: app: \"myapp\" name: myapp-parser namespace: my-app spec: regex: regex: '/^(?\u003clogtime\u003e\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{9}Z) (?\u003clevel\u003e[^\\s]+)[^:]+: (?\u003cmessage\u003e.*)$/' timeFormat: '%Y-%m-%dT%H:%M:%S.%LZ' timeKey: logtime EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  This configuration consists of three resources: FluentBitConfig, Filter, and Parser.\nFluentBitConfig:\n Name: myapp-fluentbitconfig Namespace: my-app For accurate filtering and parsing, it uses a filterSelector and parserSelector to match labels with the value myapp.  Filter:\n Name: myapp-filter Namespace: my-app This Filter is associated with the myapp application. It applies a Parser, called myapp-parser, to the logs and the Filter is configured to match logs from the kube source.  Parser:\n Name: myapp-parser Namespace: my-app This Parser defines the regular expression and formatting details for parsing logs. It extracts three fields from the log lines: logtime, level, and message.  After applying this configuration, you will observe that the logs emitted by the myapp application are now parsed according to the regex and enriched with the following fields:\nlevel: stderr logtime: 2023-05-29T09:53:35.959135345Z message: Health: checking safe You can adjust the provided regular expression (regex) in the Parser resource according to the specific format of your logs. Modify it to match the structure and patterns of your application’s log lines.\nCustom output If you are running your own log store, then you can create an Output resource in your application namespace, so that only the logs from your application namespace go to this log store.\nThe following is an example of an Output resource for the myapp application, running in the my-app namespace, to send logs to a custom OpenSearch cluster, protected by basic authentication.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  --- apiVersion: fluentbit.fluent.io/v1alpha2 kind: FluentBitConfig metadata: labels: fluentbit.verrazzano.io/namespace-config: \"verrazzano\" name: myapp-fluentbitconfig namespace: my-app spec: outputSelector: matchLabels: app: \"myapp\" --- apiVersion: fluentbit.fluent.io/v1alpha2 kind: Output metadata: labels: app: \"myapp\" name: myapp-output namespace: my-app spec: match: kube.* opensearch: host: \u003chost-url\u003e httpPassword: valueFrom: secretKeyRef: key: \u003cpassword-key\u003e name: \u003cyour-secret-name\u003e httpUser: valueFrom: secretKeyRef: key: \u003cusername-key\u003e name: \u003cyour-secret-name\u003e index: \u003cindex-name\u003e port: \u003cport-number\u003e suppressTypeName: true EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   Replace \u003chost-url\u003e, \u003cport-number\u003e, and \u003cindex-name\u003e with the appropriate values. The secret holding the credentials for the OpenSearch cluster needs to be created in the same namespace as the Output, that is, the application namespace. Replace \u003cyour-secret-name\u003e, \u003cpassword-key\u003e, and \u003cusername-key\u003e with the appropriate values.  For any namespaced Output resources, the secret containing the credentials for the OpenSearch cluster needs to be created in the same namespace as the Output, that is, the application namespace.\nNote that with this configuration, your applications logs still will continue to go to the default cluster output as well.\nDisable application log collection in Verrazzano OpenSearch By default, the application ClusterOutput created by Verrazzano ensures that the logs for your applications are sent to the system OpenSearch. If you have configured an Output in your application namespace, your application logs will now be stored in two locations: the system OpenSearch, by using the application ClusterOutput, and the custom destination, by using the Output resource you created in your application namespace.\nIf you want to opt out of the Verrazzano OpenSearch log collection, then disable the application ClusterOutput by editing your Verrazzano custom resource as follows:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev components: fluentOperator: enabled: true fluentbitOpensearchOutput: enabled: true overrides: - values: application: enabled: false    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  After updating your Verrazzano custom resource, you will notice that the opensearch-application-clusteroutput ClusterOutput resource will be removed from the cluster. The opensearch-system-clusteroutput will continue to exist and will send the Verrazzano component logs to Verrazzano OpenSearch.\nConfigure the systemd logs directory By default, the systemd journal logs directory is set to /var/run/journal. However, depending on the environment, the directory location may vary.\nTo override the default configuration and set the logs directory to a different path, edit your Verrazzano custom resource as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev components: fluentOperator: enabled: true overrides: - values: fluentbit: input: systemd: path: \u003cnew-path\u003e fluentbitOpensearchOutput: enabled: true    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nCheck Fluent Bit configurations View the generated Fluent Bit configuration that the Fluent Operator loads in a secret and mounts as a volume in a Fluent Bit DaemonSet, as follows:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl -n verrazzano-system get secrets Fluent Bit-config -ojson | jq '.data.\"fluent-bit.conf\"' | awk -F '\"' '{printf $2}' | base64 --decode $ kubectl -n verrazzano-system get secrets Fluent Bit-config -ojson | jq '.data.\"parsers.conf\"' | awk -F '\"' '{printf $2}' | base64 --decode    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"Configure Fluent Bit using Fluent Operator","excerpt":"Configure Fluent Bit using Fluent Operator","ref":"/docs/observability/logging/fluent-operator/","tags":"","title":"Use Fluent Operator and Fluent Bit"},{"body":"Use Prometheus to collect system performance metrics and metrics for applications deployed or managed by Verrazzano. For information, see Prometheus.\nGather metrics The following is an example of using Prometheus to scrape the metrics endpoint of the Hello Helidon Greet application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: labels: release: prometheus-operator name: hello-helidon namespace: hello-helidon spec: endpoints: - bearerTokenSecret: key: \"\" enableHttp2: false path: /metrics relabelings: - action: replace replacement: local targetLabel: verrazzano_cluster - action: keep regex: true;hello-helidon sourceLabels: - __meta_kubernetes_pod_annotation_verrazzano_io_metricsEnabled - __meta_kubernetes_pod_label_app - action: replace regex: (.+) sourceLabels: - __meta_kubernetes_pod_annotation_verrazzano_io_metricsPath targetLabel: __metrics_path__ - action: replace regex: ([^:]+)(?::\\d+)?;(\\d+) replacement: $1:$2 sourceLabels: - __address__ - __meta_kubernetes_pod_annotation_verrazzano_io_metricsPort targetLabel: __address__ - action: replace regex: (.*) replacement: $1 sourceLabels: - __meta_kubernetes_namespace targetLabel: namespace - action: labelmap regex: __meta_kubernetes_pod_label_(.+) - action: replace sourceLabels: - __meta_kubernetes_pod_name targetLabel: pod_name - action: labeldrop regex: (controller_revision_hash) - action: replace regex: .*/(.*)$ replacement: $1 sourceLabels: - name targetLabel: webapp - action: replace regex: ;(.*) replacement: $1 separator: ; sourceLabels: - application - app targetLabel: application scheme: https tlsConfig: ca: {} caFile: /etc/istio-certs/root-cert.pem cert: {} certFile: /etc/istio-certs/cert-chain.pem insecureSkipVerify: true keyFile: /etc/istio-certs/key.pem namespaceSelector: matchNames: - hello-helidon selector: {}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nWiring for logs Application logs record events happening in the Kubernetes cluster, which are automatically accessed by Verrazzano when required.\n","categories":"","description":"Learn about collecting metrics and logs","excerpt":"Learn about collecting metrics and logs","ref":"/docs/applications/kubernetes/wiring-metrics/","tags":"","title":"Gather Metrics and Collect Logs"},{"body":"You can access the installation endpoints using the Verrazzano CLI or with kubectl:\n Verrazzano CLI kubectl  Verrazzano CLI You can get the endpoints for these consoles by issuing the following command and examining the Status.Instance field:\n$ vz status The resulting output is similar to the following:\nVerrazzano Status  Name: verrazzano  Namespace: default  Version: 1.5.0  State: Ready  Profile: dev  Available Components: 24/24  Access Endpoints:  argoCDUrl: https://argocd.default.11.22.33.44.nip.io  consoleUrl: https://verrazzano.default.11.22.33.44.nip.io  grafanaUrl: https://grafana.vmi.system.default.11.22.33.44.nip.io  jaegerURL: https://jaeger.default.11.22.33.44.nip.io  keyCloakUrl: https://keycloak.default.11.22.33.44.nip.io  kialiUrl: https://kiali.vmi.system.default.11.22.33.44.nip.io  openSearchDashboardsUrl: https://osd.vmi.system.default.11.22.33.44.nip.io  openSearchUrl: https://opensearch.vmi.system.default.11.22.33.44.nip.io  prometheusUrl: https://prometheus.vmi.system.default.11.22.33.44.nip.io  rancherUrl: https://rancher.default.11.22.33.44.nip.io  thanosQueryUrl: https://thanos-query.default.11.22.33.44.nip.io  thanosRulerUrl: https://thanos-ruler.default.11.22.33.44.nip.io kubectl You can get the endpoints for these consoles by issuing the following command and examining the Status.Instance field: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get vz -o yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe resulting output is similar to the following (abbreviated to show only the relevant portions):\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   ... status: conditions: - lastTransitionTime: \"2021-06-30T03:10:00Z\" message: Verrazzano install in progress status: \"True\" type: InstallStarted - lastTransitionTime: \"2021-06-30T03:18:33Z\" message: Verrazzano install completed successfully status: \"True\" type: InstallComplete instance: argoCDUrl: https://argocd.default.11.22.33.44.nip.io consoleUrl: https://verrazzano.default.11.22.33.44.nip.io grafanaUrl: https://grafana.vmi.system.default.11.22.33.44.nip.io keyCloakUrl: https://keycloak.default.11.22.33.44.nip.io kialiUrl: https://kiali.vmi.system.default.11.22.33.44.nip.io opensearchDashboardsUrl: https://osd.vmi.system.default.11.22.33.44.nip.io opensearchUrl: https://opensearch.vmi.system.default.11.22.33.44.nip.io prometheusUrl: https://prometheus.vmi.system.default.11.22.33.44.nip.io rancherUrl: https://rancher.default.11.22.33.44.nip.io thanosQueryUrl: https://thanos-query.default.11.22.33.44.nip.io    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If you have jq installed, then you can use the following command to get the instance URLs more directly. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get vz -o jsonpath=\"{.items[].status.instance}\" | jq .    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe following is an example of the output:\n{ \"argoCDUrl\": https://argocd.default.11.22.33.44.nip.io \"consoleUrl\": \"https://verrazzano.default.11.22.33.44.nip.io\", \"grafanaUrl\": \"https://grafana.vmi.system.default.11.22.33.44.nip.io\", \"keyCloakUrl\": \"https://keycloak.default.11.22.33.44.nip.io\", \"kialiUrl\": \"https://kiali.vmi.system.default.11.22.33.44.nip.io\", \"opensearchUrl\": \"https://opensearch.vmi.system.default.11.22.33.44.nip.io\", \"opensearchDashboardsUrl\": \"https://osd.vmi.system.default.11.22.33.44.nip.io\", \"prometheusUrl\": \"https://prometheus.vmi.system.default.11.22.33.44.nip.io\", \"rancherUrl\": \"https://rancher.default.11.22.33.44.nip.io\" \"thanosQueryUrl\": \"https://thanos-query.default.11.22.33.44.nip.io\" } ","categories":"","description":"Get the endpoints for the consoles that Verrazzano installs","excerpt":"Get the endpoints for the consoles that Verrazzano installs","ref":"/docs/setup/access/console-urls/","tags":"","title":"Get Console URLs"},{"body":"This example application provides a Helidon implementation of the Sock Shop Microservices Demo Application. It uses OAM resources to define the application deployment in a multicluster environment.\nBefore you begin  Set up a multicluster Verrazzano environment following the installation instructions. The example assumes that there is a managed cluster named managed1 associated with the multicluster environment. If your environment does not have a cluster of that name, then you should edit the deployment files and change the cluster name listed in the placement section.  Set up the following environment variables to point to the kubeconfig file for the admin and managed clusters. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ export KUBECONFIG_ADMIN=/path/to/your/adminclusterkubeconfig $ export KUBECONFIG_MANAGED1=/path/to/your/managedclusterkubeconfig    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: The Sock Shop application deployment files are contained in the Verrazzano project located at \u003cVERRAZZANO_HOME\u003e/examples/multicluster/sockshop, where \u003cVERRAZZANO_HOME\u003e is the root of the Verrazzano project.\nDeploy the application   Create a namespace for the Sock Shop application by deploying the Verrazzano project. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN apply \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/sock-shop/verrazzano-project.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Apply the Sock Shop OAM resources to deploy the application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN apply \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/sock-shop/sock-shop-comp.yaml $ kubectl --kubeconfig $KUBECONFIG_ADMIN apply \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/sock-shop/sock-shop-app.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the Sock Shop application to be ready. It may take a few minutes for the pod resources to start appearing on the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 wait \\ --for=condition=Ready pods \\ --all -n mc-sockshop \\ --timeout=300s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Explore the application The Sock Shop microservices application implements REST API endpoints including:\n /catalogue - Returns the Sock Shop catalog. This endpoint accepts the GET HTTP request method. /register - POST { \"username\":\"xxx\", \"password\":\"***\", \"email\":\"foo@example.com\", \"firstName\":\"foo\", \"lastName\":\"coo\" } to create a user. This endpoint accepts the POST HTTP request method.  NOTE: The following instructions assume that you are using a Kubernetes environment, such as OKE. Other environments or deployments may require alternative mechanisms for retrieving addresses, ports, and such.\nFollow these steps to test the endpoints.\n  Get the generated host name for the application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ HOST=$(kubectl --kubeconfig $KUBECONFIG_MANAGED1 get gateway \\ -n mc-sockshop \\ -o jsonpath={.items[0].spec.servers[0].hosts[0]}) $ echo $HOST # Sample output sockshop-appconf.mc-sockshop.11.22.33.44.nip.io    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the EXTERNAL_IP address of the istio-ingressgateway service. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ADDRESS=$(kubectl --kubeconfig $KUBECONFIG_MANAGED1 get service \\ -n istio-system istio-ingressgateway \\ -o jsonpath='{.status.loadBalancer.ingress[0].ip}') $ echo $ADDRESS # Sample output 11.22.33.44    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access the Sock Shop example application.\n  Using the command line a. Get catalogue. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -sk \\ -X GET \\ https://${HOST}/catalogue \\ --resolve ${HOST}:443:${ADDRESS} # Sample output [{\"count\":115,\"description\":\"For all those leg lovers out there....\", ...}]     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  b. Add a new user (replace values of username and password). code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -i \\ --header \"Content-Type: application/json\" --request POST \\ --data '{\"username\":\"foo\",\"password\":\"****\",\"email\":\"foo@example.com\",\"firstName\":\"foo\",\"lastName\":\"foo\"}' \\ -k https://${HOST}/register \\ --resolve ${HOST}:443:${ADDRESS}     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  c. Add an item to the user’s cart. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -i \\ --header \"Content-Type: application/json\" --request POST \\ --data '{\"itemId\": \"a0a4f044-b040-410d-8ead-4de0446aec7e\",\"unitPrice\": \"7.99\"}' \\ -k https://${HOST}/carts/{username}/items \\ --resolve ${HOST}:443:${ADDRESS} # Sample output {\"itemId\":\"a0a4f044-b040-410d-8ead-4de0446aec7e\",\"quantity\":1,\"unitPrice\":7.99}     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  d. Get cart items. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -i \\ -k https://${HOST}/carts/{username}/items \\ --resolve ${HOST}:443:${ADDRESS} # Sample output [{\"itemId\":\"a0a4f044-b040-410d-8ead-4de0446aec7e\",\"quantity\":1,\"unitPrice\":7.99}]     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf you are using nip.io, then you do not need to include --resolve.\n  Local testing with a browser\nTemporarily, modify the /etc/hosts file (on Mac or Linux) or c:\\Windows\\System32\\Drivers\\etc\\hosts file (on Windows 10), to add an entry mapping the host name to the ingress gateway’s EXTERNAL-IP address. For example:\n11.22.33.44 sockshop.example.com Then, you can access the application in a browser at https://sockshop.example.com/catalogue.\n If you are using nip.io, then you can access the application in a browser using the HOST variable (for example, https://${HOST}/catalogue). If you are going through a proxy, you may need to add *.nip.io to the NO_PROXY list.    Using your own DNS name\nPoint your own DNS name to the ingress gateway’s EXTERNAL-IP address.\n In this case, you would need to edit the sock-shop-app.yaml file to use the appropriate value under the hosts section (such as yourhost.your.domain), before deploying the Sock Shop application. Then, you can use a browser to access the application at https://\u003cyourhost.your.domain\u003e/catalogue.      Verify the deployed application   Verify that the application configuration, components, workloads, and ingress trait all exist. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 get ApplicationConfiguration -n mc-sockshop $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 get Component -n mc-sockshop $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 get VerrazzanoCoherenceWorkload -n mc-sockshop $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 get Coherence -n mc-sockshop $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 get IngressTrait -n mc-sockshop    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Verify that the Sock Shop service pods are successfully created and transition to the READY state. Note that this may take a few minutes and that you may see some of the services terminate and restart. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 get pods -n mc-sockshop # Sample output NAME READY STATUS RESTARTS AGE carts-coh-0 2/2 Running 0 38m catalog-coh-0 2/2 Running 0 38m orders-coh-0 2/2 Running 0 38m payment-coh-0 2/2 Running 0 38m shipping-coh-0 2/2 Running 0 38m users-coh-0 2/2 Running 0 38m    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  A variety of endpoints are available to further explore the logs, metrics, and such, associated with the deployed Sock Shop application. You can access them according to the directions here.\n  Undeploy the application Regardless of its location, to undeploy the application, delete the application resources and the project from the admin cluster. Undeploy affects all clusters in which the application is located.\n  To undeploy the application, delete the Sock Shop OAM resources: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN delete \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/sock-shop/sock-shop-app.yaml $ kubectl --kubeconfig $KUBECONFIG_ADMIN delete \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/sock-shop/sock-shop-comp.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the project. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN delete \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/sock-shop/verrazzano-project.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the namespace mc-sockshop after the application pods are terminated. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN delete namespace mc-sockshop $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 delete namespace mc-sockshop    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"Implementation of the [Sock Shop Microservices Demo Application](https://microservices-demo.github.io/) deployed to a multicluster environment.","excerpt":"Implementation of the [Sock Shop Microservices Demo Application](https://microservices-demo.github.io/) deployed to a multicluster environment.","ref":"/docs/examples/multicluster/sock-shop/","tags":"","title":"Multicluster Helidon Sock Shop"},{"body":"The Hello World Helidon example is a Helidon-based service that returns a “Hello World” response when invoked. The example application is specified using Open Application Model (OAM) component and application configuration YAML files, and then deployed by applying those files.\nThe example application has two endpoints, which differ in configuration source:\n /greet- uses a microprofile properties file. Deploy this application by using the instructions here. /config- uses a Kubernetes ConfigMap. Deploy this application by using the instructions here.  For more information and the code of this application, see the Verrazzano examples.\n","categories":"","description":"A simple Hello World REST service written with Helidon","excerpt":"A simple Hello World REST service written with Helidon","ref":"/docs/examples/microservices/hello-world/","tags":"","title":"Hello World Helidon"},{"body":"","categories":"","description":"Install Verrazzano in a single cluster environment","excerpt":"Install Verrazzano in a single cluster environment","ref":"/docs/setup/install/","tags":"","title":"Install Verrazzano"},{"body":"This document describes built-in configuration profiles that you can use to simplify a Verrazzano installation. An installation profile is a well-known configuration of Verrazzano settings that can be referenced by name, which then can be customized as needed.\nThe following table describes the Verrazzano installation profiles.\n   Profile Description Characteristics     prod Full installation, production configuration. Default profile:- Full installation.- Persistent storage. - Production OpenSearch cluster topology.   dev Development or evaluation configuration. Lightweight installation:- For evaluation purposes.- No persistence.- Single-node OpenSearch cluster topology.   managed-cluster A specialized installation for managed clusters in a multicluster topology. Minimal installation for a managed cluster:- Clusters must be registered with an admin cluster to use multicluster features.    Use an installation profile To specify an installation profile when installing Verrazzano, set the profile name in the profile field of your Verrazzano custom resource.\nFor example, to use the dev profile: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nTo use a different profile, replace dev with prod, or managed-cluster.\nCustomize an installation profile Regardless of the profile, you can override the profile settings for any component. The following example uses a customized dev profile to configure a small 8 Gi persistent volume for the MySQL instance used by Keycloak to provide more stability for the Keycloak service. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: custom-dev-example spec: profile: dev components: keycloak: mysql: volumeSource: persistentVolumeClaim: claimName: mysql volumeClaimSpecTemplates: - metadata: name: mysql spec: resources: requests: storage: 8Gi    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor details on how to customize Verrazzano components, see Modify Verrazzano Installations.\nProfile configurations The following table lists the Verrazzano components that are enabled by default with each profile. Some components are disabled by default; to access these features, you must first enable them. In general, if they are initially disabled upon installation, then you can enable them post-installation. For information on how to do this, see Edit the Verrazzano resource.\nNote that you can customize any Verrazzano installation regardless of the profile.\n   Component dev prod managed-cluster     applicationOperator ✔️ ✔️ ✔️   argoCD      authProxy ✔️ ✔️ ✔️   certManager ✔️ ✔️ ✔️   certManagerWebhookOCI ️ ️    clusterAPI ✔️ ✔️    clusterAgent ✔️ ✔️ ✔️   clusterIssuer ✔️ ✔️ ✔️   clusterOperator ✔️ ✔️ ✔️   coherenceOperator ✔️ ✔️ ✔️   console ✔️ ✔️    dns ✔️ ✔️ ✔️   fluentbitOpensearchOutput      fluentd ✔️ ✔️ ✔️   fluentOperator ️ ️ ️   grafana ✔️ ✔️    ingressNGINX ✔️ ✔️ ✔️   istio ✔️ ✔️ ✔️   jaegerOperator      keycloak ✔️ ✔️    kiali ✔️ ✔️    kubeStateMetrics      mySQLOperator ✔️ ✔️ ✔️   oam ✔️ ✔️ ✔️   opensearch ✔️ ✔️    opensearchDashboards ✔️ ✔️    prometheus ✔️ ✔️ ✔️   prometheusAdapter      prometheusNodeExporter ✔️ ✔️ ✔️   prometheusOperator ✔️ ✔️ ✔️   prometheusPushgateway      rancher ✔️ ✔️    rancherBackup      thanos      velero      weblogicOperator ✔️ ✔️ ✔️    Prometheus and Grafana configurations The following table describes the Prometheus and Grafana configurations in each profile.\n   Profile Prometheus Grafana     prod One replica (128 MB memory, 50 Gi storage) One replica (48 MB memory, 50 Gi storage)   dev One replica (128 MB memory, ephemeral storage) One replica (48 MB memory, ephemeral storage)   managed-cluster One replica (128 MB memory, 50 Gi storage) Not installed    OpenSearch Dashboards and OpenSearch configurations The following table describes the OpenSearch Dashboards and OpenSearch cluster topology in each profile.\n   Profile OpenSearch OpenSearch Dashboards     prod Three master replicas (1.4 Gi memory, 50 Gi storage each)One ingest replica (2.5 Gi memory, no storage)Three data replicas (4.8 Gi memory, 50 Gi storage each) One replica (192 MB memory, ephemeral storage)   dev One master/data/ingest replica (1 Gi memory, ephemeral storage) One replica (192 MB memory, ephemeral storage)   managed-cluster Not installed Not installed    NOTE OpenSearch containers are configured to use 75% of the configured request memory for the Java min/max heap settings.  Profile-independent defaults The following table shows the settings for components that are profile-independent (consistent across all profiles unless overridden).\n   Component Default     DNS Wildcard DNS provider nip.io.   Certificates Uses the cert-manager self-signed ClusterIssuer for certificates.   Ingress-type Defaults to LoadBalancer service type for the ingress.    ","categories":"","description":"Use named Verrazzano configurations to simplify an installation","excerpt":"Use named Verrazzano configurations to simplify an installation","ref":"/docs/setup/install/perform/profiles/","tags":"","title":"Installation Profiles"},{"body":"Verrazzano stores user login information in Keycloak. In turn, Keycloak uses MySQL as a back end to store all persistent data. This document shows you how to back up persistent data stored in MySQL from the original cluster and restore it in a new cluster. If you are restoring data to the same cluster, then the terms original cluster and new cluster refer to same cluster.\n MySQL Operator prerequisites MySQL Operator backup MySQL Operator restore  MySQL Operator prerequisites MySQL is deployed using the MySQL Operator for Kubernetes. Apart from managing the life cycle of MySQL instances, MySQL Operator provides the capability to back up and restore data using an Amazon S3 compatible object storage.\nBefore proceeding with a MySQL back up or restore operation, keep the following details handy:\n Object storage bucket name.  An Amazon S3 compatible object storage bucket. This can be an Oracle Cloud Object Storage bucket in any compartment of your Oracle Cloud tenancy.  For reference, make a note of the bucket name and tenancy name. For more information about creating a bucket with Object Storage, see Managing Buckets.   For private clouds, enterprise networks, or air-gapped environments, this could be MinIO or an equivalent object storage solution.   Object storage prefix name. This will be a child folder under the bucket, which the backup component creates. Object storage region name. Object storage signing key.  A signing key, which is required to authenticate with the Amazon S3 compatible object storage; this is an Access Key/Secret Key pair. In Oracle Cloud Infrastructure (OCI), you or your administrator creates the Customer Secret Key.  An associated Access Key will be generated for the secret key. To create a Customer Secret Key, see Customer Secret Key.      The following example creates a secret mysql-backup-secret in the namespace keycloak. The instructions in this document back up data from MySQL to an Oracle Cloud Object Storage bucket and restore it from there.\n  MySQL Operator requires a secret to communicate with the S3 compatible object storage, so we create a backup-secret.txt file, which has the object storage credentials.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  [default] aws_access_key_id=\u003cobject storage access key\u003e aws_secret_access_key=\u003cobject storage secret key\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    MySQL Operator requires the region name where the bucket is created, so we create a backup-region.txt file, which contains the region information. The following is an example of a backup-region.txt file indicating that the object storage is created in region us-phoenix-1: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  [default] region=us-phoenix-1    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  In the namespace keycloak, create a Kubernetes secret, for example mysql-backup-secret.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create secret generic --namespace \u003cbackup-namespace\u003e \u003csecret-name\u003e --from-file=\u003ckey\u003e=\u003cfull_path_to_creds_file\u003e --from-file=\u003ckey\u003e=\u003cfull_path_to_config_file\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The following is an example to create a Kubernetes secret consisting of credentials to connect to OCI Object Storage.\n$ kubectl create secret generic --namespace keycloak mysql-backup-secret --from-file=credentials=backup-secret.txt --from-file=config=backup-region.txt   NOTE  The secret must be created in the namespace keycloak. To restore Keycloak on a new cluster, create the secret in the namespace, keycloak, in the new cluster. To avoid misuse of sensitive data, ensure that the backup-secret.txt file is deleted after the Kubernetes secret is created.   MySQL Operator backup   To initiate a MySQL backup on the original cluster, create the following example custom resource YAML file that uses an OCI Object Storage as a back end. The operator uses the secret referenced in spec.backupProfile.dumpInstance.storage.s3.config to authenticate with the OCI Object Storage.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOFapiVersion:mysql.oracle.com/v2kind:MySQLBackupmetadata:name:\u003cbackup name\u003enamespace:keycloakspec:clusterName:mysqlbackupProfile:name:\u003cbackupProfileName\u003edumpInstance:storage:s3:bucketName:\u003cThe Object Storage bucket. See the MySQL Operator prerequisites section.\u003econfig:\u003cKubernetes secret name. See the MySQL Operator prerequisites section.\u003eendpoint:\u003c OCI S3 Object Storage endpoint.\u003eprefix:\u003cThe prefix name. This folder will be automatically created.\u003eprofile:defaultEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  NOTE  The config value is mysql-backup-secret, which is the name of the secret that you created previously in the keycloak namespace. The clustername has to be mysql. The namespace has to be keycloak. The profile value is the profile for the security credentials. In this case, it is default.   The following is an example of a MySQLBackup resource to initiate a MySQL backup:\n$ kubectl apply -f - \u003c\u003cEOF apiVersion: mysql.oracle.com/v2 kind: MySQLBackup metadata: name: mysql-backup namespace: keycloak spec: clusterName: mysql backupProfile: name: mysqlOneTime dumpInstance: storage: s3: bucketName: mysql-bucket config: mysql-backup-secret endpoint: https://mytenancy.compat.objectstorage.us-phoenix-1.oraclecloud.com prefix: mysql-test profile: default EOF   Confirm that the backup operation is complete. Run the following command on the original cluster and ensure that the STATUS is Completed. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get MySQLBackup --namespace keycloak # Sample output NAME CLUSTER STATUS OUTPUT AGE mysql-backup mysql Completed mysql-backup-20221025-180836 119s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  A successful backup of MySQL creates a backup folder in the object storage. Make note of the backup folder prefix name that the MySQL backup created on the original cluster.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get mysqlbackup --namespace keycloak \u003cmysql-backup-name\u003e -o jsonpath={.status.output}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The following is an example:\n$ kubectl get mysqlbackup --namespace keycloak mysql-backup -o jsonpath={.status.output} mysql-backup-20221025-180836   Back up MySQL Helm chart and values.\nBack up the values in the MySQL Helm chart, in the original cluster to a file, mysql-values.yaml .\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ helm get values --namespace keycloak mysql \u003e mysql-values.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  MySQL Helm charts are present inside the Verrazzano platform operator. Retrieve the charts from the original cluster to a local directory.\nThe following example retrieves the MySQL charts to a directory mysql-charts under the current directory. In order to avoid data corruption, ensure that the directory, mysql-charts, doesn’t already exist under the current directory.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl cp --namespace verrazzano-install \\  $(kubectl get pod --namespace verrazzano-install -l app=verrazzano-platform-operator \\  -o custom-columns=:metadata.name --no-headers):platform-operator/thirdparty/charts/mysql \\  -c verrazzano-platform-operator mysql-charts/    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Scheduled backups You can also implement schedules for running MYSQL backups. For more information, see the Handling MySQL Backups section, “A PersistentVolumeClaim Scheduled Backup Example.”\nMySQL Operator restore Before you begin, read the MySQL Operator prerequisites. In addition, you must have at least one healthy backup before starting a restore operation.\nTo initiate a MySQL restore operation from an existing backup, you need to recreate the MySQL cluster. Use the following steps for a successful MySQL restore operation:\n  Delete the MySQL pods and PersistentVolumeClaim from the system on the new cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ helm delete mysql --namespace keycloak $ kubectl delete pvc --namespace keycloak -l tier=mysql    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Start a MySQL restore operation by installing the Helm chart by using the chart from the original cluster.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ helm install mysql \u003cpath to directory mysql-charts, where original charts are extracted\u003e \\  --namespace keycloak \\  --set initDB.dump.name=\u003cdump-name\u003e \\  --set initDB.dumpOptions.loadUsers=true \\  --set initDB.dump.s3.profile=default \\  --set initDB.dump.s3.prefix=\u003cprefixName/backup folder name\u003e \\  --set initDB.dump.s3.bucketName=\u003cOCI bucket name\u003e \\  --set initDB.dump.s3.config=\u003cKubernetes secret name, see MySQL Operator prerequisites section.\u003e \\  --set initDB.dump.s3.endpoint=\u003cOCI S3 endpoint\u003e \\  --values \u003cmysql values file\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The following is an example:\n $ helm install mysql mysql-charts \\ --namespace keycloak \\ --set initDB.dump.name=alpha \\ --set initDB.dump.s3.profile=default \\ --set initDB.dump.s3.prefix=mysql-test/mysql-backup-20221025-180836 \\ --set initDB.dump.s3.bucketName=mysql-bucket \\ --set initDB.dump.s3.config=mysql-backup-secret \\ --set initDB.dump.s3.endpoint=https://mytenancy.compat.objectstorage.us-phoenix-1.oraclecloud.com \\ --values mysql-values.yaml   After performing the restore command, wait for the MySQL cluster to be online. Ensure that the STATUS is ONLINE and the count under ONLINE matches the INSTANCES.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get innodbclusters --namespace keycloak mysql # Sample output NAME STATUS ONLINE INSTANCES ROUTERS AGE mysql ONLINE 3 3 3 2m23s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Wait for all the MySQL pods to be in the RUNNING state.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl wait --namespace keycloak --for=condition=ready pod -l tier=mysql --timeout=600s # Sample output pod/mysql-0 condition met pod/mysql-1 condition met pod/mysql-2 condition met pod/mysql-router-746d9d75c7-6pc5p condition met pod/mysql-router-746d9d75c7-bhrkw condition met pod/mysql-router-746d9d75c7-t8bhb condition met    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  At this point, the MySQL cluster has been restored successfully from the backup, along with the PersistentVolumeClaim that was deleted previously.\n  If you are restoring Keycloak on a new cluster, then update the Keycloak secret.\nOn the original cluster, if you are restoring Keycloak on a new cluster, then run the following command for the keycloak-http secret in keycloak namespace: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl get secret --namespace keycloak keycloak-http -o jsonpath={.data.password}; echo    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nOn the new cluster, replace the existing password value with the value displayed from the previous command. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   kubectl patch secret keycloak-http --namespace keycloak -p '{\"data\": {\"password\": \"\u003cpassword displayed in the step above\u003e\"}}'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Restart the Keycloak pods.\nThe removal and recreation of the MySQL cluster may bring down the Keycloak pods because MySQL goes offline during the restore operation. Run the following commands to restart the Keycloak pods: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   KEYCLOAK_REPLICAS=$(kubectl get sts --namespace keycloak keycloak -o custom-columns=:status.replicas --no-headers)  kubectl scale sts --namespace keycloak keycloak --replicas=0  kubectl scale sts --namespace keycloak keycloak --replicas=${KEYCLOAK_REPLICAS}  kubectl wait --namespace keycloak --for=condition=ready pod -l app.kubernetes.io/instance=keycloak --timeout=600s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Update Verrazzano secrets in the new cluster The following steps are applicable only if you are restoring Keycloak on a new cluster.\nAfter you complete the MySQL restore operation, the password for the following secrets in the verrazzano-system namespace must be updated in the new cluster:\n verrazzano verrazzano-es-internal verrazzano-prom-internal    On the original cluster, run the following command for the verrazzano secret:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl get secret --namespace verrazzano-system verrazzano -o jsonpath={.data.password}; echo    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  On the new cluster, replace the existing password value with the value displayed in step 1. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   kubectl patch secret verrazzano --namespace verrazzano-system -p '{\"data\": {\"password\": \"\u003cpassword displayed in step 1\u003e\"}}'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Repeat steps 1 and 2 for the verrazzano-es-internal and verrazzano-prom-internal secrets.\n  Restart the fluentd pods in the new cluster to use the original cluster password to connect to OpenSearch. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl delete pod -l app=fluentd --namespace verrazzano-system    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"Back up and restore Keycloak data","excerpt":"Back up and restore Keycloak data","ref":"/docs/backup/keycloak/","tags":"","title":"Keycloak"},{"body":"","categories":"","description":"Configure and manage Verrazzano logging","excerpt":"Configure and manage Verrazzano logging","ref":"/docs/observability/logging/","tags":"","title":"Logging"},{"body":"Verrazzano manages and secures network traffic between Verrazzano system components and deployed applications. Verrazzano does not manage or secure traffic for the Kubernetes cluster itself, or for non-Verrazzano services or applications running in the cluster. Traffic is secured at two levels in the network stack:\n ISO Layer 3/4: Using NetworkPolicies to control IP access to Pods. ISO Layer 6: Using TLS and mutual TLS authentication (mTLS) to provide authentication, confidentiality, and integrity for connections within the cluster and for external connections.  NetworkPolicies By default, all Pods in a Kubernetes cluster have network access to all other Pods in the cluster. Kubernetes has a NetworkPolicy resource that provides network level 3 and 4 security for Pods, restricting both ingress and egress IP traffic for a set of Pods in a namespace. Verrazzano configures all system components with NetworkPolicies to control ingress. Egress is not restricted.\nNOTE: A NetworkPolicy resource needs a NetworkPolicy controller to implement the policy, otherwise the policy has no effect. You must install a Kubernetes Container Network Interface (CNI) plug-in that provides a NetworkPolicy controller, such as Calico, before installing Verrazzano, or else the policies are ignored.\nNetworkPolicies for system components Verrazzano installs a set of NetworkPolicies for system components to control ingress into the Pods. A policy is scoped to a namespace and uses selectors to specify the Pods that the policy applies to, along with the ingress and egress rules. For example, the following policy applies to the Verrazzano API Pod in the verrazzano-system namespace. This policy allows network traffic from NGINX Ingress Controller on port 8775 and from Prometheus on port 15090. No other Pods can reach those ports or any other ports of the Verrazzano API Pod. Notice that namespace selectors need to be used; the NetworkPolicy resource does not support specifying the namespace name. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: networking.k8s.io/v1 kind: NetworkPolicy ... spec: PodSelector: matchLabels: app: verrazzano-api ingress: - from: - namespaceSelector: matchLabels: verrazzano.io/namespace: ingress-nginx PodSelector: matchLabels: app.kubernetes.io/instance: ingress-controller ports: - port: 8775 protocol: TCP - from: - namespaceSelector: matchLabels: verrazzano.io/namespace: verrazzano-system PodSelector: matchLabels: app: system-prometheus ports: - port: 15090 protocol: TCP    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe following table shows all of the ingresses that allow network traffic into system components. The ports shown are Pod ports, which is what NetworkPolicies require.\n   Component Pod Port From Description      Argo CD 443 NGINX Ingress Access from external client    Argo CD 8080 Argo CD Server, Internal Argo CD Server data port    cert-manager 9402 Prometheus Prometheus scraping    Coherence Operator 9443 Prometheus Webhook entrypoint    Istio control plane 15012 Envoy Envoy access to istiod    Istio control plane 15014 Prometheus Prometheus scraping.    Istio control plane 15017 Kubernetes API Server Webhook entrypoint    Istio egress gateway 8443 Mesh services Application egress    Istio egress gateway 15090 Prometheus Prometheus scraping    Istio ingress gateway 8443 External Application ingress    Istio ingress gateway 15090 Prometheus Prometheus scraping    Keycloak 8080 NGINX Ingress Access from external client    Keycloak 15090 Prometheus Prometheus scraping    MySql 15090 Prometheus Prometheus scraping    MySql 3306 Keycloak Keycloak datastore    Node exporter 9100 Prometheus Prometheus scraping    OpenSearch 8775 Fluentd Access from Fluentd    OpenSearch 9200 OpenSearch Dashboards, Internal OpenSearch data port    OpenSearch 9300 Internal OpenSearch cluster port    OpenSearch 15090 Prometheus Envoy metrics scraping    OpenSearch 8775 NGINX Ingress Access from external client    Prometheus 8775 NGINX Ingress Access from external client    Prometheus 9090 Grafana Access for Grafana console    Rancher 80 NGINX Ingress Access from external client    Rancher 9443 Kubernetes API Server Webhook entrypoint    Verrazzano Application Operator 9443 Kubernetes API Server Webhook entrypoint    Verrazzano Authentication Proxy 8775 NGINX Ingress Access from external client    Verrazzano Authentication Proxy 15090 Prometheus Prometheus scraping    Verrazzano Console 8000 NGINX Ingress Access from external client    Verrazzano Console 15090 Prometheus Prometheus scraping    Verrazzano Platform Operator 9443 Kubernetes API Server Webhook entrypoint     NetworkPolicies for applications By default, applications do not have NetworkPolicies that restrict ingress into the application or egress from it. You can configure them for the application namespaces using the NetworkPolicy section of a Verrazzano project.\nNOTE Verrazzano requires specific ingress to and egress from application pods. If you add a NetworkPolicy for your application namespace or pods, you must add an additional policy to ensure that Verrazzano still has the required access it needs. The ingress policy is needed only if you restrict ingress. Likewise, the egress policy is needed only if you restrict egress. The following are the ingress and egress NetworkPolicies:\n Ingress NetworkPolicies  ingress: - from: - namespaceSelector: matchLabels: verrazzano.io/namespace: istio-system podSelector: matchLabels: app: istiod - from: - namespaceSelector: matchLabels: verrazzano.io/namespace: istio-system podSelector: matchLabels: app: istio-ingressgateway - from: - namespaceSelector: matchLabels: verrazzano.io/namespace: verrazzano-system podSelector: matchLabels: app: system-prometheus - from: - namespaceSelector: matchLabels: verrazzano.io/namespace: verrazzano-system podSelector: matchLabels: app: coherence-operator - from: - namespaceSelector: matchLabels: verrazzano.io/namespace: verrazzano-system podSelector: matchLabels: app: weblogic-operator   Egress NetworkPolicies  egress: - ports: - port: 15012 protocol: TCP to: - namespaceSelector: matchLabels: verrazzano.io/namespace: istio-system podSelector: matchLabels: app: istiod - to: - namespaceSelector: matchLabels: verrazzano.io/namespace: istio-system podSelector: matchLabels: app: istio-egressgateway - ports: - port: 53 protocol: TCP - port: 53 protocol: UDP to: - namespaceSelector: matchLabels: verrazzano.io/namespace: kube-system - ports: - port: 8000 protocol: TCP to: - namespaceSelector: matchLabels: verrazzano.io/namespace: verrazzano-system podSelector: matchLabels: app: coherence-operator   NetworkPolicies for Envoy sidecar proxies As mentioned, Envoy sidecar proxies run in both system component pods and application pods. Each proxy sends requests to the Istio control plane pod, istiod, for a variety of reasons. During installation, Verrazzano creates a NetworkPolicy named istiod-access in the istio-system namespace to give ingress to system component and application sidecar proxies.\nMutual TLS authentication (mTLS) Istio can be enabled to use mTLS between services in the mesh, and also between the Istio gateways and Envoy sidecar proxies. There are various options to customize mTLS usage, for example it can be disabled on a per-port level. The Istio control plane, Istiod, is a CA and provides key and certificate rotation for the Envoy proxies, both gateways and sidecars.\nVerrazzano configures Istio to have strict mTLS for the mesh. All components and applications put into the mesh will use mTLS, with the exception of Coherence clusters, which are not in the mesh. Also, all traffic between the Istio ingress gateway and mesh sidecars use mTLS, and the same is true between the proxy sidecars and the egress gateway.\nVerrazzano sets up mTLS during installation with the PeerAuthentication resource as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: v1 items: - apiVersion: security.istio.io/v1beta1 kind: PeerAuthentication ... spec: mtls: mode: STRICT    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nTLS TLS is used by external clients to access the cluster, both through the NGINX Ingress Controller and the Istio ingress gateway. The certificate used by these TLS connections vary; see Verrazzano security for details. All TLS connections are terminated at the ingress proxy. Traffic between the two proxies and the internal cluster Pods always uses mTLS, because those Pods are all in the Istio mesh.\nIstio mesh Istio provides extensive security protection for both authentication and authorization, as described in Istio Security. Access control and mTLS are two security features that Verrazzano configures. These security features are available in the context of a service mesh.\nA service mesh is an infrastructure layer that provides certain capabilities like security, observability, load balancing, and such, for services. Istio defines a service mesh here. In the context of Istio on Kubernetes, a service in the mesh is a Kubernetes Service. Consider the Bob’s Books example application, which has several OAM Components defined. At runtime, there is a Kubernetes Service for each component, and each Service is in the mesh, with one or more Pods associated with the service. All services in the mesh have an Envoy proxy in front of their Pods, intercepting network traffic to and from the Pod. In Kubernetes, that proxy happens to be a sidecar running in each Pod.\nThere are various ways to put a service in the mesh. Verrazzano uses the namespace label, istio-injection: enabled, to designate that all Pods in a given namespace are in the mesh. When a Pod is created in that namespace, the Istio control plane mutating webhook, changes the Pod spec to add the Envoy proxy sidecar container, causing the Pod to be in the mesh.\nDisabling sidecar injection In certain cases, Verrazzano needs to disable sidecar injection for specific Pods in a namespace. This is done in two ways: first, during installation, Verrazzano modifies the istio-sidecar-injector ConfigMap using a Helm override file for the Istio chart. This excludes several components from the mesh, such as the Verrazzano application operator. Second, certain Pods, such as Coherence Pods, are labeled at runtime with sidecar.istio.io/inject=\"false\" to exclude them from the mesh.\nComponents in the mesh The following Verrazzano components are in the mesh and use mTLS for all service to service communication.\n Argo CD Fluentd Grafana Kiali Keycloak MySQL NGINX Ingress Controller OpenSearch OpenSearch Dashboards Prometheus Verrazzano Authentication Proxy Verrazzano Console WebLogic Kubernetes Operator  Some of these components, have mesh-related details that are worth noting, as described in the following sections.\nNGINX The NGINX Ingress Controller listens for HTTPS traffic, and provides ingress into the cluster. NGINX is configured to do TLS termination of client connections. All traffic from NGINX to the mesh services use mTLS, which means that traffic is fully encrypted from the client to the target back-end services.\nKeycloak and MySQL Keycloak and MySQL are also in the mesh and use mTLS for network traffic. Because all of the components that use Keycloak are in the mesh, there is end to end mTLS security for all identity management handled by Keycloak. The following components access Keycloak:\n Verrazzano Authentication Proxy Verrazzano Console OpenSearch Prometheus Grafana Kiali OpenSearch Dashboards  Prometheus Although Prometheus is in the mesh, it is configured to use the Envoy sidecar and mTLS only when communicating with Keycloak. All the traffic related to scraping metrics, bypasses the sidecar proxy, doesn’t use the service IP address, but rather connects to the scrape target using the Pod IP address. If the scrape target is in the mesh, then HTTPS is used; otherwise, HTTP is used. For Verrazzano multicluster, Prometheus also connects from the admin cluster to the Prometheus server in the managed cluster by using the managed cluster NGINX Ingress, using HTTPS. Prometheus is in the managed cluster and never establishes connections to targets outside the cluster.\nBecause Prometheus is in the mesh, additional configuration is done to allow the Envoy sidecar to be bypassed when scraping Pods. This is done with the Prometheus Pod annotation traffic.sidecar.istio.io/includeOutboundIPRanges: \u003ckeycloak-service-ip\u003e. This causes traffic bound for Keycloak to go through the Envoy sidecar, and all other traffic to bypass the sidecar.\nWebLogic Kubernetes Operator When the WebLogic Kubernetes Operator creates a domain, it needs to communicate with the Pods in the domain. Verrazzano puts the operator in the mesh so that it can communicate with the domain Pods using mTLS. As a result, the WebLogic domain must be created in the mesh.\nApplications in the mesh Before you create a Verrazzano application, you should decide if it should be in the mesh. You control sidecar injection, for example, mesh inclusion, by labeling the application namespace with istio-injection=enabled or istio-injection=disabled. By default, applications will not be put in the mesh if that label is missing. If your application uses a Verrazzano project, then Verrazzano will label the namespaces in the project to enable injection. If the application is in the mesh, then mTLS will be used. You can change the PeerAuthentication mTLS mode as desired if you don’t want strict mTLS. Also, if you need to add mTLS port exceptions, you can do this with DestinationRules or by creating another PeerAuthentication resource in the application namespace. Consult the Istio documentation for more information.\nWebLogic When the WebLogic Kubernetes Operator creates a domain, it needs to communicate with the Pods in the domain. Verrazzano puts the operator in the mesh so that it can communicate with the domain Pods using mTLS. Because of that, the WebLogic domain must be created in the mesh. Also, because mTLS is used, do not configure WebLogic to use TLS. If you want to use a custom certificate for your application, you can specify that in the ApplicationConfiguration, but that TLS connection will be terminated at the Istio ingress gateway, which you configure using a Verrazzano IngressTrait.\nCoherence Coherence clusters are represented by the Coherence resource, and are not in the mesh. When Verrazzano creates a Coherence cluster in a namespace that is annotated to do sidecar injection, it disables injection of the Coherence resource using the sidecar.istio.io/inject=\"false\" label shown previously. Furthermore, Verrazzano will create a DestinationRule in the application namespace to disable mTLS for the Coherence extend port 9000. This allows a service in the mesh to call the Coherence extend proxy. For an example, see Bobs Books.\nHere is an example of a DestinationRule created for the Bob’s Books application which includes a Coherence cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  API Version: networking.istio.io/v1beta1 Kind: DestinationRule ... Spec: Host: *.bobs-books.svc.cluster.local Traffic Policy: Port Level Settings: Port: Number: 9000 Tls: Tls: Mode: ISTIO_MUTUAL    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIstio access control Istio lets you control access to your workload in the mesh using the AuthorizationPolicy resource. This lets you control which services or Pods can access your workloads. Some of these options require mTLS; for more information, see Authorization Policy.\nVerrazzano always creates AuthorizationPolicies for applications but never for system components. During application deployment, Verrazzano creates the policy in the application namespace and configures it to allow access from the following:\n Other Pods in the application Istio ingress gateway Prometheus scraper  This prevents other Pods in the cluster from gaining network access to the application Pods. Istio uses a service identity to determine the identity of the request’s origin; for Kubernetes this identity is a service account. Verrazzano creates a per-application AuthorizationPolicy as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  AuthorizationPolicy apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy ... spec: rules: - from: - source: principals: - cluster.local/ns/sales/sa/greeter - cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account - cluster.local/ns/verrazzano-system/sa/verrazzano-monitoring-operator    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nWebLogic domain access For WebLogic applications, the WebLogic Kubernetes Operator must have access to the domain Pods for two reasons. First, it must access the domain servers to get health status; second, it must inject configuration into the Monitoring Exporter sidecar running in the domain server Pods. When a WebLogic domain is created, Verrazzano adds an additional source, cluster.local/ns/verrazzano-system/sa/weblogic-operator-sa to the principals section to permit that access.\n","categories":"","description":"Learn about Verrazzano network security","excerpt":"Learn about Verrazzano network security","ref":"/docs/networking/security/","tags":"","title":"Network Security"},{"body":"A Node failure can occur for many reasons, including hardware failures and network outages. This guide provides information about what to expect when a Node failure occurs and how to recover from a Node failure. Recovery depends on the Storage Provisioner and the type of storage that you use.\nNOTE This guide assumes that the storage provided in the cluster is physically separate from the Node and is recoverable. It does not apply to a local storage on the Node.  What to expect By default, when a Node fails:\n  It may take up to a minute for the failure to reflect in the Kubernetes API server and update the Node status to NotReady.\n  After about five minutes of the Node status being NotReady, the status of the Pods on that Node will be changed to Unknown or NodeLost.\n  The status of the Pods with controllers, like Daemonsets, Statefulsets, and Deployments, will be changed to Terminating.\nNOTE: Pods without a controller, started with a PodSpec, will not be terminated. They must be manually deleted and recreated.\n  New Pods will start on the Nodes that remain with Ready status.\nNOTE: Statefulsets are a special case. The Statefulset controller maintains an ordinal list of Pods, one each for a given name. The Statefulset controller will not start a new Pod with the name of an existing Pod.\n  The Pods that have associated Persistent Volumes of type ReadWriteOnce, do not become Ready. This is because the Pods try to attach to the existing volumes that are still attached to the old Pod, which is still Terminating. This happens because, at a given point, the Persistent Volumes of type ReadWriteOnce, can be associated only with a single Node, and the new Pod resides on another Node.\n  If multiple Availability Domains are used in the Kubernetes cluster and the failed Node is the last in that Availability Domain, then the existing volumes will no longer be reachable by new Pods in a separate Availability Domain.\n  About recovery After a Node fails, if the Node can be recovered within five minutes, then the Pods will return to a Running state. If the Node is not recovered after five minutes, then the Pods will complete termination and are deleted from the Kubernetes API server. New Pods that have Persistent Volumes of type ReadWriteOnce, will now be able to mount the Persistent Volumes and change to Running.\nIf a Node cannot be recovered and is replaced, then deleting the Node from the Kubernetes API server will terminate the old Pods and release the Persistent Volumes of type ReadWriteOnce, to be mounted by any new Pods.\nIf multiple Availability Domains are used in the Kubernetes cluster, then the replacement Node should be added to the same Availability Domain that the deleted Node occupied. This allows the Pods to be scheduled on the replacement Node that can reach the Persistent Volumes in that Availability Domain, and then the Pod status is changed to Running.\nDo not forcefully delete Pods or Persistent Volumes in a failed Node that you plan to recover or replace. If you force delete Pods or Persistent Volumes in a failed Node, it may lead to loss of data and, in the case of Statefulsets, it may lead to split-brain scenarios. For more information about Statefulsets, see Force Delete StatefulSet Pods in the Kubernetes documentation.\nYou can force delete Pods and Persistent Volumes when a failed Node cannot be recovered or replaced in the same Availability Domain as the original Node.\n","categories":"","description":"A guide for managing node failure","excerpt":"A guide for managing node failure","ref":"/docs/guides/ha/node-failure/","tags":"","title":"Node Failure Guide"},{"body":"Verrazzano provides a ready-to-use, OpenSearch deployment that gives you access to all the log messages from various microservices running on the platform. There are scenarios where you may want to back up your OpenSearch data and restore it.\nVerrazzano uses Velero to facilitate backing up and restoring OpenSearch data.\n Velero operator prerequisites OpenSearch backup using Velero OpenSearch restore using Velero OpenSearch restore in an existing cluster using OpenSearch API  Velero operator prerequisites Before proceeding with an OpenSearch backup or restore operation, the following details should be kept handy:\n Object store bucket name.  An Amazon S3 compatible object storage bucket. This can be an Oracle Cloud Object Storage bucket in any compartment of your Oracle Cloud tenancy.  For reference, make a note of the bucket name and tenancy name. For more information about creating a bucket with Object Storage, see Managing Buckets.   For private clouds, enterprise networks, or air-gapped environments, this could be MinIO or an equivalent object store solution.   Object store prefix name. This will be a child folder under the bucket, which the backup component creates. Object store region name. Object store signing key.  A signing key, which is required to authenticate with the Amazon S3 compatible object store; this is an Access Key/Secret Key pair. In Oracle Cloud Infrastructure, you or your administrator creates the Customer Secret Key.  An associated Access Key will be generated for the secret key. To create a Customer Secret Key, see Customer Secret Key.      To back up or restore OpenSearch, you must first enable Velero.\n The following configuration shows you how to enable velero with a prod installation profile. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f -\u003c\u003cEOFapiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:example-verrazzanospec:profile:prodcomponents:velero:enabled:trueEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   NOTE: The OpenSearch back up and restore operation is supported only on prod installation profiles with a multinode OpenSearch configuration.\n After Velero is enabled, verify that the Velero pods are running in the verrazzano-backup namespace. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # Sample of pods running after enabling the velero component $ kubectl get pod -n verrazzano-backup NAME READY STATUS RESTARTS AGE restic-ndxfk 1/1 Running 0 21h velero-5ff8766fd4-xbn4z 1/1 Running 0 21h    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Velero requires a secret to communicate with the S3 compatible object store, so we create a backup-secret.txt file, which has the object store credentials. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  [default] aws_access_key_id=\u003cobject store access key\u003e aws_secret_access_key=\u003cobject store secret key\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  In the namespace verrazzano-backup, create a Kubernetes secret, for example verrazzano-backup-creds. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create secret generic -n \u003cbackup-namespace\u003e \u003csecret-name\u003e --from-file=\u003ckey\u003e=\u003cfull_path_to_creds_file\u003e The following is an example:\n$ kubectl create secret generic -n verrazzano-backup verrazzano-backup-creds --from-file=cloud=backup-secret.txt NOTE: To avoid misuse of sensitive data, ensure that the backup-secret.txt file is deleted after the Kubernetes secret is created.\n  function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Create a BackupStorageLocation resource, which the backup component will reference for subsequent backups. See the following BackupStorageLocation example. For more information, see Backup Storage Location in the Velero documentation. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f -\u003c\u003cEOFapiVersion:velero.io/v1kind:BackupStorageLocationmetadata:name:verrazzano-backup-locationnamespace:verrazzano-backupspec:provider:awsobjectStorage:bucket:example-verrazzanoprefix:backup-democredential:name:verrazzano-backup-credskey:cloudconfig:region:us-phoenix-1s3ForcePathStyle:\"true\"s3Url:https://mytenancy.compat.objectstorage.us-phoenix-1.oraclecloud.comEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  OpenSearch backup Using Velero For OpenSearch, Verrazzano provides a custom hook that you can use along with Velero while invoking a backup. Due to the nature of transient data handled by OpenSearch, the hook invokes the OpenSearch snapshot APIs to back up data streams appropriately, thereby ensuring that there is no loss of data and avoids data corruption as well.\nThe following example shows a sample Velero Backup API resource that you can create to initiate an OpenSearch backup. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOFapiVersion:velero.io/v1kind:Backupmetadata:name:verrazzano-opensearch-backupnamespace:verrazzano-backupspec:includedNamespaces:- verrazzano-systemlabelSelector:matchLabels:verrazzano-component:opensearchdefaultVolumesToRestic:falsestorageLocation:verrazzano-backup-locationhooks:resources:- name:opensearch-backup-testincludedNamespaces:- verrazzano-systemlabelSelector:matchLabels:statefulset.kubernetes.io/pod-name:vmi-system-es-master-0post:- exec:container:es-mastercommand:- /usr/share/opensearch/bin/verrazzano-backup-hook- -operation- backup- -velero-backup-name- verrazzano-opensearch-backuponError:Failtimeout:10mEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe preceding example backs up the OpenSearch components:\n In this case, you are not backing up the PersistentVolumes directly, rather running a hook that invokes the OpenSearch APIs to take a snapshot of the data. The defaultVolumesToRestic is set to false so that Velero ignores the associated PVCs. In this case, the hook can be pre or post. The command used in the hook requires an operation flag and the Velero backup name as an input. The container on which the hook needs to be run defaults to the first container in the pod. In this case, it’s statefulset.kubernetes.io/pod-name: vmi-system-es-master-0.  After the backup is processed, you can see the hook logs using the velero backup logs command. Additionally, the hook logs are stored under the /tmp folder in the pod.\n OpenSearch backup logs code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # To display the logs from the backup, run the following command $ kubectl logs -n verrazzano-backup -l app.kubernetes.io/name=velero  # Fetch the log file name as shown $ kubectl exec -it vmi-system-es-master-0 -n verrazzano-system -- ls -al /tmp | grep verrazzano-backup-hook | tail -n 1 | awk '{print $NF}'  # To examine the hook logs, exec into the pod as shown, and use the file name retrieved previously $ kubectl exec -it vmi-system-es-master-0 -n verrazzano-system -- cat /tmp/\u003clog-file-name\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   OpenSearch scheduled backups Velero supports a Schedule API that is a repeatable request that is sent to the Velero server to perform a backup for a given cron notation. After the Schedule object is created, the Velero server will start the backup process. Then, it will wait for the next valid point in the given cron expression and run the backup process on a repeating basis.\n OpenSearch restore using Velero For OpenSearch, Verrazzano provides a custom hook that you can use along with Velero to perform a restore operation. Due to the nature of transient data handled by OpenSearch, the hook invokes OpenSearch snapshot APIs to restore data streams appropriately, thereby ensuring there is no loss of data and avoids data corruption as well.\nIf you restore OpenSearch to a different cluster, create a Velero BackupStorageLocation resource in the new cluster that points to the same backup storage location configured in the original cluster. This ensures that the Velero resources created by the original cluster’s backup are automatically synced to the new cluster. Once the sync completes, you will be able to access the backup from the original cluster on the new cluster. It is recommended to configure the BackupStorageLocation on the new cluster as read-only by setting accessMode to ReadOnly in the BackupStorageLocation spec. This ensures that the backup in the object store is not modified from the new cluster. For more information, see Backup Storage Location in the Velero documentation.\nTo initiate an OpenSearch restore operation, first delete the existing OpenSearch cluster running on the system and all related data.\n  Scale down the Verrazzano Monitoring Operator. This is required because the operator manages the life cycle of the OpenSearch cluster, so scaling it down to zero ensures that it does not interfere with the restore operation. The restore operation also ensures that this operator is scaled back up to return the system to its previous state. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl scale deploy -n verrazzano-system verrazzano-monitoring-operator --replicas=0    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the OpenSearch components. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # These are sample commands to demonstrate the OpenSearch restore process $ kubectl delete sts -n verrazzano-system -l verrazzano-component=opensearch $ kubectl delete deploy -n verrazzano-system -l verrazzano-component=opensearch $ kubectl delete pvc -n verrazzano-system -l verrazzano-component=opensearch    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  To perform an OpenSearch restore operation, you can invoke the following example Velero Restore API object. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOFapiVersion:velero.io/v1kind:Restoremetadata:name:verrazzano-opensearch-restorenamespace:verrazzano-backupspec:backupName:verrazzano-opensearch-backupincludedNamespaces:- verrazzano-systemlabelSelector:matchLabels:verrazzano-component:opensearchrestorePVs:falsehooks:resources:- name:opensearch-testincludedNamespaces:- verrazzano-system labelSelector:matchLabels:statefulset.kubernetes.io/pod-name:vmi-system-es-master-0postHooks:- exec:container:es-mastercommand:- /usr/share/opensearch/bin/verrazzano-backup-hook- -operation- restore- -velero-backup-name- verrazzano-opensearch-backupwaitTimeout:30mexecTimeout:30monError:FailEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe preceding example will restore an OpenSearch cluster from an existing backup.\n In this case, you are not restoring PersistentVolumes directly, rather running a hook that invokes the OpenSearch APIs to restore them from an existing snapshot of the data. The restorePVs is set to false so that Velero ignores restoring PVCs. The command used in the hook requires an -operation flag and the Velero backup name as an input. The postHook will invoke the OpenSearch APIs that restore the snapshot data. The container on which the hook needs to be run defaults to the first container in the pod. In this case, it’s statefulset.kubernetes.io/pod-name: vmi-system-es-master-0.  NOTE: The hook needs to be a postHook because it must be applied after the Kubernetes objects are restored.\n  Wait for all the OpenSearch pods to be in the RUNNING state. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl wait -n verrazzano-system --for=condition=ready pod -l verrazzano-component=opensearch --timeout=600s  pod/vmi-system-es-data-0-6f49bdf6f5-fc6mz condition met  pod/vmi-system-es-data-1-8f8785994-4pr7n condition met  pod/vmi-system-es-data-2-d5f569d98-q8p2v condition met  pod/vmi-system-es-ingest-6ddd86b9b6-fpl6j condition met  pod/vmi-system-es-ingest-6ddd86b9b6-jtmrh condition met  pod/vmi-system-es-master-0 condition met  pod/vmi-system-es-master-1 condition met  pod/vmi-system-es-master-2 condition met    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  After the restore operation is processed, you can see the hook logs using the velero restore logs command. Additionally, the hook logs are stored under the /tmp folder in the pod.\n OpenSearch restore logs code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # To display the logs from the restore, run the following command $ kubectl logs -n verrazzano-backup -l app.kubernetes.io/name=velero  # Fetch the log file name as shown $ kubectl exec -it vmi-system-es-master-0 -n verrazzano-system -- ls -al /tmp | grep verrazzano-restore-hook | tail -n 1 | awk '{print $NF}'  # To examine the hook logs, exec into the pod as shown, and use the file name retrieved previously $ kubectl exec -it vmi-system-es-master-0 -n verrazzano-system -- cat /tmp/\u003clog-file-name\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   OpenSearch restore in an existing cluster using OpenSearch API OpenSearch restore using Velero typically is used for disaster recovery scenarios where you need to restore the entire cluster. But, if you want to restore the OpenSearch data within an already existing cluster, then you can use the OpenSearch API.\nAssuming that you have previously created a backup using Velero, within the same cluster that would have completed the repository registration, and want to solely restore the OpenSearch data from that specific backup, run the following commands.\nTo get the registered repositories: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # To see all snapshot repositories$ GET _snapshot/_all   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nTo get all the snapshots in the registered repository: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # To see all snapshots in a repository$ GET _snapshot/\u003cbackup_repository_name\u003e/_all   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nTo restore the specific snapshot: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # To restore the existing snapshot, run the following command$ POST _snapshot/\u003cbackup_repository_name\u003e/\u003csnapshot-name\u003e/_restore   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  \u003cbackup_repository_name\u003e: The name of the backup repository where your OpenSearch snapshot is stored. Replace \u003cbackup_repository_name\u003e with the name of your backup repository.\n  \u003csnapshot-name\u003e: The name of the OpenSearch snapshot you want to restore. Replace \u003csnapshot-name\u003e with the name of your snapshot.\n  For more information, see OpenSearch Restore in the OpenSearch documentation.\n","categories":"","description":"Back up and restore OpenSearch","excerpt":"Back up and restore OpenSearch","ref":"/docs/backup/opensearch/","tags":"","title":"OpenSearch"},{"body":"","categories":"","description":"Install Verrazzano","excerpt":"Install Verrazzano","ref":"/docs/setup/install/perform/","tags":"","title":"Perform the Installation"},{"body":"You can uninstall Verrazzano using the Verrazzano CLI or with kubectl.\nSee the following respective sections:\n Uninstall using the Verrazzano CLI Uninstall using kubectl  Uninstall using the Verrazzano CLI   Uninstall Verrazzano. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ vz uninstall    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the uninstall operation to complete. The uninstall logs from the Verrazzano platform operator will be streamed to the command window until the uninstall operation has completed or until the default timeout (20m) has been reached.\nThe following is an example of the output: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  Uninstalling Verrazzano 2022-11-22T16:31:20.377Z info Reconciling Verrazzano resource default/verrazzano, generation 2, version 1.4.2 2022-11-22T16:31:20.377Z info Deleting Verrazzano installation 2022-11-22T16:31:20.418Z info Uninstalling components 2022-11-22T16:31:20.418Z info Uninstalling Verrazzano default/verrazzano ...    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Uninstall using kubectl To delete a Verrazzano installation, delete the Verrazzano custom resource you used to install it into your cluster.\nThe following example starts a deletion of a Verrazzano installation in the background and then uses the kubectl logs -f command to tail the output of the pod performing the uninstall operation.\n Get the name of the Verrazzano custom resource. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ MYVZ=$(kubectl get vz -o jsonpath=\"{.items[0].metadata.name}\")    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Delete the Verrazzano custom resource. After the custom resource is deleted, the Verrazzano platform operator completes the uninstall process by removing all of the Verrazzano-related components and resources, which can take some time. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete verrazzano $MYVZ    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  To view the logs during deletion, use the following command: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs -n verrazzano-install \\ -f $(kubectl get pod \\ -n verrazzano-install \\ -l app=verrazzano-platform-operator \\ -o jsonpath=\"{.items[0].metadata.name}\") | grep '^{.*}$' \\ | jq -r '.\"@timestamp\" as $timestamp | \"\\($timestamp) \\(.level) \\(.message)\"'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   For troubleshooting help, see Analysis Advice.\n","categories":"","description":"Uninstall Verrazzano","excerpt":"Uninstall Verrazzano","ref":"/docs/setup/uninstall/uninstall/","tags":"","title":"Perform the Uninstall"},{"body":"It is important to distinguish between updating the Verrazzano platform operator versus upgrading the Verrazzano installation. The platform operator contains the newer component charts and image versions, so it must be updated prior to upgrading the installation. Updating the platform operator has no effect on an existing installation until you initiate the Verrazzano installation upgrade. Currently, there is no way to roll back either the platform operator update or the Verrazzano installation upgrade.\nYou can upgrade Verrazzano using the Verrazzano CLI or with kubectl. See the following respective sections.\nNOTE For optimal functionality, be sure to install or upgrade the CLI version to match the Verrazzano version to which you are upgrading.   Upgrade Verrazzano using the CLI Upgrade using kubectl  Upgrade Verrazzano using the CLI In one simple step, you can upgrade to a specified version of Verrazzano using this command.\n  Update the Verrazzano resource to the desired version.\nTo update to the latest version (default): code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz upgrade    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nTo update to a specific version, where \u003cversion\u003e is the desired version:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz upgrade --version \u003cversion\u003e     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Wait for the upgrade to complete. Upgrade logs will be streamed to the command window until the upgrade has completed or until the default timeout (30m) has been reached.\n  Upgrade using kubectl Upgrading an existing Verrazzano installation is a two-step process:\n Update the Verrazzano platform operator to the Verrazzano release version to which you want to upgrade. Upgrade the Verrazzano installation.  Update the Verrazzano platform operator In order to upgrade an existing Verrazzano installation, you must first update the Verrazzano platform operator.\n  Update the Verrazzano platform operator.\nNOTE: If you are using a private container registry, then to update the platform operator, follow the instructions at Use a Private Registry.\nTo update to the latest version: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://github.com/verrazzano/verrazzano/releases/download/master/verrazzano-platform-operator.yaml     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nTo update to a specific version, where \u003cversion\u003e is the desired version: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # To update to the desired version: $ kubectl apply -f https://github.com/verrazzano/verrazzano/releases/download/\u003cversion\u003e/verrazzano-platform-operator.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the deployment to complete. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl -n verrazzano-install rollout status deployment/verrazzano-platform-operator # Expected response deployment \"verrazzano-platform-operator\" successfully rolled out    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Confirm that the operator pod is correctly defined and running. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl -n verrazzano-install get pods # Sample output NAME READY STATUS RESTARTS AGE verrazzano-platform-operator-59d5c585fd-lwhsx 1/1 Running 0 114s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Upgrade Verrazzano To upgrade the Verrazzano installation, you need to change the version of your installed Verrazzano resource to the version supported by the Verrazzano platform operator.\nNOTE: You may only change the version field during an upgrade; changes to other fields or component configurations are not supported at this time.\nIn one simple step, you can upgrade to a specified version of Verrazzano using this command. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl patch vz example-verrazzano -p '{\"spec\":{\"version\":\"master\"}}' --type=merge    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAlternatively, you can upgrade the Verrazzano installation using the following steps.\n  Update the Verrazzano resource to the desired version.\nTo upgrade the Verrazzano components, you must update the version field in your Verrazzano resource spec to match the version supported by the platform operator to which you upgraded and apply it to the cluster.\nThe value of the version field in the resource spec must be a Semantic Versioning value corresponding to a valid Verrazzano release version.\nTo update the resource, do one of the following:\na. Edit the YAML file you used to install Verrazzano and set the version field to the latest version.\nFor example, to upgrade to master, your YAML file should be edited to add or update the version field. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:example-verrazzanospec:profile:devversion:master   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThen, apply the resource to the cluster (if you have not edited the resource in-place using kubectl edit). code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f example-verrazzano.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  b. Edit the Verrazzano resource directly using kubectl and set the version field directly, for example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl edit verrazzano example-verrazzano # In the resource editor, add or update the version field to \"version: master\", then save.    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the upgrade to complete. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl wait \\ --timeout=30m \\ --for=condition=UpgradeComplete verrazzano/example-verrazzano    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"Upgrade Verrazzano","excerpt":"Upgrade Verrazzano","ref":"/docs/setup/upgrade/perform/","tags":"","title":"Perform the Verrazzano Upgrade"},{"body":"Prepare for the Oracle Cloud Infrastructure installation   Create the OKE cluster using the Oracle Cloud Infrastructure Console or by some other means.\n  Follow the instructions provided by OKE to download the Kubernetes configuration file for your cluster, and set the following ENV variable: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ export KUBECONFIG=\u003cpath to valid Kubernetes config\u003e     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Optional, if your organization requires the use of a private registry to the Docker images installed by Verrazzano, see Use a Private Registry.\n  NOTE: Verrazzano can create network policies that can be used to limit the ports and protocols that pods use for network communication. Network policies provide additional security but they are enforced only if you install a Kubernetes Container Network Interface (CNI) plug-in that enforces them, such as Calico. For an example on OKE, see Installing Calico and Setting Up Network Policies.\nNOTE OCI VCN-Native Pod Networking is now supported with Verrazzano for Kubernetes v1.26 and later. The pod network must be in a private subnet to enable egress. Either place the worker nodes in a private subnet, or place the pod network in a private subnet separate from the worker nodes. For Kubernetes v1.25 and earlier, you must use the flannel overlay network.  Next steps To continue, see the Installation Guide.\n","categories":"","description":"Set up an Oracle Cloud Infrastructure Container Engine for Kubernetes (OKE) cluster for Verrazzano","excerpt":"Set up an Oracle Cloud Infrastructure Container Engine for Kubernetes (OKE) cluster for Verrazzano","ref":"/docs/setup/install/prepare/platforms/oci/oci/","tags":"","title":"Prepare an Oracle Cloud Infrastructure Container Engine for Kubernetes (OKE) Cluster"},{"body":"Prometheus is a system for monitoring cloud native applications and is used by Verrazzano to monitor applications. Prometheus is used in Verrazzano to collect system performance metrics and metrics for applications deployed or managed by Verrazzano. Prometheus analyzes the metrics and provides visualization using Grafana.\nCustomize Prometheus configuration Verrazzano installs Prometheus components, including Prometheus Operator and Prometheus, using the kube-prometheus-stack Helm chart. You can customize the installation configuration using Helm overrides specified in the Verrazzano custom resource. For example, the following Verrazzano custom resource overrides the number of Prometheus replicas. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: custom-prometheus spec: profile: prod components: prometheusOperator: overrides: - values: prometheus: prometheusSpec: replicas: 3    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor more information about setting component overrides, see Installation Overrides.\nFor information about all the overrides supported by the kube-prometheus-stack chart in Verrazzano, see values.yaml.\nFor instructions to customize persistent storage settings for Prometheus, see Customize Persistent Storage.\nConfigure data retention settings Verrazzano configures Prometheus with a default data retention setting of 10 days. The rate of metrics data collected depends on many factors, including the number of monitors, the monitor scrape intervals, and the number of metrics returned by each monitor.\nWhen using persistent storage for Prometheus, it is possible to consume all storage. If Prometheus uses all available persistent storage, then queries return no data and new metrics cannot be saved. You can customize the persistent storage settings, and change the data retention days and configure a maximum retention size. When configuring retention size, a good rule of thumb is to set the value to no more than 85 percent of the persistent storage size.\nThe following example configures Prometheus to store at most three days or 40 GB of metrics data.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: custom-prometheus spec: profile: prod components: prometheusOperator: overrides: - values: prometheus: prometheusSpec: retention: 3d retentionSize: 40GB    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"Customize Prometheus to monitor Verrazzano","excerpt":"Customize Prometheus to monitor Verrazzano","ref":"/docs/observability/monitoring/configure/prometheus/","tags":"","title":"Prometheus"},{"body":"Rancher maintains many configurations, like user credentials and cluster credentials, as ConfigMaps and namespace values. The rancher-backup Operator provides a seamless way to back up and restore Rancher installations, configuration, and data.\n rancher-backup Operator prerequisites Rancher backup Rancher restore  rancher-backup Operator prerequisites Before proceeding with a Rancher back up or restore operation, the following details should be kept handy:\n Object store bucket name.  An Amazon S3 compatible object storage bucket. This can be an Oracle Cloud Object Storage bucket in any compartment of your Oracle Cloud tenancy.  For reference, make a note of the bucket name and tenancy name. For more information about creating a bucket with Object Storage, see Managing Buckets.   For private clouds, enterprise networks, or air-gapped environments, this could be MinIO or an equivalent object store solution.   Object store prefix name. This will be a child folder under the bucket, which the backup component creates. Object store region name. Object store signing key.  A signing key, which is required to authenticate with the Amazon S3 compatible object store; this is an Access Key/Secret Key pair. In Oracle Cloud Infrastructure, you or your administrator creates the Customer Secret Key.  An associated Access Key will be generated for the secret key. To create a Customer Secret Key, see Customer Secret Key.      To back up or restore Rancher, you must first enable rancherBackup.\n  The following configuration shows you how to enable rancherBackup. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f -\u003c\u003cEOFapiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:example-verrazzanospec:profile:devcomponents:rancherBackup:enabled:trueEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  For rancher-backup, the pods will be created in the cattle-resources-system namespace. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   # Sample of pods running after enabling the rancherBackup component   $ kubectl get pod -n cattle-resources-system  NAME READY STATUS RESTARTS AGE  rancher-backup-5c4b985697-xw7md 1/1 Running 0 2d4h    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Rancher requires a secret to communicate with the S3 compatible object store. So, in the namespace verrazzano-backup, create a Kubernetes secret rancher-backup-creds. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl create secret generic -n \u003cbackup-namespace\u003e \u003csecret-name\u003e --from-literal=accessKey=\u003caccesskey\u003e --from-literal=secretKey=\u003csecretKey\u003e The following is an example:\n $ kubectl create secret generic -n verrazzano-backup rancher-backup-creds --from-literal=accessKey=\"s5VLpXwa0xNZQds4UTVV\" --from-literal=secretKey=\"nFFpvyxpQvb0dIQovsl0\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Rancher backup The rancher-backup Operator creates the backup file, in *.tar.gz format, on the S3 compatible object store.\n To initiate a Rancher backup, create the following example custom resource YAML file that uses an Amazon S3 compatible object store as a back end. The operator uses the credentialSecretNamespace value to determine where to look for the Amazon S3 backup secret. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOFapiVersion:resources.cattle.io/v1kind:Backupmetadata:name:\u003crancher-backup-name\u003espec:storageLocation:s3:credentialSecretName:\u003crancher backup credential name\u003ecredentialSecretNamespace:\u003cnamespace where credential object was created\u003ebucketName:\u003cobject store bucket. This must be exist as noted in pre-requisites section\u003efolder:\u003cfolder name. This folder will be auto created\u003eregion:\u003cregion name where bucket exists\u003eendpoint:\u003cobject store endpoint configuration\u003eresourceSetName:rancher-resource-setEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   NOTE: In Step 3. of the example in the prerequisites section, you created the secret in the verrazzano-backup namespace.\nThe following is an example:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOFapiVersion:resources.cattle.io/v1kind:Backupmetadata:name:rancher-backup-testspec:storageLocation:s3:credentialSecretName:rancher-backup-credscredentialSecretNamespace:verrazzano-backupbucketName:myvz-bucketfolder:rancher-backupregion:us-phoenix-1endpoint:mytenancy.compat.objectstorage.us-phoenix-1.oraclecloud.comresourceSetName:rancher-resource-setEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The *.tar.gz file is stored in a location configured in the storageLocation field. When the backup is complete, then the rancher-backup Operator creates a file on the S3 compatible object store.\nYou can retrieve the backed up file name, as shown: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl get backups.resources.cattle.io rancher-backup-test  NAME LOCATION TYPE LATEST-BACKUP RESOURCESET AGE STATUS  rancher-backup-test One-time rancher-615034-957d182d-44cb-4b81-bbe0-466900049124-2022-11-14T16-42-28Z.tar.gz rancher-resource-set 54s Completed    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   Rancher scheduled backups To implement scheduled Rancher backups, see Backup Configuration in the Rancher documentation.\nRancher restore During the restore operation, Rancher ensures that it recreates all the CRDs related to Rancher and configurations. Restoring Rancher is done by creating a custom resource that indicates to rancherBackup to start the restore process.\n  To initiate a Rancher restore operation, create the following example custom resource YAML file. When a Restore custom resource is created, the operator accesses the backup *.tar.gz file specified and restores the application data from that file. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOFapiVersion:resources.cattle.io/v1kind:Restoremetadata:name:s3-restorespec:backupFilename:rancher-615034-957d182d-44cb-4b81-bbe0-466900049124-2022-11-14T16-42-28Z.tar.gzstorageLocation:s3:credentialSecretName:rancher-backup-credscredentialSecretNamespace:verrazzano-backupbucketName:myvz-bucketfolder:rancher-backupregion:us-phoenix-1endpoint:mytenancy.compat.objectstorage.us-phoenix-1.oraclecloud.comEOF   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The rancher-backup Operator scales down the Rancher deployment during the restore operation and scales it back up after the restoration completes.\nResources are restored in this order:\n Custom Resource Definitions (CRDs) Cluster-scoped resources Namespace resources  NOTE: The backupFilename is retrieved from the Rancher backup created previously.\n  Wait for all the Rancher pods to be in the RUNNING state. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl wait -n cattle-system --for=condition=ready pod -l app=rancher --timeout=600s  pod/rancher-69976cffc6-bbx4p condition met  pod/rancher-69976cffc6-fr75t condition met  pod/rancher-69976cffc6-pcdf2 condition met    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"Back up and restore Rancher","excerpt":"Back up and restore Rancher","ref":"/docs/backup/rancher/","tags":"","title":"Rancher"},{"body":"","categories":"","description":"Register managed clusters in a multicluster environment","excerpt":"Register managed clusters in a multicluster environment","ref":"/docs/setup/mc-install/register/","tags":"","title":"Register Managed Clusters"},{"body":"v1.6.4 Component version updates:  Istio v1.17.2 Rancher v2.7.5 Kiali v1.66.1 CAPOCNE v1.7.0  Fixes:  Fixed an issue with provisioning OCNE workload clusters with the Rancher UI when using Let’s Encrypt staging certificates. Fixed issues where upgrade would not successfully occur if pods had errors. Fixed an issue with upgrading the Verrazzano resource in the Reconciling state.  1.6.3 Enhancements:  vz bug-report now captures Cluster API resources and Rancher cluster-related resources. vz analyze now checks for issues with Cluster API resources and Rancher cluster-related resources.  Fixes:  Fixed an issue with Fluent Bit Parser not getting registered correctly.  1.6.2 Enhancements:  Verrazzano analysis tooling enhancements.  Fixes:  Fixed an issue with vz upgrade requiring --version when a manifest file was specified. Fixed an issue with vz install and upgrade processing CAPI images in a disconnected environment. Fixed an issue with image format on pulls that prevented Verrazzano installation on AKS.  v1.6.1 Enhancements:  Now, you can create a new virtual cloud network when creating OCNE clusters from the console.  Component version updates:  WebLogic Kubernetes Operator v4.1.0 WebLogic Monitoring Exporter v2.1.4  v1.6.0 Features:  Added support for creating OCNE clusters from the console. Added Thanos, which supports high availability and long-term metrics storage on top of Prometheus. Added Fluent Operator, which, if you enable it, allows the use of Fluent Bit for log processing.  Enhancements:  Enhanced the Verrazzano CLI to support installing and upgrading from a private registry and in disconnected environments. Now, you can use customer-managed cert-manager instances with Verrazzano. Added support for Kubernetes v1.25 and v1.26.  Component version updates:  Argo CD v2.7.2 Coherence Operator v3.2.10 Jaeger v1.42.0 kube-state-metrics v2.8.2 NGINX Ingress Controller v1.7.1 Prometheus Operator v0.64.1 Prometheus v2.44.0 Rancher v2.7.3  Rancher Partner charts and RKE2 charts are no longer bundled.   Rancher Backup Operator v3.1.0 WebLogic Kubernetes Operator v4.0.6 WebLogic Monitoring Exporter v2.1.3  Components added:  cert-manager webhook for Oracle Cloud Infrastructure DNS v0.1.0 Cluster API v1.4.2 Fluent Operator v2.2.0 Thanos v0.30.2  Fixes:  Disabled the startupapicheck job in cert-manager startup. Fixed an issue with Rancher SSO via Keycloak when using a custom CA for Verrazzano certificates. Fixed an issue where not defining the replicas for default OpenSearch node pools in the Verrazzano CR caused the pods to terminate. Updated the base image and other component images to resolve CVEs.  Known issues and workarounds:  Systemd journal logs are not collected on some platforms. The systemd plugin for Fluentd cannot read systemd journal files on Kubernetes nodes that use newer versions of systemd. This is known to impact the default node images of kind for Kubernetes 1.24 and later, Oracle Linux 9, and any other Kubernetes cluster nodes running on an operating system that has systemd version 246 or later. Registration of managed clusters using the Verrazzano console is not working in disconnected environments. Use the Kubernetes Custom Resources method instead.  Previous Release Information v1.5.5 Fixes:\n Fixed issues with Rancher certificates that were out of sync or expired. Fixed issues with certificates in multicluster environments. Fixed issue where Istio was incorrectly waiting for disabled deployments. Fixed upgrade issues in the command-line tool (CLI). Fixed issues in the Verrazzano validating webhook.  v1.5.4 Component version updates:\n Rancher v2.7.3 WebLogic Kubernetes Operator v4.0.7 WebLogic Monitoring Exporter v2.1.4  Fixes:\n Fixed an issue with Argo CD to allow the policy.csv field in the argocd-rbac-cm ConfigMap to be overridden. Fixed an issue with Rancher SSO using Keycloak when using a custom CA for Verrazzano certificates. Fixed an issue where not defining the replicas for default OpenSearch node pools in the Verrazzano CR caused the pods to terminate.  v1.5.3 Features:\n The vz CLI uninstall command now prompts you to confirm before continuing with the uninstall operation. You can override the prompt using the flag --skip-confirmation or shorthanded as -y.  Component version updates:\n Jaeger v1.42.0 WebLogic Kubernetes Operator v4.0.6 WebLogic Monitoring Exporter v2.1.3  Fixes:\n Disabled the startupapicheck job during cert-manager startup. Fixed an installation issue related to incorrect ingress names in certain configurations. Fixed an Argo CD issue to reuse Rancher auth tokens when applicable.  v1.5.2 Component version updates:\n Rancher 2.7.1  Fixes:\n Fixed vz CLI to allow specified version numbers to start without a leading “v”. Fixed an upgrade failure where a validation webhook was called when upgrading from v1.5.0. This failure occurred when using v1.4.x of the vz CLI.  v1.5.1 Component version updates:\n WebLogic Kubernetes Operator v4.0.5 WebLogic Monitoring Exporter v2.1.2  Fixes:\n Fixed the query for the Service variable in the WebLogic Grafana dashboard. Fixed upgrade issue with PVCs getting lost when OpenSearch master node’s StatefulSet was occasionally deleted during upgrade. In the case of a plug-in installation failure, fixed the OpenSearch plug-in installation to fail only the master nodes. Updated base and other images for bugs and security.  v1.5.0 Features:\n Added Argo CD, which can be used as a declarative, GitOps continuous delivery tool for deploying applications. Separated Verrazzano Platform Operator and Verrazzano platform webhooks into separate deployments for scalability and resiliency. Added component availability to the Verrazzano custom resource, now displayed in the resource’s status printout. Simplified Verrazzano managed cluster registration, which now can be done entirely from the Rancher console, including the ability to configure which Rancher clusters are treated as Verrazzano managed clusters. Grafana dashboards now are organized in folders. Added Grafana dashboards for Istio, JVM Micrometer, user applications, and Verrazzano system health.  Components added:\n Argo CD v2.5.3 MySQL Operator v8.0.32-2.0.8  Component version updates:\n Coherence Operator v3.2.9 MySQL Server v8.0.32 oam-kubernetes-runtime v0.3.3 NGINX Ingress Controller v1.3.1 Prometheus v2.38.0 Prometheus Operator v0.59.1 External DNS v0.12.2 kube-state-metrics v2.6.0 cert-manager v1.9.1 Prometheus Adapter for Kubernetes Metrics APIs v0.10.0 Grafana v7.5.17 WebLogic Kubernetes Operator v4.0.4 WebLogic Monitoring Exporter v2.1.0 OpenSearch v2.3.0 OpenSearch Dashboards v2.3.0 Istio v1.15.3 Jaeger v1.37.0 Kiali v1.57.1 Keycloak v20.0.1  Fixes:\n Updated base and other images for bugs and security. Fixed intermittent Rancher upgrade failures with errors stating that the available chart version is less than the minimum chart version for Rancher system charts. Fixed Fluentd configuration to prevent duplication of logs in OpenSearch on Fluentd restarts or upgrade. Fixed I/O timeout errors while installing Verrazzano on an RKE2 cluster. Fixed IngressTrait JWT related issues to allow multiple paths where one path has RequestPrincipals and the other doesn’t. Fixed IngressTrait JWT so that RequestPrincipals with no paths are allowed. Fixed IngressTrait related AuthorizationPolicy cleanup when an application is deleted.  v1.4.6 Enhancements:\n Verrazzano CLI tool validates that commands are entered correctly.  Fixes:\n Fixed issues that occurred when Let’s Encrypt was being used with Rancher. Fixed issues regarding Rancher certificates that were out of sync or expired. Fixed issues relating to noisy Keycloak logs.  v1.4.5 Fixes:\n Updated base and other images for issues and security.  Component version updates:\n WebLogic Kubernetes Operator v4.0.6 WebLogic Monitoring Exporter v2.1.3  v1.4.4 Fixes:\n Fixed IngressTrait JWT related issues to allow multiple paths where one path has requestPrincipals and the other doesn’t. Fixed IngressTrait JWT so that requestPrincipals with no paths are allowed. Fixed IngressTrait related AuthorizationPolicy cleanup when application is deleted. Fixed the query for the Service variable in WebLogic Grafana dashboard. Fixed issues with Keycloak startup due to stale JGROUPSPING entries after pod restarts.  Component version updates:\n WebLogic Kubernetes Operator v3.4.6 WebLogic Monitoring Exporter v2.1.2  v1.4.3 Fixes:\n Fixed unnecessary restart of user applications during upgrade from a previous Verrazzano release. Fixed Fluentd configuration to prevent duplication of logs in OpenSearch on Fluentd restart or upgrade. Fixed WebLogic Grafana dashboards to get the service label value correctly and display data properly. Fixed I/O timeout errors installing Verrazzano on an RKE2 cluster. Fixed an issue that prevented Persistent Volumes from being deployed as part of an OAM Component. Fixed default Helidon workload service so that the service ports don’t automatically get named with the prefix tcp-. Fixed the CLI vz analyze command so that it works with earlier Verrazzano releases. Added support for the installation of non-bundled OpenSearch plug-ins. Added serviceTemplate to VerrazzanoHelidonWorkload to allow users to customize the Helidon workload service. Added support for the javaOpts argument for the OpenSearch JVM.  Component version updates:\n Grafana v7.5.17 WebLogic Kubernetes Operator v3.4.5 WebLogic Monitoring Exporter v2.1.1  v1.4.2 Fixes:\n In OpenSearch Dashboards, resolved a redirect issue to Keycloak. For the managed cluster profile, resolved an issue where Keycloak authentication integration was not identified as enabled in Rancher. Resolved an intermittent Rancher issue where the available chart version was lower than the minimum chart version. Updated base and other images to resolve CVEs.  v1.4.1 Fixes:\n Updated OpenSearch heap memory settings. Fixed the WebLogic and Helidon Grafana dashboards so that they display data properly. Updated base and other images to resolve CVEs.  v1.4.0 Features:\n Added the Verrazzano command-line tool (CLI) for interactive installation, upgrade, uninstall, cluster analysis, and bug reporting. Added backup and restore functionality using Velero and rancher-backup. Added Prometheus Operator based metrics collection (using ServiceMonitors and PodMonitors) for both Verrazzano system components and applications. Added a new API version for the Verrazzano resource, install.verrazzano.io/v1beta1. See the Deprecated API Migration Guide. Verrazzano distribution tar.gz artifacts now include the new CLI binaries and tooling. Replaced Elasticsearch and Kibana with OpenSearch and OpenSearch dashboards (pods, URLs, CRD fields). Improved Rancher integration.  Added the Rancher UI-based Verrazzano console. Keycloak SSO authentication and authorization is configured by default. OCI drivers now are enabled by default and ready-to-use.   kube-prometheus-stack components now are enabled by default. Improved uninstall resiliency and performance. Added support for OCNE 1.5.x. Added support for Kubernetes v1.24.  Component version updates:\n Coherence Operator v3.2.6 Istio v1.14.3 Jaeger v1.34.1 Rancher v2.6.8  Components added:\n Rancher Backup Operator v2.1.3 Velero v1.8.1 Velero Plugin For AWS v1.4.1  Components removed:\n Config Map Reload  Fixes:\n Resolved an issue where Verrazzano started an installation, immediately after an upgrade, but before all the components were ready. Resolved an issue where application pods that required an Istio sidecar did not restart after an upgrade. Resolved unnecessary temporary file cleanup for Helm overrides after installation or upgrade. Resolved an issue with Verrazzano resource status conditions being appended as duplicates instead of updated. Resolved an issue where Verrazzano Monitoring Operator was querying OpenSearch before it was ready. Resolved an issue where Verrazzano Platform Operator transitioned to a ready condition before all webhook context paths were ready. Updated base and other images to resolve CVEs.  v1.3.8 Fixes:\n Fixed a Rancher upgrade issue that prevented Rancher from upgrading Fleet, GitJob, and Rancher webhook. Updated images to resolve CVEs.  v1.3.7 Fixes:\n Corrected the Kiali 1.42 Helm charts. Resolved an issue with resizing OpenSearch storage volumes when using a storage class that supports volume expansion.  v1.3.6 Fixes:\n Resolved an issue in OpenSearch where user provided JVM heap size setting was not used.  v1.3.5 Component version updates:\n WebLogic Kubernetes Operator v3.4.3  v1.3.4 Fixes:\n Updated the Kiali image to fix CVEs. Resolved an issue with Prometheus volume attachment during upgrade.  Component version updates:\n Rancher v2.6.6  v1.3.3 Fixes:\n Fixed AuthProxy to emit access logs. Fixed Verazzano Console intermittent failures of timing out loading application details.  Component version updates:\n Istio v1.13.5  v1.3.2 Fixes:\n Fixed Fluentd pattern to correctly parse severity value from WebLogic logs. Fixed IngressTrait to remove the deleted IngressTrait entries from the Istio Gateway.  v1.3.1 Fixes:\n Resolved an issue where the Verrazzano uninstall deleted additional namespaces when deleting Rancher components. Fixed IngressTrait controller to support Services as component workloads. Added liveness probe for the AuthProxy NGINX server. Added support for dynamic configuration overrides to Verrazzano components from various monitored sources, including ConfigMaps, Secrets, and Values referenced in the Verrazzano CR. Added support for JWT authentication and authorization policy specification for applications. Added support for Prometheus Service Monitor and Pod Monitor CRs deployed using Prometheus Operator. Updated Keycloak image to fix CVEs.  v1.3.0 Features:\n Post-installation updates: configurations for DNS, certificate management, logging, ingress, and OpenSearch cluster configuration can be updated after a Verrazzano installation. Added Jaeger Distributed Tracing. Support for Kubernetes v1.22 and v1.23. kube-prometheus-stack components are now part of Verrazzano and can be enabled, these include Prometheus Operator, Alertmanager, kube-state-metrics, and such.  Component version updates:\n cert-manager v1.7.1 Coherence Operator 3.2.5 Istio v1.13.2 Jaeger Operator v1.32.0 Kiali v1.42.0 NGINX Ingress Controller v1.1.1 Node Exporter v1.3.1 Prometheus v2.34.0 Rancher v2.6.4 WebLogic Kubernetes Operator v3.4.0  Components added:\n Alertmanager v0.24.0 kube-state-metrics v2.4.2 Prometheus Adapter v0.9.1 Prometheus Operator v0.55.1 Prometheus Pushgateway v1.4.2  Fixes:\n Resolved an issue in the console UI with displaying multicluster applications when a managed cluster is partially registered. Resolved an issue in the console UI with the display of the Bob’s Books sample WebLogic application. Resolved an issue with exporting WebLogic application metrics in a private registry installation of Verrazzano.  v1.2.2 Fixes:\n Resolved an issue with the Grafana Dashboards for Helidon in multicluster setup. Resolved an issue with naming the Istio Authorization Policy for the AuthProxy. Resolved an issue with AuthProxy pods being evicted due to ephemeral storage. Resolved an issue with the length of the cookie TTL in the ingress trait.  v1.2.1 Fixes:\n Resolved an issue with upgrade when configured to use a private registry. Resolved an issue with the public image of WebLogic Monitoring Exporter being used when a private registry is configured. Resolved an issue with intermittent upgrade failures while upgrading from Verrazzano v1.0.2 to v1.2.0. Resolved an issue with the console UI when viewing WebLogic applications. Resolved an issue with the console UI when displaying an application that is targeted to a managed cluster that has not completed the registration process. Resolved an issue with the console UI not displaying the traits for an OAM application. Resolved an issue with the verrazzano-application-operator pod continually crashing and restarting. Resolved an issue with the WebLogic workload logHome value being ignored and always using /scratch/log. Resolved an issue with Prometheus not scraping metrics from Verrazzano managed namespaces that do not have Istio injection enabled. The Verrazzano operators no longer have watches on resources in the kube-system namespace. Updated Keycloak image to address CVEs.  Known Issues:\n Importing a Kubernetes v1.21 cluster into Rancher might not work properly. Rancher does not currently support Kubernetes v1.21.  v1.2.0 Features:\n Logging enhancements:  Added support for Oracle Cloud Infrastructure Logging integration. Replaced Elasticsearch and Kibana with OpenSearch and OpenSearch Dashboard. Updated OpenSearch prod profile data node configuration to 3 replicas. Enhanced Fluentd parsing/filtering rules for Verrazzano system logs.   Added support for using instance_principal authorization with using Oracle Cloud Infrastructure DNS. Added support for metrics integration with non-OAM applications. Added support for scaling Istio gateways and setting affinity. Added support for scaling Verrazzano AuthProxy and setting affinity. Component version updates:  External DNS v0.10.2. MySQL v8.0.28. Grafana v7.5.11. Prometheus v2.31.1. OpenSearch v1.2.3 (replaces Elasticsearch). OpenSearch Dashboards v1.2.0 (replaces Kibana). WebLogic Kubernetes Operator v3.3.7.    Fixes:\n Fixed Keycloak issue creating incorrect verrazzano-monitors group on installation. Fixed Verrazzano failing to uninstall in a private registry configuration due to a missing Rancher image. Fixed Rancher installation when tls-ca-additional secret is not present. Fixed OpenSearch parsing errors of trait field. Fixed Custom CA certificates support. Fixed issue requeuing unsupported traits in the Verrazzano Application Operator, and updated the OAM Operator. Aligned Helidon workload service port names with Istio conventions to avoid protocol defaulting to TCP in all cases. Added ability to set a DestinationRule with HTTP Cookie for session affinity.  Known Issues:\n Importing a Kubernetes v1.21 cluster into Rancher might not work properly. Rancher does not currently support Kubernetes v1.21.  v1.1.2 Fixes:\n Fixed installation to create verrazzano-monitors group correctly. Fixed installation to enable network access to Prometheus for Kiali. Updated Spring Boot example image to address CVEs. Updated Kibana image to address CVEs. Updated Elasticsearch image to address CVEs. Fixed Verrazzano failing to install when specifying a custom CA certificate. Updated Keycloak image to address CVEs. Fixed Verrazzano failing to install when the spec.components.certManager.certificate.acme.environment field was set to production in the Verrazzano CR. Added support for using private DNS and instance principals with Oracle Cloud Infrastructure DNS. Fixed Verrazzano failing to uninstall in a private registry configuration due to a missing Rancher image. Updated Verrazzano to use the Rancher v2.5.9 Helm chart.  Known Issues:\n Importing a Kubernetes v1.21 cluster into Rancher might not work properly. Rancher does not currently support Kubernetes v1.21.  v1.1.1 Fixes:\n Elasticsearch and Keycloak images were updated to address CVEs. Updated WebLogic Kubernetes Operator version to 3.3.7. Minor bug fixes including updating Elasticsearch logging to avoid type collisions. Improved cluster-dump behavior when capturing logs. Rancher namespace is now created by default.  Known Issues:\n Importing a Kubernetes v1.21 cluster into Rancher might not work properly. Rancher does not currently support Kubernetes v1.21.  v1.1.0 Fixes:\n Added support for Kiali. Simplified the placement of multicluster resources. Improved the performance of installing Verrazzano. Added support for external Elasticsearch. Improvements to system functions, including the authenticating proxy. Added support in the LoggingTrait to customize application logging. Fixed ability to register a managed cluster with Rancher when configured to use LetsEncrypt staging certificates. Fixed Elasticsearch status yellow due to unassigned shards. Added support for Kubernetes 1.21, dropped support of Kubernetes 1.18. Updated several installed and supported Software Versions.  Known Issues:\n Importing a Kubernetes v1.21 cluster into Rancher might not work properly. Rancher does not currently support Kubernetes v1.21.  v1.0.4 Fixes:\n Elasticsearch and Spring Boot images were updated to consume log4j 2.16, to address CVE-2021-44228/CVE-2021-45046. Keycloak image was updated to address vulnerabilities. Minor bug fixes including fixes for capitalization in user-visible messages.  v1.0.3 Fixes:\n Fix to use load balancer service external IP address for application ingress when using an external load balancer and wildcard DNS. Fixed scraping of Prometheus metrics for WebLogic workloads on managed clusters. Rebuilt several component images to address known issues. Updated to the following versions:  Grafana 6.7.4. WebLogic Kubernetes Operator 3.3.3.    v1.0.2 Fixes:\n Updated CoreDNS to version 1.6.2-1. Updated Keycloak to version 10.0.2. Updated WebLogic Kubernetes Operator to version 3.3.2. Updated Oracle Linux image to version 7.9. Rebuilt several component images to address known issues. Fixes/improvements for the analysis tool, including support for diagnosing load balancer limit reached issues. Fixes/improvements for the install/upgrade process, including:  Install/upgrade jobs now run in the verrazzano-install namespace. Added Rancher registration status to the VerrazzanoManagedCluster status. Updated OKE troubleshooting URL in installation log. Fixed ExternalIP handling during Istio install.   Fixed Elasticsearch status yellow due to unassigned_shards. Webhook now disallows multicluster resources that are not in a VerrazzanoProject namespace.  v1.0.1 Fixes:\n Updated to the following versions:  WebLogic Kubernetes Operator v3.3.0. Coherence Operator v3.2.1. In the Analysis Tool, kubectl v1.20.6-2.   Ensured ConfigMaps are deleted during uninstall. Fixed logging pattern match issue for OKE Kubernetes v1.20.8 clusters. Fixed multicluster log collection for Verrazzano installations using LetsEncrypt certificates. Fixed console UI display bugs for multicluster applications. Fixed a bug where API keys generated by the Oracle Cloud Infrastructure Console were not working correctly.  v1.0.0 Features: Updated to Rancher v2.5.9.\nv0.17.0 Features:\n Allow Verrazzano Monitoring Instance (VMI) replicas and memory sizes to be changed during installation for both dev and prod profiles. When installing Verrazzano on OKE, the OKE-specific Fluentd extraVolumeMounts configuration is no longer required. Updated to WebLogic Kubernetes Operator v3.2.5.  Fixes:\n During uninstall, delete application resources only from namespaces which are managed by Verrazzano. During upgrade, honor the APP_OPERATOR_IMAGE override. Fixed Keycloak installation failure when Prometheus is disabled. Allow empty values for Helm overrides in config.json.  v0.16.0 Features:\n Provided options to configure log volume/mount of the log collector, Fluentd, and pre-configured profiles. Automatically enabled metrics and log capture for WebLogic domains deployed in Verrazzano. Added security-related data/project YAML files to the Verrazzano Console, under project details. Updated to WebLogic Kubernetes Operator v3.2.4.  Fixes:\n Added a fix for default metrics traits not always being injected into the appconfig. Updated the timestamp in WebLogic application logs so that the time filter can be used in Kibana. Corrected the incorrect podSelector in the node exporter network policy. Fixed the DNS resolution issue due to the missing cluster section of the coredns configmap. Stability improvements for the platform, tests, and examples. Renamed the Elasticsearch fields in a multicluster registration secret to be consistent.  v0.15.1 Features:\n Allow customization of Elasticsearch node sizes and topology during installation. If runtimeEncryptionSecret, specified in the WebLogic domain spec, does not already exist, then create it. Support overrides of persistent storage configuration for Elasticsearch, Kibana, Prometheus, Grafana, and Keycloak.  Known Issues:\n After upgrade to 0.15.1, for Verrazzano Custom Resource installed on Oracle Cloud Infrastructure Container Engine for Kubernetes (OKE), the Fluentd DaemonSet in the verrazzano-system namespace cannot access logs. Run following command to patch the Fluentd DaemonSet and correct the issue: kubectl patch -n verrazzano-system ds fluentd --patch '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\": \"fluentd\",\"volumeMounts\":[{\"mountPath\":\"/u01/data/\",\"name\":\"extravol0\",\"readOnly\":true}]}],\"volumes\":[{\"hostPath\":{\"path\":\"/u01/data/\",\"type\":\"\"},\"name\":\"extravol0\"}]}}}}'   v0.15.0 Features:\n Support for private container registries. Secured communication between Verrazzano resources using Istio. Updated to the following versions:  cert-manager v1.2.0. Coherence Operator v3.1.5. WebLogic Kubernetes Operator v3.2.3. Node Exporter v1.0.0. NGINX Ingress Controller v0.46. Fluentd v1.12.3.   Added network policies for Istio.  Fixes:\n Stability improvements for the platform, tests, and examples. Several fixes for scraping Prometheus metrics. Several fixes for logging and Elasticsearch. Replaced keycloak.json with dynamic realm creation. Removed the LoggingScope CRD from the Verrazzano API. Fixed issues related to multicluster resources being orphaned.  v0.14.0 Features:\n Multicluster support for Verrazzano. Now you can:  Register participating clusters as VerrazzanoManagedClusters. Deploy MutiClusterComponents and MultiClusterApplicationConfigurations. Organize multicluster namespaces as VerrazzanoProjects. Access MultiCluster Components and ApplicationConfigurations in the Verrazzano Console UI.   Changed default wildcard DNS from xip.io to nip.io. Support for OKE clusters with private endpoints. Support for network policies. Now you can:  Add ingress-NGINX network policies. Add Rancher network policies. Add NetworkPolicy support to Verrazzano projects. Add network policies for Keycloak. Add platform operator network policies. Add network policies for Elasticsearch and Kibana. Set network policies for Verrazzano operators, Console, and API proxy. Add network policies for WebLogic Kubernetes Operator.   Changes to allow magic DNS provider to be specified (xip.io, nip.io, sslip.io). Support service setup for multiple containers. Enabled use of self-signed certs with Oracle Cloud Infrastructure DNS. Support for setting DeploymentStrategy for VerrazzanoHelidonWorkload.  Fixes:\n Several stability improvements for the platform, tests, and examples. Added retries around lookup of Rancher admin user. Granted specific privileges instead of ALL for Keycloak user in MySQL. Disabled the installation of the Verrazzano Console UI on managed clusters.  v0.13.0 Features:\n IngressTrait support for explicit destination host and port. Experimental cluster diagnostic tooling. Grafana dashboards for VerrazzanoHelidonWorkload. Now you can update application Fluentd sidecar images following a Verrazzano update. Documented Verrazzano specific OAM workload resources. Documented Verrazzano hardware requirements and installed software versions.  Fixes:\n VerrazzanoWebLogicWorkload and VerrazzanoCoherenceWorkload resources now handle updates. Now VerrazzanoHelidonWorkload supports the use of the ManualScalarTrait. Now you can delete a Namespace containing an ApplicationConfiguration resource. Fixed frequent restarts of Prometheus during application deployment. Made verrazzano-application-operator logging more useful and use structured logging. Fixed Verrazzano uninstall issues.  v0.12.0 Features:\n Observability stack now uses Keycloak SSO for authentication. Istio sidecars now automatically injected when namespaces labeled istio-injection=enabled. Support for Helidon applications now defined using VerrazzanoHelidonWorkload type.  Fixes:\n Fixed issues where logs were not captured from all containers in workloads with multiple containers. Fixed issue where some resources were not cleaned up during uninstall.  v0.11.0 Features:\n OAM applications are optionally deployed into an Istio service mesh. Incremental improvements to user-facing roles.  Fixes:\n Fixed issue with logging when an application has multiple workload types. Fixed metrics configuration in Spring Boot example application.  v0.10.0 Breaking Changes:\n Model/binding files removed; now application deployment done exclusively by using Open Application Model (OAM). Syntax changes for WebLogic and Coherence OAM workloads, now defined using VerrazzanoCoherenceWorkload and VerrazzanoWebLogicWorkload types.  Features:\n By default, application endpoints now use HTTPs - when using magic DNS, certificates are issued by cluster issuer, when using Oracle Cloud Infrastructure DNS certificates are issued using Let’s Encrypt, or the end user can provide certificates. Updated to Coherence Operator v3.1.3. Updates for running Verrazzano on Kubernetes 1.19 and 1.20. RBAC roles and role bindings created at installation. Added instance information to status of Verrazzano custom resource; can be used to obtain instance URLs. Updated to Istio v1.7.3.  Fixes:\n Reduced log level of Elasticsearch; excessive logging could have resulted in filling up disks.  v0.9.0  Features:  Added platform support for installing Verrazzano on Kind clusters. Log records are indexed from the OAM appconfig and component definitions using the following pattern: namespace-appconfig-component. All system and curated components are now patchable. More updates to Open Application Model (OAM) support.    To enable OAM, when you install Verrazzano, specify the following in the Kubernetes manifest file for the Verrazzano custom resource:\nspec: oam: enabled: true v0.8.0  Features:  Support for two installation profiles, development (dev) and production (prod). The production profile, which is the default, provides a 3-node Elasticsearch and persistent storage for the Verrazzano Monitoring Instance (VMI). The development profile provides a single node Elasticsearch and no persistent storage for the VMI. The default behavior has been changed to use the system VMI for all monitoring (applications and Verrazzano components). It is still possible to customize one of the profiles to enable the original, non-shared VMI mode. Initial support for the Open Application Model (OAM).   Fixes:  Updated to Axios NPM package v0.21.1 to resolve a security vulnerability in the examples code.    v.0.7.0   Features:\n Ability to upgrade an existing Verrazzano installation. Added the Verrazzano Console. Enhanced the structure of the Verrazzano custom resource to allow more configurability. Streamlined the secret usage for Oracle Cloud Infrastructure DNS installations.    Fixes:\n Fixed bug where the Verrazzano CR Certificate.CA fields were being ignored. Removed secret used for hello-world; hello-world-application image is now public in ghcr so ImagePullSecrets is no longer needed. Fixed issue #339 (PRs #208 \u0026 #210.)    v0.6.0  Features:  In-cluster installer which replaces client-side installation scripts. Added installation profiles; in this release, there are two: production and development. Verrazzano system components now emit JSON structured logs.   Fixes:  Updated Elasticsearch and Kibana versions (elasticsearch:7.6.1-20201130145440-5c76ab1) and (kibana:7.6.1-20201130145840-7717e73).    ","categories":"","description":"","excerpt":"v1.6.4 Component version updates:  Istio v1.17.2 Rancher v2.7.5 Kiali v1.66.1 CAPOCNE v1.7.0  Fixes:  Fixed an issue with provisioning OCNE workload clusters with the Rancher UI when using Let’s …","ref":"/docs/releasenotes/","tags":"","title":"Release Notes"},{"body":"Packages:\n  oam.verrazzano.io/v1alpha1   oam.verrazzano.io/v1alpha1   Resource Types:  IngressTrait  LoggingTrait  MetricsTrait  VerrazzanoCoherenceWorkload  VerrazzanoHelidonWorkload  VerrazzanoWebLogicWorkload  IngressTrait   IngressTrait specifies the ingress traits API.\n    Field Description      apiVersion string   oam.verrazzano.io/v1alpha1      kind string  IngressTrait    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  IngressTraitSpec          rules  []IngressRule     A list of ingress rules for an ingress trait.\n    tls  IngressSecurity     (Optional) The security parameters for an ingress trait. This is required only if specific hosts are given in an IngressRule.\n    workloadRef  OAM common/v1.TypedReference     The WorkloadReference of the workload to which this trait applies. This value is populated by the OAM runtime when an ApplicationConfiguration resource is processed. When the ApplicationConfiguration is processed, a trait and a workload resource are created from the content of the ApplicationConfiguration. The WorkloadReference is provided in the trait by OAM to ensure that the trait controller can find the workload associated with the component containing the trait within the original ApplicationConfiguration.\n       status  IngressTraitStatus     The observed state of an ingress trait and related resources.\n    LoggingTrait   LoggingTrait specifies the logging traits API.\n    Field Description      apiVersion string   oam.verrazzano.io/v1alpha1      kind string  LoggingTrait    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  LoggingTraitSpec          imagePullPolicy  string    (Optional) The optional image pull policy for the Fluentd image provided by the user.\n    loggingConfig  string    The configuration provided by the user for the Fluentd configuration that consists of fluentd.conf: \u003csource\u003e\\n ... and so on ...\\n.\n    loggingImage  string    (Optional) The name of the custom Fluentd image.\n    workloadRef  OAM common/v1.TypedReference     The WorkloadReference of the workload to which this trait applies. This value is populated by the OAM runtime when an ApplicationConfiguration resource is processed. When the ApplicationConfiguration is processed, a trait and a workload resource are created from the content of the ApplicationConfiguration. The WorkloadReference is provided in the trait by OAM to ensure that the trait controller can find the workload associated with the component containing the trait within the original ApplicationConfiguration.\n       status  LoggingTraitStatus     The observed state of a logging trait and related resources.\n    MetricsTrait   MetricsTrait specifies the metrics trait API.\n    Field Description      apiVersion string   oam.verrazzano.io/v1alpha1      kind string  MetricsTrait    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  MetricsTraitSpec          enabled  bool    (Optional) Specifies whether metrics collection is enabled. Defaults to true.\n    path  string    (Optional) The HTTP path for the related metrics endpoint. Defaults to /metrics.\n    port  int    (Optional) The HTTP port for the related metrics trait. Defaults to 8080.\n    ports  []PortSpec     (Optional) The HTTP endpoints for the related metrics.\n    scraper  string    (Optional) The Prometheus deployment used to scrape the related metrics endpoints. By default, the Verrazzano-supplied Prometheus component is used to scrape the endpoint.\n    secret  string    (Optional) The name of an opaque secret (for example, username and password) within the workload’s namespace for metrics endpoint access.\n    workloadRef  OAM common/v1.TypedReference     The WorkloadReference of the workload to which this trait applies. This value is populated by the OAM runtime when an ApplicationConfiguration resource is processed. When the ApplicationConfiguration is processed, a trait and a workload resource are created from the content of the ApplicationConfiguration. The WorkloadReference is provided in the trait by OAM to ensure that the trait controller can find the workload associated with the component containing the trait within the original ApplicationConfiguration.\n       status  MetricsTraitStatus     The observed state of a metrics trait and related resources.\n    VerrazzanoCoherenceWorkload   VerrazzanoCoherenceWorkload specifies the Verrazzano Coherence workload API.\n    Field Description      apiVersion string   oam.verrazzano.io/v1alpha1      kind string  VerrazzanoCoherenceWorkload    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  VerrazzanoCoherenceWorkloadSpec     The desired state of a Verrazzano Coherence workload.\n     template  Kubernetes runtime.RawExtension     The metadata and spec for the underlying Coherence resource.\n       status  VerrazzanoCoherenceWorkloadStatus     The observed state of a Verrazzano Coherence workload.\n    VerrazzanoHelidonWorkload   VerrazzanoHelidonWorkload specifies the Verrazzano Helidon workload API.\n    Field Description      apiVersion string   oam.verrazzano.io/v1alpha1      kind string  VerrazzanoHelidonWorkload    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  VerrazzanoHelidonWorkloadSpec     The desired state of a Verrazzano Helidon workload.\n     deploymentTemplate  DeploymentTemplate     An embedded Helidon application deployment.\n    serviceTemplate  ServiceTemplate     An embedded Helidon application service.\n       status  VerrazzanoHelidonWorkloadStatus     The observed state of a Verrazzano Helidon workload.\n    VerrazzanoWebLogicWorkload   VerrazzanoWebLogicWorkload specifies the Verrazzano WebLogic workload API.\n    Field Description      apiVersion string   oam.verrazzano.io/v1alpha1      kind string  VerrazzanoWebLogicWorkload    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  VerrazzanoWebLogicWorkloadSpec     The desired state of a Verrazzano WebLogic workload.\n     template  VerrazzanoWebLogicWorkloadTemplate     The metadata and spec for the underlying Domain resource.\n    clusters  []VerrazzanoWebLogicWorkloadTemplate            status  VerrazzanoWebLogicWorkloadStatus     The observed state of a Verrazzano WebLogic workload.\n    AuthorizationPolicy   (Appears on:IngressPath)  AuthorizationPolicy defines the set of rules for authorizing a request.\n    Field Description      rules  []AuthorizationRule     Rules are used to match requests from request principals to specific paths given an optional list of conditions.\n    AuthorizationRule   (Appears on:AuthorizationPolicy)  AuthorizationRule matches requests from a list of request principals that access a specific path subject to a list of conditions.\n    Field Description      from  AuthorizationRuleFrom     Specifies the request principals for access to a request. An asterisk (*) will match when the value is not empty, for example, if any request principal is found in the request.\n    when  []AuthorizationRuleCondition     (Optional) Specifies a list of additional conditions for access to a request.\n    AuthorizationRuleCondition   (Appears on:AuthorizationRule)  AuthorizationRuleCondition provides additional required attributes for authorization.\n    Field Description      key  string    The name of a request attribute.\n    values  []string    A list of allowed values for the attribute.\n    AuthorizationRuleFrom   (Appears on:AuthorizationRule)  AuthorizationRuleFrom includes a list of request principals.\n    Field Description      requestPrincipals  []string    Specifies the request principals for access to a request.\n    DeploymentTemplate   (Appears on:VerrazzanoHelidonWorkloadSpec)  DeploymentTemplate specifies the metadata and pod spec of a Helidon workload.\n    Field Description      metadata  Kubernetes meta/v1.ObjectMeta     Metadata about a Helidon application.\nRefer to the Kubernetes API documentation for the fields of the metadata field.     podSpec  Kubernetes core/v1.PodSpec     The pod spec of a Helidon application.\n    selector  Kubernetes meta/v1.LabelSelector     (Optional) Label selector of a Helidon application.\n    strategy  Kubernetes apps/v1.DeploymentStrategy     (Optional) The replacement strategy of a Helidon application.\n    IngressDestination   (Appears on:IngressRule)  IngressDestination specifies a specific destination host and port for the ingress paths. NOTE If there are multiple ports defined for a service, then the destination port must be specified OR the service port name must have the prefix http. \n    Field Description      host  string    (Optional) Destination host.\n    httpCookie  IngressDestinationHTTPCookie     (Optional) Session affinity cookie.\n    port  uint32    (Optional) Destination port.\n    IngressDestinationHTTPCookie   (Appears on:IngressDestination)  IngressDestinationHTTPCookie specifies a session affinity cookie for an ingress trait.\n    Field Description      name  string    (Optional) The name of the HTTP cookie.\n    path  string    (Optional) The path of the HTTP cookie.\n    ttl  time.Duration     (Optional) The lifetime of the HTTP cookie (in seconds).\n    IngressPath   (Appears on:IngressRule)  IngressPath specifies a specific path to be exposed for an ingress trait.\n    Field Description      path  string    (Optional) If no path is provided, then it defaults to forward slash (/).\n    pathType  string    (Optional) Path type values are case-sensitive and formatted as follows: exact: exact string matchprefix: prefix-based matchregex: regex-based match Defaults to prefix if path specified is /; otherwise, defaults to exact.\n    authorizationPolicy  AuthorizationPolicy     (Optional) Defines the set of rules for authorizing a request.\n    IngressRule   (Appears on:IngressTraitSpec)  IngressRule specifies a rule for an ingress trait.\n    Field Description      destination  IngressDestination     (Optional) The destination host and port for the ingress paths.\n    hosts  []string    (Optional) One or more hosts exposed by the ingress trait. Wildcard hosts or hosts that are empty are filtered out. If there are no valid hosts provided, then a DNS host name is automatically generated and used.\n    paths  []IngressPath     The paths to be exposed for an ingress trait.\n    IngressSecurity   (Appears on:IngressTraitSpec)  IngressSecurity specifies the secret containing the certificate securing the transport for an ingress trait.\n    Field Description      secretName  string    The name of a secret containing the certificate securing the transport. The specification of a secret here implies that a certificate was created for specific hosts, as specified in an IngressRule.\n    IngressTraitSpec   (Appears on:IngressTrait)  IngressTraitSpec specifies the desired state of an ingress trait.\n    Field Description      rules  []IngressRule     A list of ingress rules for an ingress trait.\n    tls  IngressSecurity     (Optional) The security parameters for an ingress trait. This is required only if specific hosts are given in an IngressRule.\n    workloadRef  OAM common/v1.TypedReference     The WorkloadReference of the workload to which this trait applies. This value is populated by the OAM runtime when an ApplicationConfiguration resource is processed. When the ApplicationConfiguration is processed, a trait and a workload resource are created from the content of the ApplicationConfiguration. The WorkloadReference is provided in the trait by OAM to ensure that the trait controller can find the workload associated with the component containing the trait within the original ApplicationConfiguration.\n    IngressTraitStatus   (Appears on:IngressTrait)  IngressTraitStatus specifies the observed state of an ingress trait and related resources.\n    Field Description      ConditionedStatus  OAM common/v1.ConditionedStatus      (Members of ConditionedStatus are embedded into this type.) Reconcile status of this ingress trait.\n    resources  []OAM common/v1.TypedReference     The resources managed by this ingress trait.\n    LoggingTraitSpec   (Appears on:LoggingTrait)  LoggingTraitSpec specifies the desired state of a logging trait.\n    Field Description      imagePullPolicy  string    (Optional) The optional image pull policy for the Fluentd image provided by the user.\n    loggingConfig  string    The configuration provided by the user for the Fluentd configuration that consists of fluentd.conf: \u003csource\u003e\\n ... and so on ...\\n.\n    loggingImage  string    (Optional) The name of the custom Fluentd image.\n    workloadRef  OAM common/v1.TypedReference     The WorkloadReference of the workload to which this trait applies. This value is populated by the OAM runtime when an ApplicationConfiguration resource is processed. When the ApplicationConfiguration is processed, a trait and a workload resource are created from the content of the ApplicationConfiguration. The WorkloadReference is provided in the trait by OAM to ensure that the trait controller can find the workload associated with the component containing the trait within the original ApplicationConfiguration.\n    LoggingTraitStatus   (Appears on:LoggingTrait)  LoggingTraitStatus specifies the observed state of a logging trait and related resources.\n    Field Description      ConditionedStatus  OAM common/v1.ConditionedStatus      (Members of ConditionedStatus are embedded into this type.) Reconcile status of this logging trait.\n    resources  []OAM common/v1.TypedReference     The resources managed by this logging trait.\n    MetricsTraitSpec   (Appears on:MetricsTrait)  MetricsTraitSpec specifies the desired state of a metrics trait.\n    Field Description      enabled  bool    (Optional) Specifies whether metrics collection is enabled. Defaults to true.\n    path  string    (Optional) The HTTP path for the related metrics endpoint. Defaults to /metrics.\n    port  int    (Optional) The HTTP port for the related metrics trait. Defaults to 8080.\n    ports  []PortSpec     (Optional) The HTTP endpoints for the related metrics.\n    scraper  string    (Optional) The Prometheus deployment used to scrape the related metrics endpoints. By default, the Verrazzano-supplied Prometheus component is used to scrape the endpoint.\n    secret  string    (Optional) The name of an opaque secret (for example, username and password) within the workload’s namespace for metrics endpoint access.\n    workloadRef  OAM common/v1.TypedReference     The WorkloadReference of the workload to which this trait applies. This value is populated by the OAM runtime when an ApplicationConfiguration resource is processed. When the ApplicationConfiguration is processed, a trait and a workload resource are created from the content of the ApplicationConfiguration. The WorkloadReference is provided in the trait by OAM to ensure that the trait controller can find the workload associated with the component containing the trait within the original ApplicationConfiguration.\n    MetricsTraitStatus   (Appears on:MetricsTrait)  MetricsTraitStatus defines the observed state of a metrics trait and related resources.\n    Field Description      ConditionedStatus  OAM common/v1.ConditionedStatus      (Members of ConditionedStatus are embedded into this type.) Reconcile status of this metrics trait.\n    resources  []QualifiedResourceRelation     Related resources affected by this metrics trait.\n    PortSpec   (Appears on:MetricsTraitSpec)  PortSpec defines an HTTP port and path combination.\n    Field Description      path  string    (Optional) The HTTP path for the related metrics endpoint. Defaults to /metrics.\n    port  int    (Optional) The HTTP port for the related metrics trait. Defaults to 8080.\n    QualifiedResourceRelation   (Appears on:MetricsTraitStatus, VerrazzanoHelidonWorkloadStatus)  QualifiedResourceRelation identifies a specific related resource.\n    Field Description      apiversion  string    API version of the related resource.\n    kind  string    Kind of the related resource.\n    name  string    Name of the related resource.\n    namespace  string    Namespace of the related resource.\n    role  string    Role of the related resource, for example, Deployment.\n    ServiceTemplate   (Appears on:VerrazzanoHelidonWorkloadSpec)  ServiceTemplate specifies the metadata and pod spec of a Helidon workload.\n    Field Description      metadata  Kubernetes meta/v1.ObjectMeta     (Optional) Metadata about a Helidon application.\nRefer to the Kubernetes API documentation for the fields of the metadata field.     serviceSpec  Kubernetes core/v1.ServiceSpec     (Optional) The service spec of a Helidon application.\n    VerrazzanoCoherenceWorkloadSpec   (Appears on:VerrazzanoCoherenceWorkload)  VerrazzanoCoherenceWorkloadSpec wraps a Coherence resource.\n    Field Description      template  Kubernetes runtime.RawExtension     The metadata and spec for the underlying Coherence resource.\n    VerrazzanoCoherenceWorkloadStatus   (Appears on:VerrazzanoCoherenceWorkload)  VerrazzanoCoherenceWorkloadStatus defines the observed state of a Verrazzano Coherence workload.\n    Field Description      lastGeneration  string    The last generation of the Verrazzano Coherence workload that was reconciled.\n    lastRestartVersion  string    The last value of the verrazzano.io/restart-version annotation.\n    VerrazzanoHelidonWorkloadSpec   (Appears on:VerrazzanoHelidonWorkload)  VerrazzanoHelidonWorkloadSpec wraps a Helidon application deployment and service.\n    Field Description      deploymentTemplate  DeploymentTemplate     An embedded Helidon application deployment.\n    serviceTemplate  ServiceTemplate     An embedded Helidon application service.\n    VerrazzanoHelidonWorkloadStatus   (Appears on:VerrazzanoHelidonWorkload)  VerrazzanoHelidonWorkloadStatus defines the observed state of Verrazzano Helidon workload.\n    Field Description      ConditionedStatus  OAM common/v1.ConditionedStatus      (Members of ConditionedStatus are embedded into this type.) Reconcile status of this Verrazzano Helidon workload.\n    resources  []QualifiedResourceRelation     The resources managed by this Verrazzano Helidon workload.\n    VerrazzanoWebLogicWorkloadSpec   (Appears on:VerrazzanoWebLogicWorkload)  VerrazzanoWebLogicWorkloadSpec wraps a WebLogic resource. The WebLogic domain specified in the template must contain a spec field and it may include a metadata field.\n    Field Description      template  VerrazzanoWebLogicWorkloadTemplate     The metadata and spec for the underlying Domain resource.\n    clusters  []VerrazzanoWebLogicWorkloadTemplate         VerrazzanoWebLogicWorkloadStatus   (Appears on:VerrazzanoWebLogicWorkload)  VerrazzanoWebLogicWorkloadStatus defines the observed state of a Verrazzano WebLogic workload.\n    Field Description      lastGeneration  string    The last generation of the Verrazzano WebLogic workload that was reconciled.\n    lastRestartVersion  string    The last value of the verrazzano.io/restart-version annotation.\n    lastLifecycleAction  string    The last value of the verrazzano.io/lifecycle-action.\n    VerrazzanoWebLogicWorkloadTemplate   (Appears on:VerrazzanoWebLogicWorkloadSpec)      Field Description      apiVersion  string        metadata  Kubernetes runtime.RawExtension         spec  Kubernetes runtime.RawExtension          -  []byte    Raw is the underlying serialization of this object.\nTODO: Determine how to detect ContentType and ContentEncoding of ‘Raw’ data.\n    -  Kubernetes runtime.Object     Object can hold a representation of this extension - useful for working with versioned structs.\n         Generated with gen-crd-api-reference-docs on git commit 238db2c3e. \n","categories":"","description":"","excerpt":"Packages:\n  oam.verrazzano.io/v1alpha1   oam.verrazzano.io/v1alpha1   Resource Types:  IngressTrait  LoggingTrait  MetricsTrait  VerrazzanoCoherenceWorkload  VerrazzanoHelidonWorkload …","ref":"/docs/reference/vao-oam-v1alpha1/","tags":"","title":"Traits and Workloads"},{"body":"To register managed clusters using the VerrazzanoManagedCluster resource, complete the following steps:\n  Create the environment variables, KUBECONFIG_ADMIN, KUBECONTEXT_ADMIN, KUBECONFIG_MANAGED1, and KUBECONTEXT_MANAGED1, and point them to the kubeconfig files and contexts for the admin and managed cluster, respectively. You will use these environment variables in subsequent steps when registering the managed cluster. The following shows an example of how to set these environment variables. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ export KUBECONFIG_ADMIN=/path/to/your/adminclusterkubeconfig $ export KUBECONFIG_MANAGED1=/path/to/your/managedclusterkubeconfig # Lists the contexts in each kubeconfig file $ kubectl --kubeconfig $KUBECONFIG_ADMIN config get-contexts -o=name $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 config get-contexts -o=name # Choose the right context name for your admin and managed clusters from the output shown and set the KUBECONTEXT # environment variables $ export KUBECONTEXT_ADMIN=\u003cadmin-cluster-context-name\u003e $ export KUBECONTEXT_MANAGED1=\u003cmanaged-cluster-context-name\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  To begin the registration process for a managed cluster named managed1, apply the VerrazzanoManagedCluster resource on the admin cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ apply -f \u003c\u003cEOF - apiVersion: clusters.verrazzano.io/v1alpha1 kind: VerrazzanoManagedCluster metadata: name: managed1 namespace: verrazzano-mc spec: description: \"Test VerrazzanoManagedCluster resource\" EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the VerrazzanoManagedCluster resource to reach the Ready status. At that point, it will have generated a YAML file that must be applied on the managed cluster to complete the registration process. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ wait --for=condition=Ready \\ vmc managed1 -n verrazzano-mc    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Export the YAML file created to register the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ get secret verrazzano-cluster-managed1-manifest \\ -n verrazzano-mc \\ -o jsonpath={.data.yaml} | base64 --decode \u003e register.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Apply the registration file exported in the previous step, on the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the managed cluster $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 --context $KUBECONTEXT_MANAGED1 \\ apply -f register.yaml # After the command succeeds, you may delete the register.yaml file $ rm register.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"Register managed clusters using `kubectl`","excerpt":"Register managed clusters using `kubectl`","ref":"/docs/setup/mc-install/register/register-kubectl/","tags":"","title":"Use Kubernetes Custom Resources"},{"body":"Use the vz bug-report tool to selectively capture cluster information and create an archive (*.tar.gz) file to help diagnose problems. The archive file helps development and support teams analyze issues and provide recommendations. If a failure occurs while Verrazzano is being installed, upgraded, or uninstalled using the Verrazzano CLI, then the archive file is generated automatically.\nCLI setup To set up the vz command-line tool, follow the steps here.\nUse the vz bug-report tool To create a bug report in a TAR file named my-bug-report.tar.gz: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz bug-report --report-file my-bug-report.tar.gz    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nWe suggest that you review the contents of the bug report before sharing it with support and development teams.\nUsage information Use the following syntax to run vz commands from your terminal window. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz bug-report [flags]    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAvailable options    Command Definition     -h, --help  Help for the vz bug-report command.   -i, --include-namespaces strings A comma-separated list of namespaces, in addition to the ones collected by default (system namespaces), for collecting cluster information. This flag can be specified multiple times, such as --include-namespaces ns1 --include-namespaces ns...   -r, --report-file string The report file created by the vz bug-report command, as a *.tar.gz file. Defaults to bug-report.tar.gz in the current directory.   -l --include-logs Include logs from the pods in one or more namespaces; this is specified along with the --include-namespaces flag.   -d --duration duration The time period during which the logs are collected in seconds, minutes, and hours.   -v, --verbose Enable verbose output.    Available flags These flags apply to all the commands.\n   Flag Definition     --context string The name of the kubeconfig file context to use.   --kubeconfig string Path to the kubeconfig file to use.    Examples   Create a bug report file, bugreport.tar.gz, by collecting data from the cluster: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz bug-report --report-file bugreport.tar.gz    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nWhen --report-file is not provided, the command creates bug-report.tar.gz in the current directory.\n  Create a bug report file, bugreport.tar.gz, including the additional namespace ns1 from the cluster: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz bug-report --report-file bugreport.tgz --include-namespaces ns1    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  The flag --include-namespaces accepts comma-separated values and can be specified multiple times. For example, the following commands create a bug report by including the additional namespaces ns1, ns2, and ns3: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz bug-report --report-file bugreport.tgz --include-namespaces ns1,ns2,ns3 $ vz bug-report --report-file bugreport.tgz --include-namespaces ns1,ns2 --include-namespaces ns3    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Use the --include-logs flag to collect the logs from the pods in one or more namespaces, by specifying the --include-namespaces flag. For example, the following command creates a bug report by including the logs from the additional namespaces ns1 and ns2: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz bug-report --report-file bugreport.tgz --include-namespaces ns1,ns2 --include-logs    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  The --duration flag collects logs for the specified time period. The default value is zero (0), which collects the complete pod log. You can specify seconds, minutes, and hours. For example, the following commands create bug reports by including the logs from the additional namespaces ns1 and ns2 during the specified periods of time: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz bug-report --report-file bugreport.tgz --include-namespaces ns1,ns2 --include-logs --duration 5m $ vz bug-report --report-file bugreport.tgz --include-namespaces ns1,ns2 --include-logs --duration 2h $ vz bug-report --report-file bugreport.tgz --include-namespaces ns1,ns2 --include-logs --duration 300s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe values specified for the flag --include-namespaces are case-sensitive.\n  ","categories":"","description":"Use the Bug Report command-line tool to capture and archive cluster information","excerpt":"Use the Bug Report command-line tool to capture and archive cluster information","ref":"/docs/troubleshooting/diagnostictools/vzbugreportcli/","tags":"","title":"Use the Bug Report Tool"},{"body":"Verify that managed cluster registration has completed You can perform all the verification steps on the admin cluster.\n  Verify that the managed cluster can connect to the admin cluster. View the status of the VerrazzanoManagedCluster resource on the admin cluster, and check whether the lastAgentConnectTime, prometheusHost, and apiUrl fields are populated. This may take up to two minutes after completing the registration steps. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ get vmc managed1 -n verrazzano-mc -o yaml # Sample output showing the status field spec: .... .... status: apiUrl: https://verrazzano.default.172.18.0.211.nip.io conditions: - lastTransitionTime: \"2023-06-16T07:00:00Z\" message: Ready status: \"True\" type: Ready lastAgentConnectTime: \"2023-06-16T07:25:16Z\" prometheusHost: prometheus.vmi.system.default.172.18.0.211.nip.io rancherRegistration: clusterID: c-xqstg message: Registration of managed cluster completed successfully for cluster managed with ID c-xqstg status: Completed state: Active    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Verify that the managed cluster is successfully registered with Rancher. When you perform the registration steps, Verrazzano also registers the managed cluster with Rancher. View the Rancher console on the admin cluster. If the registration with Rancher was successful, then your cluster will be listed in Rancher’s list of clusters, and will be in the Active state. You can find the Rancher console URL for your cluster by following the instructions for Accessing Verrazzano.\n  Verify that managed cluster metrics are being collected Verify that the admin cluster is collecting metrics from the managed cluster. The Prometheus output will include records that contain the name of the Verrazzano cluster (labeled as verrazzano_cluster).\nYou can find the Prometheus console URL for your cluster by following the instructions for Accessing Verrazzano. Run a query for a metric (for example, node_disk_io_time_seconds_total).\nSample output of a Prometheus query\nAn alternative approach to using the Prometheus console is to query metrics from the command line. Here is an example of how to obtain Prometheus metrics from the command line. Search the output of the query for responses that have the verrazzano_cluster field set to the name of the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ prometheusUrl=$(kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ get verrazzano -o jsonpath='{.items[0].status.instance.prometheusUrl}') $ VZPASS=$(kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ get secret verrazzano --namespace verrazzano-system \\ -o jsonpath={.data.password} | base64 --decode; echo) $ curl -k --user verrazzano:${VZPASS} \"${prometheusUrl}/api/v1/query?query=node_disk_io_time_seconds_total\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nVerify that managed cluster logs are being collected Verify that the admin cluster is collecting logs from the managed cluster. The output will include records which have the name of the managed cluster in the cluster_name field.\nYou can find the OpenSearch Dashboards URL for your cluster by following the instructions for Accessing Verrazzano. Searching the verrazzano-system data stream for log records with the cluster_name set to the managed cluster name yields logs for the managed cluster.\nSample output of a OpenSearch Dashboards screen\nAn alternative approach to using the OpenSearch Dashboards is to query OpenSearch from the command line. Here is an example of how to obtain log records from the command line. Search the output of the query for responses that have the cluster_name field set to the name of the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ OS_URL=$(kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ get verrazzano -o jsonpath='{.items[0].status.instance.openSearchUrl}') $ VZPASS=$(kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ get secret verrazzano --namespace verrazzano-system \\ -o jsonpath={.data.password} | base64 --decode; echo) $ curl -k --user verrazzano:${VZPASS} -X POST -H 'kbn-xsrf: true' \"${OS_URL}/verrazzano-system/_search?size=25\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"Verify your multicluster Verrazzano environment setup","excerpt":"Verify your multicluster Verrazzano environment setup","ref":"/docs/setup/mc-install/verify-install/","tags":"","title":"Verify Managed Cluster Registration"},{"body":"","categories":"","description":"Verify your Verrazzano installation","excerpt":"Verify your Verrazzano installation","ref":"/docs/setup/install/verify/","tags":"","title":"Verify the Installation"},{"body":"code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  To verify the Verrazzano installation, you can use kubectl to view the status of the Verrazzano resource. After a successful installation, Verrazzano status should be InstallComplete.\n$ kubectl get vz # Example response NAME AVAILABLE STATUS VERSION example-verrazzano 23/23 InstallComplete v2.0.0    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  For installation troubleshooting help, see Analysis Advice.\nAfter the installation has completed, you can use the Verrazzano consoles. For information on how to get the consoles URLs and credentials, see Access Verrazzano.\nNext steps (Optional) Run the example applications located here.\n","categories":"","description":"Verify installed Verrazzano using `kubectl`","excerpt":"Verify installed Verrazzano using `kubectl`","ref":"/docs/setup/install/verify/kubectl-verify/","tags":"","title":"Verify Using CLI kubectl"},{"body":"","categories":"","description":"Use case scenarios for example applications based on WebLogic, Helidon, and Coherence","excerpt":"Use case scenarios for example applications based on WebLogic, Helidon, and Coherence","ref":"/docs/examples/wls-coh/","tags":"","title":"WebLogic and Coherence"},{"body":"WebLogic Server is a widely-used enterprise application server for managing Java Enterprise Edition-based applications and is certified to run on Kubernetes using the WebLogic Kubernetes Operator. The WebLogic Kubernetes Operator (the “operator”) manages the WebLogic domain life cycle in Verrazzano. The WebLogic Domain custom resource (CR) specifies the configuration of the WebLogic domain. The operator monitors the WebLogic Domain CR and reconciles the domain by creating, updating, and deleting Kubernetes resources (Pods, Services, and such), as needed. Each pod is a WebLogic Server Administration Server or Managed Server.\nThe operator is installed in the verrazzano-system namespace and is also part of the Istio mesh deployed by Verrazzano.\nNOTE Verrazzano installs an instance of the WebLogic Kubernetes Operator. If you have a pre-existing instance of the operator, namespaces managed by each instance must be mutually exclusive. Do not label a namespace which is managed by the pre-existing WebLogic Kubernetes Operator, to also be managed by Verrazzano.  WebLogic OAM Component In Verrazzano, WebLogic workloads are specified as a VerrazzanoWebLogicWorkload OAM Component and one component specifies exactly one WebLogic domain. An ApplicationConfiguration can contain multiple VerrazzanoWebLogicWorkload components and therefore, multiple WebLogic domains. You can specify Traits for one or more VerrazzanoWebLogicWorkload components. All WebLogic Domain CR fields can be specified in the VerrazzanoWebLogicWorkload.\nThe following is an example WebLogic OAM Component. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2\u000bkind:Component\u000bmetadata:\u000b…\u000bspec:\u000bworkload:\u000bapiVersion:oam.verrazzano.io/v1alpha1kind:VerrazzanoWebLogicWorkloadspec:\u000btemplate:metadata:name:todo-domainspec:\u000bdomainUID:tododomaindomainHome:/u01/domains/tododomain\u000b…   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nVerrazzano application operator The Verrazzano application operator monitors the VerrazzanoWebLogicWorkload custom resource (CR) and creates, updates, and deletes the Domain CR based on the specification provided in the VerrazzanoWebLogicWorkload CR. Also, it modifies the WebLogic Domain CR to add Fluentd sidecar injection for logging and a WebLogic Monitoring Exporter configuration for metrics, if they do not already exist. The WebLogic Kubernetes Operator creates the WebLogic domain based on the WebLogic Domain CR.\nWebLogic domain life cycle The following are the life cycle stages of a WebLogic domain.\n Create a WebLogic domain.  Application containing WebLogic component is created. WebLogic component added to an existing application.   Delete a WebLogic domain.  Application containing WebLogic component is deleted. WebLogic component removed from an existing application.   Scale a WebLogic domain.  Modify the replicas field in the WebLogic Domain CR within the OAM Component specification.   Update a WebLogic domain.  Modify the other fields field in the WebLogic Domain CR within the OAM Component specification.    Scale-in and scale-out a WebLogic domain by modifying the OAM Component replicas count. Delete the WebLogic domain by deleting the OAM application or removing the component from the application.\nIstio integration Verrazzano creates all WebLogic domain pods in an Istio mesh; all WebLogic network traffic uses mutual TLS authentication (mTLS).\nThe Envoy proxy sidecar exists in front of workloads for each service providing security, load balancing, metrics, and such. Traffic in and out of the pod goes through the proxy.\nIf the namespace is labeled istio-injection=enabled, then Istio puts the WebLogic domain in the Istio mesh. You should label all the namespaces istio-injection=enabled where the WebLogic domain is to be created, or WebLogic domain creation will fail. Also, you can label the namespaces when using a VerrazzanoProject, which by default, assigns the label to all the namespaces associated with the project. In the WebLogic Domain CR, the Verrazzano application operator sets the Istio enabled field. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:v1items:- apiVersion:weblogic.oracle/v8kind:Domain…spec:…istio:enabled:true   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIstio mesh ingress and egress The Verrazzano installer creates the ingress gateway service. The ingress gateway is a LoadBalancer service; TLS is terminated at the Istio ingress gateway. Ingress to the WebLogic domain is optional; you can use an IngressTrait to enable it.\nIstio ingress and routing for a single WebLogic domain The Istio Gateway resource describes a proxy providing ingress to the Kubernetes cluster and the Istio mesh. The Gateway specifies the host, port, protocol, and so on, and is bound to a gateway service (LoadBalancer/NodePort). The VirtualService specifies routes to services and load balancing.\nExample of an Istio Gateway resource: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:networking.istio.io/v1beta1kind:Gateway…spec:selector:istio:ingressgatewayservers:- hosts:- todo-appconf.todo-list.172.18.0.230.nip.io#Host for this gateway serverport:name:httpsnumber:443protocol:HTTPStls:credentialName:todo-list-todo-appconf-cert-secret#Secret containing TLS certificatemode:SIMPLE#Terminate TLS   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nExample of an Istio VirtualService resource:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:networking.istio.io/v1beta1kind:VirtualService…spec:gateways:- todo-list-todo-appconf-gw#Gateway resource referencehosts:- todo-appconf.todo-list.172.18.0.230.nip.io#Host that this VirtualService applies to. A Gateway resource can have multiple hosts.http:- match:- uri:prefix:/todoroute:- destination:host:tododomain-adminserver#Back end Kubernetes service.port:number:7001   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Istio ingress and routing for multiple WebLogic domains Multiple Gateway resources use the same Istio ingress gateway service. Verrazzano creates a single Gateway and VirtualService per IngressTrait specified on the OAM Component.\nIstio authorization policy The Istio AuthorizationPolicy resource specifies access controls for WebLogic pods, other pods in the application, the Ingress gateway, and Prometheus.\nExample Istio authorization policy: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:security.istio.io/v1beta1kind:AuthorizationPolicy...spec:rules:- from:- source:principals:- cluster.local/ns/todo-list/sa/todo-appconf- cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account- cluster.local/ns/verrazzano-system/sa/verrazzano-monitoring-operator- cluster.local/ns/verrazzano-system/sa/weblogic-operator-saselector:matchLabels:verrazzano.io/istio:todo-appconf   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nWebLogic metrics Prometheus scrapes each WebLogic pod on the metrics port periodically.\nIf the trait doesn’t exist, Verrazzano will inject the MetricsTrait into the ApplicationConfiguration. The WebLogic Monitoring Exporter sidecar provides the metrics endpoint. If it doesn’t already exist, Verrazzano will inject the default Monitoring Exporter configuration into the WebLogic Domain CR. The Verrazzano application operator creates Prometheus Service Monitors with WebLogic targets and Verrazzano installs Grafana dashboards to view WebLogic metrics. The WebLogic Kubernetes Operator configures the Monitoring Exporter using a REST API and labels the pods with metrics-related labels. Metrics are scraped at /metrics on port 8080.\nAppConfig default injection Review the following example MetricsTrait from the Todo List ApplicationConfiguration. If it’s missing from ApplicationConfiguration, Verrazzano will inject the default MetricsTrait.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  kind:ApplicationConfigurationmetadata:name:todo-appconf...spec:components:- componentName:todo-domaintraits:- trait:apiVersion:oam.verrazzano.io/v1alpha1kind:MetricsTraitspec:…   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Monitoring Exporter Component Review the following example monitoringExporter configuration in the OAM Component. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  workload:apiVersion:oam.verrazzano.io/v1alpha1kind:VerrazzanoWebLogicWorkload…monitoringExporter:imagePullPolicy:IfNotPresentconfiguration:\u000bmetricsNameSnakeCase:truedomainQualifier:truequeries:\u000b- key:name\u000bkeyName:locationprefix:wls_server_…   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nPod annotations The following annotations can be used for enabling metrics on pods:\n prometheus.io/metricsEnabled: \"true\" - Enables metrics scraping. prometheus.io/metricsPath: /metrics - Specifies metrics scraping path. prometheus.io/metricsPort: \"8080\" - Specifies metrics scraping port.  Example:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:v1kind:Podmetadata:annotations:prometheus.io/path:/metricsprometheus.io/port:\"8080\"prometheus.io/scrape:\"true\"   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Logging WebLogic logs are sent to OpenSearch, which is installed in the Verrazzano cluster. The Fluentd sidecar is injected into each WebLogic pod to send server logs to stdout. The Fluentd DaemonSet in the verrazzano-system namespace sends logs to OpenSearch. In OpenSearch, logs are indexed by namespace.\nLift-and-Shift WebLogic applications Verrazzano makes it easy for you to migrate WebLogic applications from on-premises installations to the cloud. You can use WebLogic Deploy Tooling (WDT) to build the domain model and the WebLogic Image Tool (WIT) to build the WebLogic domain image.\nFor detailed instructions, see the Lift-and-Shift Guide.\nDeploy WebLogic applications in Verrazzano Step 1. Create a WebLogic domain image.\n To deploy a WebLogic domain in Kubernetes, first you need to create a Docker image for the WebLogic domain. To create a WebLogic domain image using WebLogic Deploy Tooling (WDT), follow the instructions at:  For a Model in Image domain home (recommended), see Model in Image. For a Domain home on a persistent volume (Domain on PV), see Domain on Persistent Volume (PV).    Step 2. Create a VerrazzanoWebLogicWorkload component.\n To deploy and run the WebLogic domain image in Verrazzano, create the VerrazzanoWebLogicWorkload component that specifies the definition and parameters for the WebLogic domain contained in the image. For an example VerrazzanoWebLogicWorkload Component resource created for a sample WebLogic domain, see the ToDo List example application component YAML file. Note that WebLogic applications require that the container registry secret be specified in the Domain resource. Create a registry secret in the application namespace and specify the secret in the imagePullSecrets field of the WebLogic Domain Spec for the application.  For all the options supported by the WebLogic domain configuration, see Domain.md. Find the VerazzanoWebLogicWorkload specification here.    Step 3. Create an ApplicationConfiguration for the WebLogic application.\n Next, create an ApplicationConfiguration that uses the VerrazzanoWebLogicWorkload component you created for the WebLogic domain. For an example ApplicationConfiguration using a VerrazzanoWebLogicWorkload component, see the ToDo List example application.  Step 4. Verify the domain.\n Verrazzano creates the underlying domain Kubernetes resource from the VerrazzanoWebLogicWorkload component, which is then processed by the WebLogic Kubernetes Operator to create the Administration and Managed Server pods, and deploy the applications and resources associated with the WebLogic domain. To verify that the WebLogic domain is up and running, follow the steps found here.  NOTE Oracle recommends that you use the WebLogic Toolkit UI (WKTUI) for deploying WebLogic applications in Verrazzano. Follow the WKTUI documentation found here.  Database connections Typically, WebLogic applications make database connections using the connection information present in the JDBCSystemResources created in a WebLogic domain. To implement this in Verrazzano, databases are deployed as separate components and the connection information is made available to the WebLogic domain using a WDT Model.\nStep 1. Deploy the database in Verrazzano.\n To deploy a database, you need to create the corresponding Component and ApplicationConfiguration that will run the database in a pod and expose its connection information as a Service. For an example, look at the tododomain-mysql descriptor.  Step 2. Create a WebLogic resource ConfigMap.\n Next, create a ConfigMap that will contain the JDBCSystemResource definition with connection information for the database. For an example, see the tododomain-configmap definition in the ToDo List example application configuration.  Step 3. Configure the WebLogic domain to use the WebLogic resource ConfigMap.\n You can configure the ConfigMap, containing the resource information for the JDBCSystemResource, in the configuration section of the VerrazzanoWebLogicWorkload component of the WebLogic domain. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   introspectorJobActiveDeadlineSeconds: 900 model: configMap: tododomain-configmap domainType: WLS …     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  For more details, see the ToDo List example application configuration.  Ingresses To access the endpoints for a Java EE application deployed as part of a VerrazzanoWebLogicWorkload component, Verrazzano lets you specify an IngressTrait for the component which is then translated to an Istio ingress gateway and VirtualService. For an example, see the ToDo List example application, where the IngressTrait is configured for the application endpoint. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  ...- trait:apiVersion:oam.verrazzano.io/v1alpha1kind:IngressTraitspec:rules:- paths:# application todo- path:\"/todo\"pathType:Prefix...   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThen, you can access the endpoint using the Istio gateway, as described in Step 8. Access the ToDo List application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ HOST=$(kubectl get gateways.networking.istio.io -n todo-list -o jsonpath={.items[0].spec.servers[0].hosts[0]}) $ ADDRESS=$(kubectl get service -n istio-system istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}') $ curl -sk https://${HOST}/todo/ --resolve ${HOST}:443:${ADDRESS}     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nReferences  WebLogic Kubernetes Operator documentation WebLogic Kubernetes Operator GitHub repository WebLogic Domain CR Verrazzano Application Workloads Lift-and-Shift Guide  ","categories":"","description":"Develop WebLogic applications with Verrazzano","excerpt":"Develop WebLogic applications with Verrazzano","ref":"/docs/applications/oam/workloads/weblogic/","tags":"","title":"WebLogic Workload"},{"body":"","categories":"","description":"Read advice based on Analysis Tools findings and reports","excerpt":"Read advice based on Analysis Tools findings and reports","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/","tags":"","title":"Analyze Tool Findings and Reports"},{"body":"Use the following example to secure public access to the Hello Helidon Greet application.\nReplace domain name with the Kubernetes cluster domain used in Verrazzano. This ensures that you have a fully-qualified domain name for host entries in the resources.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: cert-manager.io/v1 kind: Certificate metadata: name: hello-helidon-hello-helidon-ingress-cert namespace: istio-system # Note the use of the istio-system Namespace. spec: dnsNames: - hello-helidon.hello-helidon.\u003cdomain name\u003e issuerRef: kind: ClusterIssuer name: verrazzano-cluster-issuer secretName: hello-helidon-hello-helidon-ingress-cert-secret    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"Secure public access for your applications","excerpt":"Secure public access for your applications","ref":"/docs/applications/kubernetes/certificate/","tags":"","title":"Certificate Management"},{"body":"A Verrazzano application can contain any number of Coherence component workloads, where each workload is a standalone Coherence cluster, independent from other Coherence clusters in the application.\nVerrazzano uses the standard Coherence Operator to provision and manage clusters, as documented at Coherence Operator. The Coherence Operator uses a CRD, coherence.oracle.com (Coherence resource), to represent a Coherence cluster. When a Verrazzano application with Coherence is provisioned, Verrazzano configures the default logging and metrics for the Coherence cluster. Logs are sent to OpenSearch and metrics to Prometheus. You can view this telemetry data using the OpenSearch Dashboards and Grafana consoles.\nOAM Component The custom resource YAML file for the Coherence cluster is specified as a VerrazzanoCoherenceWorkload custom resource. In the following example, everything under the spec: section is standard Coherence resource YAML that you would typically use to provision a Coherence cluster. Including this Component reference in your ApplicationConfiguration will result in a new Coherence cluster being provisioned. You can have multiple clusters in the same application with no conflict. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: core.oam.dev/v1alpha2 kind: Component metadata: name: orders namespace: sockshop spec: workload: apiVersion: oam.verrazzano.io/v1alpha1 kind: VerrazzanoCoherenceWorkload spec: template: metadata: name: orders-coh spec: cluster: SockShop ...     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nLife cycle With Verrazzano, you manage the life cycle of applications using Component and ApplicationConfiguration resources. Typically, you would modify the Coherence cluster resource to make changes or to do lifecycle operations, like scale in and scale out. However, in the Verrazzano environment, the cluster resource is owned by the Verrazzano application operator and will be reconciled to match the Component workload resource. Therefore, you need to manage the cluster configuration by modifying the resource, either by kubectl edit or applying a new YAML file. Verrazzano will notice that the Component resource changed and will update the Coherence resource as needed.\nProvisioning When you apply the Component YAML file shown previously, Kubernetes will create a component.oam.verrazzano.io resource, but the Coherence cluster will not be created until you create the ApplicationConfiguration resource, which references the Coherence component. When the application is created, Verrazzano creates a Coherence custom resource for each cluster, which is subsequently processed by the Coherence Operator, resulting in a new cluster. After a cluster is created, the Coherence Operator will monitor the Coherence resource to reconcile the state of the cluster. You can add a new Coherence workload to a running application, or remove an existing workload, by modifying the ApplicationConfiguration resource, and adding or removing the Coherence component.\nScaling Scaling a Coherence cluster is done by modifying the replicas field in the Component resource. Verrazzano will modify the Coherence resource replicas field and the cluster will be scaled accordingly. The following example configuration shows the replicas field that specifies the number of pods in the cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: core.oam.dev/v1alpha2 kind: Component metadata: name: orders namespace: sockshop spec: workload: apiVersion: oam.verrazzano.io/v1alpha1 kind: VerrazzanoCoherenceWorkload spec: template: metadata: name: orders-coh spec: cluster: SockShop replicas: 3 ...     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: A Coherence cluster provisioned with Verrazzano does not support autoscaling with a Horizontal Pod Autoscaler.\nTermination You can terminate the Coherence cluster by removing the Component from the ApplicationConfiguration or by deleting the ApplicationConfiguration resource entirely.\nNOTE Do not delete the Coherence component if the application is still using it.  Logging When a Coherence cluster is provisioned, Verrazzano configures it to send logs to OpenSearch. This is done by injecting a Fluentd sidecar configuration into the Coherence resource. The Coherence Operator will create the pod with the Fluentd sidecar. This sidecar periodically copies the Coherence logs from /logs to stdout, enabling the Fluentd DaemonSet in the verrazzano-system namespace to send the logs to OpenSearch. Note that the Fluend sidecar running in the Coherence pod never communicates with OpenSearch or any other network endpoint.\nThe logs are placed in a per-namespace OpenSearch data stream named verrazzano-application-\u003cnamespace\u003e, for example: verrazzano-application-sockshop. All logs from Coherence pods in the same namespace will go into the same data stream, even for different applications. This is standard behavior and there is no way to disable or change it.\nEach log record has some Coherence and application fields, along with the log message itself. For example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   kubernetes.labels.coherenceCluster SockShop kubernetes.labels.app_oam_dev/name sockshop-appconf kubernetes.labels.app_oam_dev/component orders ...     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nMetrics Verrazzano uses Prometheus to scrape metrics from Coherence cluster pods. Like logging, metrics scraping is also enabled during provisioning, however, the Coherence resource YAML file must have proper metrics configuration. For details, see Coherence Metrics. In summary, there are two ways to configure the Coherence metrics endpoint. Coherence has a default metrics endpoint that you can enable. If your application serves metrics from its own endpoint, such as a Helidon application, then do not use the native Coherence metrics endpoint. To see the difference, examine the socks-shop and bobs-books examples.\nBobs Books The bobs-books example uses the default Coherence metrics endpoint, so the configuration must enable this feature, shown in the following metrics section of the roberts-coherence component in the YAML file, bobs-books-comp.yaml. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  ... coherence: metrics: enabled: true     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nSock Shop The sock-shop example, which is a Helidon application with embedded Coherence, explicitly specifies the metrics port 7001 and doesn’t enable Coherence metrics. Coherence metrics still will be scraped, but not at the default endpoint. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   ports: ... - name: metrics port: 7001 serviceMonitor: enabled: true     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nBecause sock-shop components are not using the default Coherence metrics port, you must add a MetricsTrait section to the ApplicationConfiguration for each component, specifying the metrics port as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   - trait: apiVersion: oam.verrazzano.io/v1alpha1 kind: MetricsTrait metadata: name: carts-metrics spec: port: 7001     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nPrometheus configuration Prometheus is configured using the Prometheus Operator to scrape application targets. During application deployment, Verrazzano creates or updates Service Monitors based on the MetricsTrait specified in the ApplicationConfiguration. When the application is deleted, Verrazzano removes the Service Monitors so that metrics are no longer collected for it.\nHere is an example of the sock-shop Prometheus Service Monitor resource for catalog-coh in the application namespace.\nNotice that services with certain labels are targeted. Prometheus Operator will find the Service Monitor and generate the scrape configuration to be used by Prometheus. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: .... name: catalog-coh-metrics namespace: sockshop .... spec: endpoints: - bearerTokenSecret: key: \"\" port: metrics relabelings: - action: labeldrop regex: (endpoint|instance|job|service) namespaceSelector: {} selector: matchLabels: coherenceCluster: SockShop coherenceComponent: coherence-service coherenceDeployment: catalog-coh coherencePort: metrics coherenceRole: Catalog     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nHere are the labels on the corresponding catalog-coh-metrics service.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  kind: Service metadata: labels: coherenceCluster: SockShop coherenceComponent: coherence-service coherenceDeployment: catalog-coh coherencePort: metrics coherenceRole: Catalog spec: ports: - name: metrics port: 9612 protocol: TCP targetPort: 9612 ....     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIstio integration Verrazzano ensures that Coherence clusters are not included in an Istio mesh, even if the namespace has the istio-injection: enabled label. This is done by adding the sidecar.istio.io/inject: \"false\" annotation to the Coherence resource, resulting in Coherence pods being created with that label. However, other application components in the mesh using mutual TLS authentication (mTLS) may need to communicate with Coherence. To handle this case, Verrazzano automatically creates an Istio DestinationRule to disable TLS for the Coherence port. This policy disables mTLS for port 9000, which happens to be used as a Coherence extend port for Bob’s Books. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   trafficPolicy: portLevelSettings: - port: number: 9000 tls: {} ...     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nCurrently, port 9000 is the only port where TLS is disabled, so you need to use this as the Coherence extend port if other components in the mesh access Coherence over the extend protocol.\n","categories":"","description":"Use a Coherence workload in an application","excerpt":"Use a Coherence workload in an application","ref":"/docs/applications/oam/workloads/coherence/coherence/","tags":"","title":"Coherence Workload"},{"body":"Before you can create Oracle Cloud Native Environment (OCNE) clusters on Oracle Cloud Infrastructure (OCI), you’ll need to configure a virtual cloud network (VCN) in your OCI compartment. VCNs are software-defined networks that manage access to your cloud resources.\nSee Networking Overview in the OCI documentation for more information.\nYou can use the VCN Wizard in the OCI Console to automatically create most of the required network infrastructure. Additional subnets and security rules (described below) must be added manually.\nWithin your VCN, you’ll need:\n Subnets (with security rules) Gateways Route tables  NOTE In addition to the specifications listed, make sure that the VCN is configured to accept the ports and protocols required by Kubernetes. See Ports and Protocols in the Kubernetes documentation for more information.  Subnets Subnets are subdivisions within a VCN that help to organize configuration settings. All instances within a subnet use the same route table, security lists, and DHCP options. Subnets can be either public or private. For an OCNE cluster, you’ll need both public and private subnets, with four subnets in total.\nSee Overview of VCNs and Subnets in the OCI documentation for more information.\nEach subnet requires its own set of security rules that establish rules for virtual firewalls. These ingress and egress rules specify the types of traffic (protocol and port) that are allowed in and out of the instances.\nSee Security Rules in the OCI documentation for more information.\nNOTE You can use either Network Security Groups (NSGs) or security lists to add security rules to your VCN. We recommend using NSGs whenever possible. For more information, see Comparison of Security Lists and Network Security Groups in the OCI documentation.  Subnet 1: control plane endpoint A public subnet for the control plane endpoint that houses an OCI load balancer. The load balancer acts as a reverse proxy for the Kubernetes API server.\nIn this subnet, create security rules that cover the following traffic:\n Egress: control plane traffic Ingress: external access to the Kubernetes API endpoint Ingress: ICMP path discovery   Security rules examples NOTE These examples are provided for reference only. Customize your security rules as needed for your environment.  Egress rules    Destination Type Destination Destination Port Protocol Description     CIDR Block 10.0.0.0/29 6443 TCP HTTPS traffic to control plane for Kubernetes API server access    Ingress rules    Destination Type Destination Destination Port Protocol Description     CIDR Block 0.0.0.0/0 6443 TCP Public access to endpoint OCI load balancer   CIDR Block 10.0.0.0/16  ICMP Type 3, Code 4 Path MTU discovery     Subnet 2: control plane nodes A private subnet that houses the control plane nodes that run Kubernetes control plane components, such as the API Server and the control plane pods.\nIn this subnet, create security rules that cover the following traffic:\n Egress: node Internet access Ingress: east-west traffic, originating from within the VCN Ingress: control plane endpoint to control plane node access on API endpoint Ingress: worker nodes to control plane node access on API endpoint Ingress: ETCD client and peer Ingress: SSH traffic Ingress: control plane to control plane kubelet communication Ingress: Ingress: Calico rules for control plane and worker nodes for  BGP IP-in-IP     Security rules examples NOTE These examples are provided for reference only. Customize your security rules as needed for your environment.  Egress rules    Destination Type Destination Destination Port Protocol Description     CIDR Block 0.0.0.0/0 All All Control plane node access to the Internet to pull images    Ingress rules    Destination Type Destination Destination Port Protocol Description     CIDR Block 10.0.0.8/29 6443 TCP Kubernetes API endpoint to Kubernetes control plane communication   CIDR Block 10.0.0.0/29 6443 TCP Control plane to control plane (API server port) communication   CIDR Block 10.0.64.0/20 6443 TCP Worker node to Kubernetes control plane (API Server) communication   CIDR Block 10.0.0.0/29 10250 TCP Control plane to control plane node kubelet communication   CIDR Block 10.0.0.0/29 2379 TCP etcd client communication   CIDR Block 10.0.0.0/29 2380 TCP etcd peer communication   CIDR Block 10.0.0.0/29 179 TCP Calico networking (BGP)   CIDR Block 10.0.64.0/20 179 TCP Calico networking (BGP)   CIDR Block 10.0.0.0/29  IP-in-IP Calico networking with IP-in-IP enabled   CIDR Block 10.0.64.0/20  IP-in-IP Calico networking with IP-in-IP enabled   CIDR Block 10.0.0.0/16  ICMP Type 3, Code 4 Path MTU discovery   CIDR Block 0.0.0.0/0 22 TCP Inbound SSH traffic to worker nodes   CIDR Block 10.0.0.0/16 All TCP East-West communication for Kubernetes API server access / DNS access     Subnet 3: service load balancers A public subnet that houses the service load balancers.\nIn this subnet, create security rules that cover the following traffic:\n Egress: service load balancer to NodePort on worker nodes Ingress: ICMP path discovery Ingress: HTTP and HTTPS traffic   Security rules examples NOTE These examples are provided for reference only. Customize your security rules as needed for your environment.  Egress rules    Destination Type Destination Destination Port Protocol Description     CIDR Block 10.0.64.0/20 32000-32767 TCP Access to NodePort services from service load balancers    Ingress rules    Destination Type Destination Destination Port Protocol Description     CIDR Block 0.0.0.0/0 80, 443 TCP Incoming traffic to services   CIDR Block 10.0.0.0/16  ICMP Type 3, Code 4 Path MTU discovery     Subnet 4: worker nodes A private subnet that houses the worker nodes.\nIn this subnet, create security rules that cover the following traffic:\n Egress: node Internet access Ingress: east-west traffic, originating from within the VCN Ingress: SSH traffic Ingress: ICMP path discovery Ingress: control plane to kubelet on worker nodes Ingress: worker node to worker node Ingress: Calico rules for control plane and worker nodes for  BGP IP-in-IP   Ingress: worker nodes to default NodePort ingress   Security rules examples NOTE These examples are provided for reference only. Customize your security rules as needed for your environment.  Egress rules    Destination Type Destination Destination Port Protocol Description     CIDR Block 0.0.0.0/0 All All Worker node access to the Internet to pull images    Ingress rules    Destination Type Destination Destination Port Protocol Description     CIDR Block 10.0.0.32/27 32000-32767 TCP Incoming traffic from service load balancers (NodePort communication)   CIDR Block 10.0.0.0/29 10250 TCP Control plane node to worker node (kubelet communication)   CIDR Block 10.0.64.0/20 10250 TCP Worker node to worker node (kubelet communication)   CIDR Block 10.0.0.0/29 179 TCP Calico networking (BGP)   CIDR Block 10.0.64.0/20 179 TCP Calico networking (BGP)   CIDR Block 10.0.0.0/29  IP-in-IP Calico networking with IP-in-IP enabled   CIDR Block 10.0.64.0/20  IP-in-IP Calico networking with IP-in-IP enabled   CIDR Block 10.0.0.0/16  ICMP Type 3, Code 4 Path MTU discovery   CIDR Block 0.0.0.0/0 22 22 Inbound SSH traffic to worker nodes   CIDR Block 10.0.0.0/16 All TCP East-West communication for Kubernetes API server access / DNS access     Gateways Gateways control access from your VCN to other networks. You’ll need to configure three different types of gateways:\n An Internet gateway A NAT gateway A service gateway  You may need to perform some additional configuration to expose the VCN’s subnets directly to the Internet. See Access to the Internet in the OCI documentation for details.\nRoute tables Route tables send traffic out of the VCN (for example, to the Internet, to your on-premises network, or to a peered VCN) using rules that are similar to traditional network route rules.\nSee VCN Route Tables in the OCI documentation for more information.\nFor OCNE clusters, you’ll need to create two route tables:\n A route table for public subnets that will route stateful traffic to and from the Internet gateway. Assign this route table to both public subnets. A route table for private subnets that will route stateful traffic to and from the NAT and service gateways. Assign this route table to both private subnets.  ","categories":"","description":"Set up a virtual cloud network for OCNE clusters on OCI","excerpt":"Set up a virtual cloud network for OCNE clusters on OCI","ref":"/docs/setup/install/prepare/platforms/olcne/vcn/","tags":"","title":"Configure a VCN for OCNE"},{"body":"Fluentd sidecar For components with multiple log streams or that cannot log to stdout, Verrazzano deploys a Fluentd sidecar which parses and translates the log stream. The resulting log is sent to stdout of the sidecar container and then written to /var/log/containers by the kubelet service.\nFor example, in a WebLogic deployment, AdminServer.log is consumed, translated, and written to stdout by the Fluentd sidecar. You can view these logs using kubectl on the container named fluentd-stdout-sidecar. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs tododomain-adminserver \\ -n todo-list \\ -c fluentd-stdout-sidecar    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe Verrazzano Fluentd Docker image comes with these plug-ins:\n fluent-plugin-concat fluent-plugin-dedot_filter fluent-plugin-detect-exceptions fluent-plugin-opensearch fluent-plugin-grok-parser fluent-plugin-json-in-json-2 fluent-plugin-kubernetes_metadata_filter fluent-plugin-multi-format-parser fluent-plugin-parser-cri fluent-plugin-prometheus fluent-plugin-record-modifier fluent-plugin-rewrite-tag-filter fluent-plugin-systemd fluent-plugin-oci-logging  The Verrazzano Fluentd Docker image also has two local default plug-ins, kubernetes_parser and kubernetes_multiline_parser. These plug-ins help to parse Kubernetes management log files.\nHere are example use cases for these plug-ins: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # ---- fluentd.conf ---- # kubernetes parser \u003csource\u003e @type tail path ./kubelet.log read_from_head yes tag kubelet \u003cparse\u003e @type multiline_kubernetes \u003c/parse\u003e \u003c/source\u003e # kubernetes multi-line parser \u003csource\u003e @type tail path ./kubelet.log read_from_head yes tag kubelet \u003cparse\u003e @type multiline_kubernetes \u003c/parse\u003e \u003c/source\u003e # ---- EOF ----    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFluentd DaemonSet Verrazzano deploys a Fluentd DaemonSet which runs one Fluentd replica per node in the verrazzano-system namespace. Each instance pulls logs from the node’s /var/log/containers directory and writes them to the target OpenSearch data stream. Verrazzano system applications receive special handling, and write their logs to the verrazzano-system data stream. Verrazzano application logs are exported to a data stream based on the application’s namespace, following this format: verrazzano-application-\u003capplication namespace\u003e.\nFor example, vmi-system-osd logs written to /var/log/containers will be pulled by Fluentd and written to OpenSearch. The logs are exported to the verrazzano-system data stream, because vmi-system-osd is a Verrazzano system application. For a non-system application, if it is in the myapp namespace, then its logs will be exported to the verrazzano-application-myapp data stream.\n","categories":"","description":"Configure Fluentd for log collection","excerpt":"Configure Fluentd for log collection","ref":"/docs/observability/logging/fluentd/","tags":"","title":"Configure Fluentd for Log Collection"},{"body":"This document describes how to enable Jaeger and customize your Jaeger installation to address some common tracing needs.\nEnable Jaeger To use Jaeger in Verrazzano, you must first enable the jaegerOperator component in your Verrazzano custom resource. Here is an example YAML file that enables the Jaeger Operator. Verrazzano installs the Jaeger Operator in the verrazzano-monitoring namespace. If OpenSearch and Keycloak components are enabled in the Verrazzano custom resource, then a default Jaeger instance is also created by the Jaeger Operator in the verrazzano-monitoring namespace. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:verrazzanospec:profile:prodcomponents:jaegerOperator:enabled:true   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe Jaeger Operator will create Service custom resources for query and collection. After applying the Verrazzano custom resource, listing Jaeger resources will show output similar to the following. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get services,deployments -l app.kubernetes.io/instance=jaeger-operator-jaeger -n verrazzano-monitoring    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n#sample output NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/jaeger-operator-jaeger-collector ClusterIP 10.96.120.223 \u003cnone\u003e 9411/TCP,14250/TCP,14267/TCP,14268/TCP 79m service/jaeger-operator-jaeger-collector-headless ClusterIP None \u003cnone\u003e 9411/TCP,14250/TCP,14267/TCP,14268/TCP 79m service/jaeger-operator-jaeger-query ClusterIP 10.96.209.196 \u003cnone\u003e 16686/TCP,16685/TCP 79m NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/jaeger-operator-jaeger-collector 1/1 1 1 79m deployment.apps/jaeger-operator-jaeger-query 1/1 1 1 79m Tracing port values will differ depending on the tracing endpoint:\n Zipkin, 9411 GRPC, 14250 HTTP, 14267 and 14268  Use Jaeger tracing in a multicluster Verrazzano environment If the Jaeger Operator component is enabled in the managed cluster, after successful registration with the admin cluster, a Jaeger collector service runs in the managed cluster, which exports the traces to the OpenSearch storage configured in the admin cluster.\nNOTES:\n Traces are exported to the admin cluster only when the Jaeger instance in the admin cluster is configured with OpenSearch storage. If the admin cluster is unavailable or the storage backend, OpenSearch, is not operational, then Jaeger will start dropping traces because it cannot buffer much data. To buffer large amounts of data, you would need to set up an intermediary queue, such as Kafka. This would prevent data loss from Jaeger collectors.  The following graphic illustrates managed clusters exporting data to the admin cluster, with Jaeger instances and OpenSearch backend storage.\nListing Jaeger resources in the managed cluster shows output similar to the following. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get jaegers -n verrazzano-monitoring    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n#sample output NAME STATUS VERSION STRATEGY STORAGE AGE jaeger-verrazzano-managed-cluster Running 1.34.1 production opensearch 11m Customize Jaeger Verrazzano installs the Jaeger Operator and Jaeger using the jaeger-operator Helm chart. Using Helm overrides specified in the Verrazzano custom resource, you can customize the installation configuration. For more information about setting component overrides, see Customizing the Chart Before Installing.\nThe following sections describe some common customizations you might want to employ:\n Customize a Jaeger instance to use an external OpenSearch for storage Enable Jaeger Service Performance Monitoring Disable default Jaeger instance creation Jaeger Operator Helm chart values that you cannot override Configure the Istio mesh to use Jaeger tracing Configure the Istio mesh in a managed cluster to export Jaeger traces to the admin cluster Manage Jaeger indices in OpenSearch  Customize a Jaeger instance to use an external OpenSearch for storage You can use the default Jaeger instance with an external OpenSearch cluster. The following example shows you how to configure Jaeger Operator Helm overrides in the Verrazzano custom resource to use an external OpenSearch cluster with a TLS CA certificate mounted from a volume and the user/password stored in a secret. For more details, see the Jaeger documentation.\n Prior to configuring the external OpenSearch for Jaeger in the Verrazzano custom resource, create a secret containing the OpenSearch credentials and certificates in the verrazzano-install namespace. Jaeger will use these credentials to connect to OpenSearch. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create secret generic jaeger-secret \\ --from-literal=ES_PASSWORD=\u003cOPENSEARCH PASSWORD\u003e \\ --from-literal=ES_USERNAME=\u003cOPENSEARCH USERNAME\u003e \\ --from-file=ca-bundle=\u003cpath to the file containing CA certs\u003e \\ -n verrazzano-install    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Use the Verrazzano custom resource to update the Jaeger resource: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:custom-jaeger-external-opensearchspec:profile:prodcomponents:jaegerOperator:enabled:trueoverrides:- values:jaeger:create:truespec:strategy:productionstorage:type:opensearchoptions:es:# Enter your OpenSearch cluster endpoint here.server-urls:\u003cExternal OpenSearch URL\u003eindex-prefix:jaegertls:ca:/verrazzano/certificates/ca-bundlesecretName:jaeger-secretvolumeMounts:- name:certificatesmountPath:/verrazzano/certificates/readOnly:truevolumes:- name:certificatessecret:secretName:jaeger-secret   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   Enable Jaeger Service Performance Monitoring NOTE: The Service Performance Monitoring (SPM) feature is currently considered experimental.\nTo enable Service Performance Monitoring in the default Jaeger instance created by Verrazzano, use the following Verrazzano custom resource. Verrazzano sets jaeger.spec.query.options.prometheus.server-url to the Prometheus server URL managed by Verrazzano, if it exists. To configure an external Prometheus server for your use case, override jaeger.spec.query.options.prometheus.server-url, jaeger.spec.query.options.prometheus.tls.enabled, and jaeger.spec.query.options.prometheus.tls.ca, appropriately, in the Verrazzano custom resource. For more details, see the Jaeger documentation. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:custom-jaegerspec:profile:prodcomponents:jaegerOperator:enabled:trueoverrides:- values:jaeger:spec:query:metricsStorage:type:prometheus   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nDisable default Jaeger instance creation If you have a custom Jaeger instance and want to disable the default Jaeger instance created by Verrazzano, then use the following Verrazzano custom resource: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:custom-jaegerspec:profile:prodcomponents:jaegerOperator:enabled:trueoverrides:- values:jaeger:create:false   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nJaeger Operator Helm chart values that you cannot override The following Jaeger Operator Helm values are not supported to be overridden in the Verrazzano custom resource:\n nameOverride fullnameOverride serviceAccount.name ingress.enabled jaeger.spec.storage.dependencies.enabled  If you try to override these Helm values in the Verrazzano custom resource, the request will be rejected and an error message returned.\nNOTE: Verrazzano does not support Jaeger Spark dependencies and hence, the Helm chart value jaeger.spec.storage.dependencies.enabled, which is set to false for the Jaeger instance managed by Verrazzano, cannot be overridden.\nConfigure the Istio mesh to use Jaeger tracing You can view Istio mesh traffic by enabling Istio’s distributed tracing integration. Traces from the Istio mesh provide observability on application traffic that passes through Istio’s ingress and egress gateways.\nIstio tracing is disabled by default. To turn on traces, customize your Istio component like the following example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:verrazzanospec:profile:prodcomponents:jaegerOperator:enabled:trueistio:overrides:- values:apiVersion:install.istio.io/v1alpha1kind:IstioOperatorspec:meshConfig:enableTracing:true   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAfter enabling tracing, Istio will automatically configure itself with the Jaeger instance managed by Verrazzano in your cluster, and Istio-injected pods will begin exporting traces to Jaeger.\nTo export traces to a different Jaeger instance than the one managed by Verrazzano, set meshConfig.defaultConfig.tracing.zipkin.address to the intended Jaeger Collector URL. Any new Istio-injected pods will begin exporting traces to the newly configured Jaeger instance. Existing pods require a restart to pull the new Istio configuration and start sending traces to the newly configured Jaeger instance. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:verrazzanospec:profile:prodcomponents:jaegerOperator:enabled:trueistio:overrides:- values:apiVersion:install.istio.io/v1alpha1kind:IstioOperatorspec:meshConfig:enableTracing:truedefaultConfig:tracing:zipkin:address:\u003caddress:port of your Jaeger collector service\u003e   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIstio’s default sampling rate is 1%, meaning 1 in 100 requests will be traced in Jaeger. If you want a different sampling rate, configure your desired rate using the meshConfig.defaultConfig.tracing.sampling Istio installation argument. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:verrazzanospec:profile:prodcomponents:jaegerOperator:enabled:trueistio:overrides:- values:apiVersion:install.istio.io/v1alpha1kind:IstioOperatorspec:meshConfig:enableTracing:truedefaultConfig:tracing:sampling:25.0   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nConfigure the Istio mesh in a managed cluster to export Jaeger traces to the admin cluster To export the Istio mesh traces in the managed cluster to the admin cluster, set meshConfig.defaultConfig.tracing.zipkin.address to the Jaeger Collector URL created in the managed cluster that exports the traces to the OpenSearch storage configured in the admin cluster.\nConfigure the Istio mesh on the managed cluster at the time of the Verrazzano installation, as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:verrazzanospec:profile:managed-clustercomponents:jaegerOperator:enabled:trueistio:overrides:- values:apiVersion:install.istio.io/v1alpha1kind:IstioOperatorspec:meshConfig:enableTracing:truedefaultConfig:tracing:zipkin:address:jaeger-verrazzano-managed-cluster-collector.verrazzano-monitoring.svc.cluster.local.:9411   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nManage Jaeger indices in OpenSearch To clean old Jaeger data from OpenSearch, Verrazzano uses the index management provided by Jaeger. By default, a cron job with the following default values is created to clean old traces. To configure it to your use case, override the following Jaeger spec values in the Verrazzano custom resource with your desired values. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: verrazzano spec: profile: prod components: jaegerOperator: enabled: true overrides: - values: jaeger: spec: storage: type: opensearch esIndexCleaner: # turn the cron job deployment on and off enabled: true # number of days to wait before deleting a record numberOfDays: 7 # cron expression for it to run schedule: \"55 23 * * *\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"Enable and configure Jaeger distributed tracing in Verrazzano","excerpt":"Enable and configure Jaeger distributed tracing in Verrazzano","ref":"/docs/observability/tracing/configure-tracing/","tags":"","title":"Configure Tracing Components"},{"body":"Before you begin You’ll need to:\n Set up an Oracle Cloud Infrastructure (OCI) account with a compartment Generate an SSH key pair to use for cluster authentication  Create a new OCNE cluster on OCI To provision new Oracle Cloud Native Environment (OCNE) managed clusters on OCI, complete the following steps:\n  Log in to the console. To find the console URL for your cluster, refer to Get console URLs and use the rancherURL value.\n  Open the navigation menu and select Cluster Management.\n  From the left menu, select Cloud Credentials, and then click Create. Cloud credentials store the credentials for your cloud infrastructure provider.\n  Choose Oracle.\n  Provide a name for the cloud credential and then fill in the fields. You can find the required information in your OCI configuration file. Click Create.\n  From the left menu, select Clusters, and then click Create.\n  Select Oracle OCNE on OCI and provide a name for the cluster.\n  Expand Member Roles to add any users that you want grant access to this cluster and their permissions.\n  Expand Labels and Annotations to configure Kubernetes labels and annotations for the cluster.\n  Select the cloud credentials that you created. Ensure that the appropriate Region and Compartment are selected from their drop-down lists.\n  Click Next.\n  Set up your network. Choose Quick Create to create a new virtual cloud network (VCN) configured to the specifications required for an OCNE cluster or Existing Infrastructure to use a VCN that’s already configured in your OCI account.\n  If you choose the Existing Infrastructure option, then select the compartment where your VCN is located from the VCN Compartment drop-down list, then the VCN itself from the Virtual Cloud Network drop-down list. Next, select subnets within the VCN for each of the Cloud Plane Subnet, Load Balancer Subnet, and Worker Node Subnet drop-down lists. See Configure a VCN for OCNE for requirements.\n  The VCN compartment does not need to match the compartment specified in the cloud credential.\n    Click Next.\n  Choose a Node Image from the drop-down list.\nYou can choose to override the default Node Image. Expand OCNE Image Configuration and provide a custom image OCID. If your custom image includes OCNE binaries, then you can select Skip OCNE Dependency Installation to avoid duplicates.\n  Copy or upload an SSH public key to manage authentication of the cluster. Your SSH public key is installed on the cluster nodes, enabling SSH after the cluster is created.\n  Configure the cluster control plane. Select the OCNE Version first because it determines which Kubernetes versions are available, then choose a Kubernetes Version and a Control Plane Shape. You can leave the rest of the options at their default setting or modify them as needed.\nUnder Advanced, you can choose to edit image tags for ETCD, CoreDNS, and Calico, or whether to install OCI CCM/CSI and Calico.\n  Add node pools to your cluster. Clusters without node pools will schedule pods on control plane nodes.\n  (Optional) Install Verrazzano on the cluster. Choose a Verrazzano version from the drop-down list. You can also expand Advanced to make changes to the Verrazzano Resource YAML. By default, Verrazzano is installed using the managed-cluster profile which enables a limited set of components on the cluster.\n  Expand Advanced Settings to make additional modifications to the default settings of your new cluster.\n YAML Manifests: Supply additional YAML manifests that are automatically installed after cluster creation. The total size of all additional YAML manifests may not exceed 500 KB. Cluster Networking: Configure cluster IP ranges and proxy settings. Container Registry: Specify a private registry for your container.    Click Create. It can take up to 30 minutes to provision all of the resources for your cluster, particularly for multi-node clusters.\n  When your cluster finishes provisioning, you can access it from the main Cluster Management page.\nFor help troubleshooting cluster creation, see OCNE Cluster Creation Issues.\n","categories":"","description":"Add Oracle Cloud Native Environment self-managed clusters running on OCI to your multicluster environment","excerpt":"Add Oracle Cloud Native Environment self-managed clusters running on OCI to your multicluster environment","ref":"/docs/setup/provision-cluster/ocne-oci/","tags":"","title":"Create OCNE Clusters running on OCI"},{"body":"Verrazzano requires the following load balancers at installation:\n Load balancer for NGINX ingress Load balancer for Istio ingress  By default, Verrazzano automatically creates them as Kubernetes-managed load balancers, however, you have the option to use your own external load balancers. You can choose to replace either or both load balancers.\nThe following is an example of using external load balancers for both management and application ingress.\nPrepare the external load balancers   External load balancer for management ingress:\n This load balancer must have a listener set up on port 443 with TCP protocol. The back end set for this listener needs to include the Kubernetes cluster node IP addresses on a port you pick, for example, 31443.    External load balancer for application ingress:\n This load balancer must have a listener set up on port 443 with TCP protocol. The back end set for this listener needs to include the Kubernetes cluster node IP addresses on a port you pick, for example, 32443.    Verrazzano installation options   External load balancer for management ingress:\n  Set NodePort as the ingress type in the Ingress Component.\n  Set controller.service.externalIPs with the IP address for the external management load balancer in the Ingress NGINX Overrides.\nNOTE: If the ingress type is NodePort, then a valid and accessible IP address must be specified using the controller.service.externalIPs key in NGINXInstallArgs.\n  Set ports in the Ingress Component with a PortConfig that has 443 as port, 31443 as nodePort, https as targetPort, and TCP as protocol.\n    External load balancer for application ingress using the Istio ingress gateway overrides:\n Set service Type to NodePort. Set service externalIPs to the external application load balancer IP address. Set service ports with a https named entry, 443 as port, 32443 as nodePort, 8443 as targetPort, and TCP as protocol.    Example Custom Resource with management and application external load balancers code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: myvz spec: components: ingressNGINX: overrides: - values: controller: service: externalIPs: - 11.22.33.44 type: NodePort ports: - name: https port: 443 nodePort: 31443 protocol: TCP targetPort: https istio: overrides: - values: apiVersion: install.istio.io/v1alpha1 kind: IstioOperator spec: components: ingressGateways: - enabled: true name: istio-ingressgateway k8s: service: type: NodePort ports: - name: https port: 443 nodePort: 32443 protocol: TCP targetPort: 8443 externalIPs: - 11.22.33.55    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"External load balancers for Verrazzano management and application endpoints","excerpt":"External load balancers for Verrazzano management and application endpoints","ref":"/docs/networking/traffic/externallbs/","tags":"","title":"Customize External Load Balancers"},{"body":"Verrazzano supports two cluster topologies for an OpenSearch cluster:\n A single-node cluster: master, ingest, and data roles performed by a single node. A multi-node cluster configuration with separate master, data, and ingest nodes.  For information about the default OpenSearch cluster configurations provided by Verrazzano, see Installation Profiles.\nPlan cluster topology Start with an initial estimate of your hardware needs. The following recommendations will provide you with initial, educated estimates, but for ideal sizing, you will need to test them with representative workloads, monitor their performance, and then reiterate.\nStorage requirements    Input Description Value     \\(s\\) Stored data size in GiB (log size per day * days to retain). User defined   \\(sr\\) Shard replica count per index. User defined   \\(o\\) Overall overhead, which is a constant. 1.45    Minimum storage requirement = \\( ( s * ( 1 + sr ) ) * o \\)\nExample If you have \\(s\\) = 66 GiB (6 GiB of log size per day * 11 days to retain) and, if you choose one shard replica per index, which makes \\(sr\\) = 1\nThen, minimum storage requirement = \\((66 * (1 + 1) ) * 1.45\\) = 192 GiB\nOverhead, which is defined in the previous table, can be further explained as follows.\n   Input Description Value     \\(io\\) Indexing overhead: Extra space used other than the actual data, which is generally 10% ( 0.1 ) of the index size. 1 + 0.1 = 1.1   \\(lrs\\) Linux reserved space: Linux reserves 5% of the file system for the root user for some OS operations. 1- 0.05 = .95   \\(oo\\) OpenSearch overhead: OpenSearch keeps a maximum 20% of the instance for segment merges, logs, and other internal operations. 1- 0.2 = 0.8    Overall overhead \\(o\\) = \\( io / lrs / oo \\) = 1.45\nMemory For every 100 GiB of your storage requirement, you should have 8 GiB of memory.\nWith reference to the Example:\nFor 192 GiB of storage requirement, you need 16 GiB of memory.\nNumber of data nodes    Input Description Value     \\(ts\\) Total storage in GiB. User defined   \\(mem\\) Memory per data node in GiB. User defined   \\(md\\) Memory:data ratio (1:30 ratio means that you have 30 times more storage on the node than you have RAM; the value used would be 30). User defined   \\(fc\\) One data node for failover capacity, which is a constant. 1    ROUNDUP \\(ts / mem / md + fc\\)\nWith reference to the Example:\n\\(ts\\) = 192 GiB , \\(mem\\) = 8 GiB , \\(md\\) = 1:10 and \\(fc\\) = 1\nThen, number of data nodes = ROUNDUP \\( 192 / 8 / 10 + 1 \\) = 3\nJVM heap memory The heap size is the amount of RAM allocated to the JVM of an OpenSearch node. The OpenSearch process is very memory intensive and close to 50% of the memory available on a node should be allocated to the JVM. The JVM machine uses memory for indexing and search operations. The other 50% is required for the file system cache, which keeps data that is regularly accessed in memory. As a general rule, you should set -Xms and -Xmx to the same value, which should be 50% of your total available RAM, subject to a maximum of (approximately) 31 GiB.\nCPU Hardware requirements vary dramatically by workload, but, typically, two vCPU cores for every 100 GiB of your storage requirement is sufficient.\nWith reference to the Example:\nFor 192 GiB of storage, the vCPU cores required are four.\nShard size For logging, shard sizes between 10 GiB and 50 GiB typically perform well. For search-intensive operations, 10-25 GiB typically is a good shard size. Overall, it is a best practice that, for a single shard, the OpenSearch shard size should not go above 50GiB. When the shards exceed 50 GiB, you will have to reindex your data.\nPrimary shards count    Input Description Value     \\(s\\) Stored data size in GiB (log size per day * days to retain). User defined   \\(sh\\) Desired shard size in GiB. User defined   \\(io\\) Indexing overhead: Extra space used other than the actual data which is generally 10% of the index size. 0.1    Primary shards = \\( ( s * (1 + io) ) / sh \\)\nWith reference to the Example:\n\\(s\\) = 66 GiB and if you choose shard size \\(sh\\) = 30 GiB\nThen, primary shards count = \\( ( 66 * 1.1 )/ 30 \\) = 2\nRecommended alarms You can customize Prometheus to enable Alertmanager and configure recommended alarms (add alert rules) to get insight into your OpenSearch cluster and take some actions proactively.\nUse the OSDataNodeFilesystemSpaceFillingUp alert to indicate that the OpenSearch average disk usage has exceeded the specified threshold. Adjust the alert thresholds according to your needs.\nkubectl apply -f - \u003c\u003cEOFapiVersion:monitoring.coreos.com/v1kind:PrometheusRulemetadata:labels:release:prometheus-operatorname:prometheus-operator-osnamespace:verrazzano-monitoringspec:groups:- name:osrules:- alert:OSDataNodeFilesystemSpaceFillingUpannotations:runbook_url:\u003clink to runbook\u003esummary:Opensearch average disk usage exceeded 75%.expr:|-1- (es_fs_total_available_bytes{node=~\".*data.*\"}/ es_fs_total_total_bytes) \u003e .75for:30mlabels:severity:warningEOFConfigure cluster topology You can customize the node characteristics of your OpenSearch cluster by using the spec.components.opensearch.nodes field in the Verrazzano custom resource. When installing or upgrading Verrazzano, you can use this field to define an OpenSearch cluster using node groups.\nThe following example overrides the dev installation profile, OpenSearch configuration (a single-node cluster with 1Gi of memory and ephemeral storage) to use a multi-node cluster (three master nodes, and three combination data/ingest nodes) with persistent storage.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:custom-opensearch-examplespec:profile:devcomponents:opensearch:nodes:- name:masterreplicas:3roles:- masterstorage:size:50Giresources:requests:memory:1.5Gi- name:data-ingestreplicas:3roles:- data- ingeststorage:size:100Giresources:requests:memory:1Gi# Override the default node groups because we are providing our own topology.- name:es-masterreplicas:0- name:es-datareplicas:0- name:es-ingestreplicas:0   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Listing the pods and persistent volumes in the verrazzano-system namespace for the previous configuration shows that the expected nodes are running with the appropriate data volumes. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pvc,pod -l verrazzano-component=opensearch -n verrazzano-system # Sample output NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE persistentvolumeclaim/elasticsearch-master-vmi-system-master-0 Bound pvc-9ace042a-dd68-4975-816d-f2ca0dc4d9d8 50Gi RWO standard 5m22s persistentvolumeclaim/elasticsearch-master-vmi-system-master-1 Bound pvc-8bf68c2c-235e-4bd5-8741-5a5cd3453934 50Gi RWO standard 5m21s persistentvolumeclaim/elasticsearch-master-vmi-system-master-2 Bound pvc-da8a48b1-5762-4669-98f0-8479f30043fc 50Gi RWO standard 5m21s persistentvolumeclaim/vmi-system-data-ingest Bound pvc-7ad9f275-632b-4aac-b7bf-c5115215937c 100Gi RWO standard 5m23s persistentvolumeclaim/vmi-system-data-ingest-1 Bound pvc-8a293e51-2c20-4cae-916b-1ce46a780403 100Gi RWO standard 5m23s persistentvolumeclaim/vmi-system-data-ingest-2 Bound pvc-0025fcef-1d8c-4307-977c-3921545c6730 100Gi RWO standard 5m22s NAME READY STATUS RESTARTS AGE pod/coherence-operator-6ffb6bbd4d-bpssc 1/1 Running 1 8m2s pod/fluentd-ndshl 2/2 Running 0 5m51s pod/oam-kubernetes-runtime-85cfd899d8-z9gv6 1/1 Running 0 8m14s pod/verrazzano-application-operator-5fbcdf6655-72tw9 1/1 Running 0 7m49s pod/verrazzano-authproxy-5f9d479455-5bvvt 2/2 Running 0 7m43s pod/verrazzano-console-5b857d7b47-djbrk 2/2 Running 0 5m51s pod/verrazzano-monitoring-operator-b4b446567-pgnfw 2/2 Running 0 5m51s pod/vmi-system-data-ingest-0-5485dcd95d-rkhvk 2/2 Running 0 5m21s pod/vmi-system-data-ingest-1-8d7db6489-kdhbv 2/2 Running 1 5m21s pod/vmi-system-data-ingest-2-699d6bdd9c-z7nzx 2/2 Running 0 5m21s pod/vmi-system-grafana-7947cdd84b-b7mks 2/2 Running 0 5m21s pod/vmi-system-kiali-6c7bd6658b-d2zq9 2/2 Running 0 5m37s pod/vmi-system-osd-7d47f65dfc-zhjxp 2/2 Running 0 5m21s pod/vmi-system-master-0 2/2 Running 0 5m21s pod/vmi-system-master-1 2/2 Running 0 5m21s pod/vmi-system-master-2 2/2 Running 0 5m21s pod/weblogic-operator-666b548749-lj66t 2/2 Running 0 7m48s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nRunning the command kubectl describe pod -n verrazzano-system vmi-system-data-ingest-0-5485dcd95d-rkhvk shows the requested amount of memory. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  Containers: es-data: ... Requests: memory: 1Gi    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nDefault Index State Management policies Index State Management (ISM) policies configure OpenSearch to manage the data in your indices. You can use policies to automatically rollover and prune old data, preventing your OpenSearch cluster from running out of disk space.\nTo help you manage issues, such as low disk space, the following two ISM policies are created by default:\n  vz-system: Manages the data in the Verrazzano system index.\n  vz-application: Manages the data in the application-related indices having the pattern, verrazzano-application*.\n  Both ISM policies have the same configuration, consisting of two states:\n Hot: This is the default state. If the primary shard size is greater than 5 GB or the index age is greater than 21 days, then the index will be rolled over. Fourteen days after the index has rolled over, it will transition to the Delete state. Delete: In this state, the index will be deleted. Fourteen days after being rolled over, the indices will reach this state.  Override default ISM policies The default ISM policies may not be suitable depending on the rate at which your OpenSearch cluster is ingesting data. Therefore, you may need to override the default ISM policies to meet your requirements.\nThe vz-system and vz-application policies are immutable and any change to these policies will be reverted immediately. However, the following two methods will override this behavior:\n Disable default policies: You can disable the default policies by setting the flag spec.components.opensearch.disableDefaultPolicy to true in the Verrazzano CR. This will delete the default ISM policies and remove the policies from indices that are ingesting data. However, the deleted policies are not removed from older indices. To manually remove the policies from older indices, see Remove policy from index. Override default policies: Both these default policies have a zero (0) priority. You can override the default policies by creating policies with policy.ism_template.priority greater than 0 for same index pattern. To configure your own policies, see Configure ISM Policies.  NOTE  Avoid creating policies with policy IDs vz-system or vz-application because they are reserved for Verrazzano default policies names. In the Verrazzano CR, by default, if the flag spec.components.opensearch.disableDefaultPolicy is set to false, then policies that are created with these names will be overridden with the default ISM policies, . The default policy will be applied to the newly created indices and the indices which are ingesting data. To manually attach the new policies to the older indices, see Step 2: Attach policies to indexes.   Configure ISM policies Verrazzano lets you configure OpenSearch ISM policies using the Verrazzano custom resource. The ISM policy created by Verrazzano will contain two states: ingest and delete. The ingest state can be configured only for the rollover action. The rollover action for the ingest state will be configured based on the rollover configuration provided in the Verrazzano custom resource.\nThe following policy example configures OpenSearch to manage indices matching the pattern my-app-*. The data in these indices will be automatically pruned every 14 days, and will be rolled over if an index meets at least one of the following criteria:\n Is three or more days old Contains 1,000 documents or more Is 10 GB in size or larger  code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:custom-opensearch-examplespec:profile:devcomponents:opensearch:policies:- policyName:my-appindexPattern:my-app-*minIndexAge:14drollover:minIndexAge:3dminDocCount:1000minSize:10gb   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The previous Verrazzano custom resource will generate the following ISM policy.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  {  \"_id\" : \"my-app\",  \"_version\" : 17,  \"_seq_no\" : 16,  \"_primary_term\" : 1,  \"policy\" : {  \"policy_id\" : \"my-app\",  \"description\" : \"__vmi-managed__\",  \"last_updated_time\" : 1671096525963,  \"schema_version\" : 12,  \"error_notification\" : null,  \"default_state\" : \"ingest\",  \"states\" : [  {  \"name\" : \"ingest\",  \"actions\" : [  {  \"rollover\" : {  \"min_size\" : \"10gb\",  \"min_doc_count\" : 1000,  \"min_index_age\" : \"3d\"  }  }  ],  \"transitions\" : [  {  \"state_name\" : \"delete\",  \"conditions\" : {  \"min_index_age\" : \"14d\"  }  }  ]  },  {  \"name\" : \"delete\",  \"actions\" : [  {  \"delete\" : { }  }  ],  \"transitions\" : [ ]  }  ],  \"ism_template\" : [  {  \"index_patterns\" : [  \"my-app-*\"  ],  \"priority\" : 1,  \"last_updated_time\" : 1671096525963  }  ]  } }    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  NOTE: The ISM policy created using the Verrazzano custom resource contains a minimal set of configurations. To create a more detailed ISM policy, you can also use the OpenSearch REST API. To create a policy using the OpenSearch API, do the following:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ PASS=$(kubectl get secret \\  --namespace verrazzano-system verrazzano \\  -o jsonpath={.data.password} | base64 \\  --decode; echo)  $ HOST=$(kubectl get ingress \\  -n verrazzano-system vmi-system-os-ingest \\  -o jsonpath={.spec.rules[0].host})  $ curl -ik -X PUT --user verrazzano:$PASS https://$HOST/_plugins/_ism/policies/policy_3 \\  -H 'Content-Type: application/json' \\  --data-binary @- \u003c\u003c EOF { \"policy\": { \"description\": \"ingesting logs\", \"default_state\": \"ingest\", \"states\": [ { \"name\": \"ingest\", \"actions\": [ { \"rollover\": { \"min_doc_count\": 5 } } ], \"transitions\": [ { \"state_name\": \"search\" } ] }, { \"name\": \"search\", \"actions\": [], \"transitions\": [ { \"state_name\": \"delete\", \"conditions\": { \"min_index_age\": \"5m\" } } ] }, { \"name\": \"delete\", \"actions\": [ { \"delete\": {} } ], \"transitions\": [] } ] } } EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  To view existing policies, do the following:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -ik \\  --user verrazzano:$PASS https://$HOST/_plugins/_ism/policies    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Override the default index template Verrazzano provides a default index template, verrazzano-data-stream. For creating an index, the default index template has a few predefined settings, like the number of shards and replicas, dynamic mappings for fields, and such. However, you can override the default index template and use your own, preferred index template.\nTo do that, you need to copy the contents of the default index template and change the settings, as desired, and then create your index template with a higher priority so that the new template will override the default one.\nYou can use the OpenSearch Dev Tools Console to send given queries to OpenSearch. To open the console, select Dev Tools on the main OpenSearch Dashboards page and write your queries in the editor pane on the left side of the console.\nTo get the existing, default template: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ GET /_index_template/verrazzano-data-stream   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nOverride default number of shards and replicas In initial Verrazzano v1.5 installations (not upgrades), the default index template creates one shard and one replica for each index. (In previous and upgrade installations, it creates five shards and one replica). To change the default number of shards and replicas, get the default index template, change the number of shards and replicas to the desired values, and create a new index template with higher priority.\nHere is an example that creates a new index template and changes the number of shards to 3 and replicas to 2. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ PUT _index_template/my-template{\"index_patterns\":[\"verrazzano-application-myapp*\"],\"template\":{\"settings\":{\"index\":{\"mapping\":{\"total_fields\":{\"limit\":\"2000\"}},\"refresh_interval\":\"5s\",\"number_of_shards\":\"3\",\"auto_expand_replicas\":\"0-1\",\"number_of_replicas\":\"2\"}},\"mappings\":{\"dynamic_templates\":[{\"message_field\":{\"path_match\":\"message\",\"mapping\":{\"norms\":false,\"type\":\"text\"},\"match_mapping_type\":\"string\"}},{\"object_fields\":{\"mapping\":{\"type\":\"object\"},\"match_mapping_type\":\"object\",\"match\":\"*\"}},{\"all_non_object_fields\":{\"mapping\":{\"norms\":false,\"type\":\"text\",\"fields\":{\"keyword\":{\"ignore_above\":256,\"type\":\"keyword\"}}},\"match\":\"*\"}}],\"properties\":{\"@timestamp\":{\"format\":\"strict_date_time||strict_date_optional_time||epoch_millis\",\"type\":\"date\"}}}},\"priority\":201,\"data_stream\":{\"timestamp_field\":{\"name\":\"@timestamp\"}}}   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  With this example, new indices that match the verrazzano-application-myapp* index pattern will be created with three shards and two replicas, and other indices that don’t match will continue to be created with the default number of shards and replicas. For more information, see Index templates  in the OpenSearch documentation.\nOverride default mappings and field types The default index template uses dynamic mapping to store all fields as text and keyword. For your application, if you want to store a field as a different type, get the default index template, change the mappings for the desired fields, and then create a new index template with a higher priority.\nHere is an example that creates a new index template, for applications in the myapp* namespace, which dynamically maps all long fields to integers and explicitly maps age and ip_address fields as integer and ip respectively.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ PUT _index_template/my-template{\"index_patterns\":[\"verrazzano-application-myapp*\"],\"template\":{\"settings\":{\"index\":{\"mapping\":{\"total_fields\":{\"limit\":\"2000\"}},\"refresh_interval\":\"5s\",\"number_of_shards\":\"1\",\"auto_expand_replicas\":\"0-1\",\"number_of_replicas\":\"0\"}},\"mappings\":{\"dynamic_templates\":[{\"long_as_int\":{\"mapping\":{\"type\":\"integer\"},\"match_mapping_type\":\"long\"}},{\"message_field\":{\"path_match\":\"message\",\"mapping\":{\"norms\":false,\"type\":\"text\"},\"match_mapping_type\":\"string\"}},{\"object_fields\":{\"mapping\":{\"type\":\"object\"},\"match_mapping_type\":\"object\",\"match\":\"*\"}},{\"all_non_object_fields\":{\"mapping\":{\"norms\":false,\"type\":\"text\",\"fields\":{\"keyword\":{\"ignore_above\":256,\"type\":\"keyword\"}}},\"match\":\"*\"}}],\"properties\":{\"@timestamp\":{\"format\":\"strict_date_time||strict_date_optional_time||epoch_millis\",\"type\":\"date\"},\"age\":{\"type\":\"integer\"},\"ip_address\":{\"type\":\"ip\",\"ignore_malformed\":true}}}},\"priority\":201,\"data_stream\":{\"timestamp_field\":{\"name\":\"@timestamp\"}}}   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  With this example, new indices that match the verrazzano-application-myapp* index pattern will store age and ip_address fields as integer and ip instead of text. Also, long data fields will be stored as integer. For more information, see Mappings and field types in the OpenSearch documentation.\nConfigure pre-existing indices after overriding the default index template For your application, if you already have indices created by OpenSearch that are based on the default index template, then complete the steps in the following sections to configure them.\nRollover data stream The mappings for existing indices cannot be changed, so you will need to rollover the data stream for your application to create an index. Then, OpenSearch will start indexing data based on the newer template that you created.\nTo rollover the data stream:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  POST /verrazzano-application-myapp/_rollover   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  NOTE: The default ISM policy that Verrazzano provides regularly rolls over the index after meeting certain conditions, so there might not be a requirement to manually rollover the index.\nRefresh the index pattern To see the updated mappings for your fields on the Discover page, you need to refresh the index pattern for your application.\nTo refresh the index pattern:\n On the main OpenSearch Dashboards page, under the Management section, navigate to Stack Management in the Dock. Then, go to Index Pattern \u003e verrazzano-application*. If you have created a separate index pattern for your application, then select that. Click the Refresh field list icon in the upper, right-hand side of the page.  Reindex indices After refreshing the field list, if you see a warning about a mapping conflict, you need to reindex your previous indices. The mapping conflict arises because the previous indices have different mappings for fields than the newer indices, which were created based on the new index template with different mappings.\nTo reindex previous indices:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  POST _reindex{\"conflicts\":\"proceed\",\"source\":{\"index\":[\".ds-verrazzano-application-myapp-000001\"]},\"dest\":{\"index\":\"verrazzano-application-myapp\",\"op_type\":\"create\"}}   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Under source, list all the previous indices that were created based on the default index template. After reindexing is complete, Refresh the index pattern again. For more information, see Reindex data in the OpenSearch documentation.\nInstall OpenSearch and OpenSearch Dashboards plug-ins Verrazzano supports OpenSearch and OpenSearch Dashboard plug-in installation by providing plug-ins in the Verrazzano custom resource. To install plug-ins for OpenSearch, you define the field spec.components.opensearch.plugins in the Verrazzano custom resource.\nThe following Verrazzano custom resource example installs the analysis-stempel and opensearch-anomaly-detection plug-ins for OpenSearch:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:custom-opensearch-examplespec:profile:devcomponents:opensearch:plugins:enabled:trueinstallList:- analysis-stempel- https://repo1.maven.org/maven2/org/opensearch/plugin/opensearch-anomaly-detection/2.2.0.0/opensearch-anomaly-detection-2.2.0.0.zip   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Pre-built plug-ins for OpenSearch Here are some pre-built plug-ins that are bundled with the OpenSearch image:\n analysis-icu analysis-kuromoji analysis-phonetic analysis-smartcn ingest-attachment mapper-murmur3 mapper-size opensearch-alerting opensearch-index-management opensearch-job-scheduler opensearch-notifications opensearch-notifications-core prometheus-exporter repository-s3  There are three ways to specify a plug-in in the plugins.installList:\n  Specify a plug-in by name:\nThere are some pre-built additional plug-ins that are the only plug-ins you can install by name.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  installList:- analysis-icu   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Specify a plug-in from a remote ZIP file:\nProvide the URL to a remote ZIP file that contains the required plug-in. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  installList:- https://repo1.maven.org/maven2/org/opensearch/plugin/opensearch-anomaly-detection/2.2.0.0/opensearch-anomaly-detection-2.2.0.0.zip   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Specify a plug-in using Maven coordinates:\nProvide the Maven coordinates for the available artifacts and versions hosted on Maven Central. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  installList:- org.opensearch.plugin:opensearch-anomaly-detection:2.2.0.0   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  NOTE  Adding a new plug-in to the plugins.installList or removing a plug-in from the plugins.installList will result in restarting the OpenSearch related pods. To verify that a plug-in has installed successfully, make sure that no pod is in the CrashLoopBackOff state and the plug-in functionality is working fine. If there is any error during plug-in installation, then one of the OS master pods will go into the CrashLoopBackOff state, while other pods will still be in the Running state, and the OpenSearch cluster will be healthy and functional. Check the logs for the exact reason of the failure. Your environment must be able to connect to the Internet to access the provided plug-in URL or Maven Central to install the plug-in. In the case of an Internet issue, you might see SocketException or UnknownHostException exceptions in the logs. To resolve this issue, make sure that the pods are connected to the Internet. To be compatible, major, minor, and patch plug-in versions must match the OpenSearch major, minor, and patch versions. For example, plug-ins versions 2.3.0.x are compatible only with OpenSearch version 2.3.0.     For OpenSearch Dashboard, you can provide the plug-ins by defining the field spec.components.opensearch-dashboards.plugins in the Verrazzano custom resource.\nPre-built plug-ins for OpenSearch Dashboards Here are pre-built plug-ins that are bundled with the OpenSearch Dashboard image:\n alertingDashboards indexManagementDashboards notificationsDashboards  Here is a Verrazzano custom resource example to install plug-ins for the OpenSearch Dashboards: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:custom-opensearch-examplespec:profile:devcomponents:opensearchDashboards:plugins:enabled:trueinstallList:- \u003cURL to OpenSearch Dashboard plugin ZIP file\u003e   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"Customize your OpenSearch cluster configuration","excerpt":"Customize your OpenSearch cluster configuration","ref":"/docs/observability/logging/configure-opensearch/opensearch/","tags":"","title":"Customize OpenSearch"},{"body":"Verrazzano and OAM provide workloads and Traits to define and customize applications. However, some situations may require resources beyond those provided. In those cases, you can use other existing Kubernetes resources. The todo-list example takes advantage of this capability in several Components to support unique Service and ConfigMap requirements.\nMost Kubernetes resources can be embedded as a workload within a Component. The following sample shows how a Deployment can be embedded as a workload within a Component. The oam-kubernetes-runtime operator will process the Component and extract the Deployment to a separate resource during deployment. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:Component...spec:workload:kind:DeploymentapiVersion:apps/v1name:...spec:selector:...template:...   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nMost Kubernetes resources can also be embedded as a Trait within an ApplicationConfiguration. The following sample shows how an Ingress can be embedded as a trait within an ApplicationConfiguration. The oam-kubernetes-runtime operator will process the ApplicationConfiguration and extract the Ingress to a separate resource during deployment. In the following sample, note that the Ingress is the Kubernetes Ingress, not the IngressTrait provided by Verrazzano. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:ApplicationConfiguration...spec:components:- componentName:...traits:- trait:apiVersion:networking.k8s.io/v1beta1kind:Ingress...spec:rules:...   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The oam-kubernetes-runtime operator has the following limited set of cluster role privileges, by default.\n   API Groups Resources Verbs      configmaps, events, services create, delete, deletecollection, get, list, patch, update, watch    persistentvolumeclaims create, delete, deletecollection, get, list, patch, update   apps deployments, controllerrevisions create, delete, deletecollection, get, list, patch, update, watch   core.oam.dev * create, delete, deletecollection, get, list, patch, update, watch   oam.verrazzano.io * create, delete, deletecollection, get, list, patch, update, watch    Your cluster administrator may need to grant the oam-kubernetes-runtime operator additional privileges to enable the use of some Kubernetes resources as workloads or traits. Create additional roles and role bindings for the specific resources to be embedded as workloads or traits. The following examples of ClusterRole and ClusterRoleBinding show how oam-kubernetes-runtime can be granted privileges to manage Ingress resources. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:rbac.authorization.k8s.io/v1kind:ClusterRolemetadata:name:oam-kubernetes-runtime-ingressesrules:- apiGroups:- networking.k8s.io- extensionsresources:- ingressesverbs:- create- delete- get- list- patch- update   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:rbac.authorization.k8s.io/v1kind:ClusterRoleBindingmetadata:name:oam-kubernetes-runtime-ingressesroleRef:apiGroup:rbac.authorization.k8s.iokind:ClusterRolename:oam-kubernetes-runtime-ingressessubjects:- kind:ServiceAccountname:oam-kubernetes-runtimenamespace:verrazzano-system   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"","excerpt":"Verrazzano and OAM provide workloads and Traits to define and customize applications. However, some situations may require resources beyond those provided. In those cases, you can use other existing …","ref":"/docs/applications/kubernetes/","tags":"","title":"Deploy Applications Using Kubernetes Objects"},{"body":"NOTE: The following procedure is for a cluster in which Rancher is enabled on the admin cluster. If Rancher is not enabled, then additional steps are required to deregister a managed cluster, see Deregister a managed cluster without Rancher.\nIf you want to deregister a managed cluster because you no longer want it to be part of a Verrazzano multicluster environment, then log in to the Rancher console and delete the managed cluster. To delete a cluster in Rancher, see What if I don’t want my registered cluster managed by Rancher? This results in the cluster being deregistered from Verrazzano. The associated VerrazzanoManagedCluster resource will be automatically deleted, and, if present, then the Argo CD registration of the managed cluster also will be removed.\nAlternatively, you can deregister a managed cluster by deleting the VerrazzanoManagedCluster resource. This will result in the automatic cleanup of the Rancher cluster, as well as the Argo CD registration, if it is present. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ delete vmc -n verrazzano-mc managed1    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: Even after deregistration, any applications that you deployed previously to the managed cluster will continue running on that cluster.\n","categories":"","description":"Deregister managed clusters in your multicluster Verrazzano environment","excerpt":"Deregister managed clusters in your multicluster Verrazzano environment","ref":"/docs/setup/mc-install/deregister-install/","tags":"","title":"Deregister a Managed cluster"},{"body":"Prerequisites  Access to an existing Kubernetes cluster with Verrazzano installed. Access to the application’s image in GitHub Container Registry. Confirm access using this command to pull the example’s Docker image: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ docker pull ghcr.io/verrazzano/example-helidon-greet-app-v1:0.1.12-1-20210218160249-d8db8f3    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   Application development This section uses an example application which was written with Java and Helidon. For the implementation details, see the Helidon MP tutorial. See the application source code in the Verrazzano examples repository.\nThe example application is a JAX-RS service and implements the following REST endpoints:\n /greet - Returns a default greeting message that is stored in memory. This endpoint accepts the GET HTTP request method. /greet/{name} - Returns a greeting message including the name provided in the path parameter. This endpoint accepts the GET HTTP request method. /greet/greeting - Changes the greeting message to be used in future calls to the other endpoints. This endpoint accepts the PUT HTTP request method and a JSON payload.  The following code shows a portion of the application’s implementation. The Verrazzano examples repository contains the complete implementation. An important detail here is that the application contains a single resource exposed on path /greet.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  package io.helidon.examples.quickstart.mp; ... @Path(\"/greet\") @RequestScoped public class GreetResource {   @GET  @Produces(MediaType.APPLICATION_JSON)  public JsonObject getDefaultMessage() {  ...  }   @Path(\"/{name}\")  @GET  @Produces(MediaType.APPLICATION_JSON)  public JsonObject getMessage(@PathParam(\"name\") String name) {  ...  }   @Path(\"/greeting\")  @PUT  @Consumes(MediaType.APPLICATION_JSON)  ...  public Response updateGreeting(JsonObject jsonObject) {  ...  }  }    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  A Dockerfile is used to package the completed application JAR file into a Docker image. The following code shows a portion of the Dockerfile. The Verrazzano examples repository contains the complete Dockerfile. Note that the Docker container exposes a single port 8080.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  FROMghcr.io/oracle/oraclelinux:7-slim...CMD java -cp /app/helidon-quickstart-mp.jar:/app/* io.helidon.examples.quickstart.mp.MainEXPOSE8080   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Application deployment When you deploy applications with Verrazzano, the platform sets up connections, network policies, and ingresses in the service mesh, and wires up a monitoring stack to capture the metrics, logs, and traces. Verrazzano employs OAM Components to define the functional units of a system that are then assembled and configured by defining associated application configurations.\nVerrazzano components A Verrazzano OAM Component is a Kubernetes Custom Resource describing an application’s general composition and environment requirements. The following code shows the component for the example application used in this guide. This resource describes a component which is implemented by a single Docker image containing a Helidon application exposing a single endpoint.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:Componentmetadata:name:hello-helidon-componentnamespace:hello-helidonspec:workload:apiVersion:oam.verrazzano.io/v1alpha1kind:VerrazzanoHelidonWorkloadmetadata:name:hello-helidon-workloadlabels:app:hello-helidonspec:deploymentTemplate:metadata:name:hello-helidon-deploymentpodSpec:containers:- name:hello-helidon-containerimage:\"ghcr.io/verrazzano/example-helidon-greet-app-v1:0.1.10-3-20201016220428-56fb4d4\"ports:- containerPort:8080name:http   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  A brief description of each field of the component:\n apiVersion - Version of the component custom resource definition kind - Standard name of the component custom resource definition metadata.name - The name used to create the component’s custom resource metadata.namespace - The namespace used to create this component’s custom resource spec.workload.kind - VerrazzanoHelidonWorkload defines a stateless workload of Kubernetes spec.workload.spec.deploymentTemplate.podSpec.metadata.name - The name used to create the stateless workload of Kubernetes spec.workload.spec.deploymentTemplate.podSpec.containers - The implementation containers spec.workload.spec.deploymentTemplate.podSpec.containers.ports - Ports exposed by the container  Verrazzano application configurations A Verrazzano application configuration is a Kubernetes Custom Resource which provides environment specific customizations. The following code shows the application configuration for the example used in this guide. This resource specifies the deployment of the application to the hello-helidon namespace. Additional runtime features are specified using traits, or runtime overlays that augment the workload. For example, the ingress trait specifies the ingress host and path, while the metrics trait optionally provides the Prometheus scraper used to obtain the application related metrics. If no metrics trait is specified, the Verrazzano-supplied Prometheus component is used by default. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:ApplicationConfigurationmetadata:name:hello-helidon-appconfnamespace:hello-helidonannotations:version:v1.0.0description:\"Hello Helidon application\"spec:components:- componentName:hello-helidon-componenttraits:- trait:apiVersion:oam.verrazzano.io/v1alpha1kind:MetricsTraitspec:scraper:\u003coptionally specify custom scraper\u003e- trait:apiVersion:oam.verrazzano.io/v1alpha1kind:IngressTraitmetadata:name:hello-helidon-ingressspec:rules:- paths:- path:\"/greet\"pathType:Prefix   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nA brief description of each field in the application configuration:\n apiVersion - Version of the ApplicationConfiguration custom resource definition kind - Standard name of the application configuration custom resource definition metadata.name - The name used to create this application configuration resource metadata.namespace - The namespace used for this application configuration custom resource spec.components - Reference to the application’s components leveraged to specify runtime configuration spec.components[].traits - The traits specified for the application’s components  To explore traits, we can examine the fields of an ingress trait:\n apiVersion - Version of the OAM trait custom resource definition kind - IngressTrait is the name of the OAM application ingress trait custom resource definition spec.rules.paths - The context paths for accessing the application  Deploy the application The following steps are required to deploy the example application. Steps similar to the apply steps would be used to deploy any application to Verrazzano.\n  Create a namespace for the example application and add labels identifying the namespace as managed by Verrazzano and enabled for Istio. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create namespace hello-helidon $ kubectl label namespace hello-helidon verrazzano-managed=true istio-injection=enabled    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Apply the application’s component. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-comp.yaml -n hello-helidon    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThis step causes the validation and creation of the Component resource. No other resources or objects are created as a result. Application configurations applied in the future may reference this Component resource.\n  Apply the application configuration. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-app.yaml -n hello-helidon    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThis step causes the validation and creation of the application configuration resource. This operation triggers the activation of a number of Verrazzano operators. These operators create other Kubernetes objects (for example, Deployments, ReplicaSets, Pods, Services, Ingresses) that collectively provide and support the application.\n  Configure the application’s DNS resolution.\nAfter deploying the application, configure DNS to resolve the application’s ingress DNS name to the application’s load balancer IP address. The generated host name is obtained by querying Kubernetes for the gateway: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get gateways.networking.istio.io hello-helidon-hello-helidon-gw \\ -n hello-helidon \\ -o jsonpath='{.spec.servers[0].hosts[0]}'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe load balancer IP is obtained by querying Kubernetes for the Istio ingress gateway status: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get service \\ -n istio-system istio-ingressgateway \\ -o jsonpath='{.status.loadBalancer.ingress[0].ip}'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nDNS configuration steps are outside the scope of this guide. For DNS infrastructure that can be configured and used, see the Oracle Cloud Infrastructure DNS documentation. In some small non-production scenarios, DNS configuration using /etc/hosts or an equivalent may be sufficient.\n  Verify the deployment Applying the application configuration initiates the creation of several Kubernetes objects. Actual creation and initialization of these objects occurs asynchronously. The following steps provide commands for determining when these objects are ready for use.\nNOTE: Many other Kubernetes objects unrelated to the example application may also exist. Those have been omitted from the lists.\n  Verify the Helidon application pod is running. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n hello-helidon -l app=hello-helidon # Sample output NAME READY STATUS RESTARTS AGE hello-helidon-deployment-8664954995-wcb9d 2/2 Running 0 5m5s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Verify that the Verrazzano application operator pod is running. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pod -n verrazzano-system -l app=verrazzano-application-operator # Sample output NAME READY STATUS RESTARTS AGE verrazzano-application-operator-79849b89ff-lr9w6 1/1 Running 0 13m    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe namespace verrazzano-system is used by Verrazzano for non-application objects managed by Verrazzano. A single verrazzano-application-operator manages the life cycle of all OAM based applications within the cluster.\n  Verify the Verrazzano monitoring infrastructure is running. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n verrazzano-system | grep '^NAME\\|vmi-system' # Sample output NAME READY STATUS RESTARTS AGE vmi-system-es-master-0 2/2 Running 0 47m vmi-system-grafana-799d79648d-wsdp4 2/2 Running 0 47m vmi-system-kiali-574c6dd94d-f49jv 2/2 Running 0 51m vmi-system-osd-77f8d998f4-zzvqr 2/2 Running 0 47m    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n verrazzano-monitoring # Sample output NAME READY STATUS RESTARTS AGE prometheus-node-exporter-fstc7 1/1 Running 0 14h prometheus-operator-kube-p-operator-857fb66b74-szv4h 1/1 Running 0 14h prometheus-prometheus-operator-kube-p-prometheus-0 3/3 Running 0 14h    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThese pods in the verrazzano-system and verrazzano-monitoring namespaces constitute a monitoring stack created by Verrazzano for the deployed applications.\nThe monitoring infrastructure comprises several components:\n vmi-system-es - OpenSearch for log collection vmi-system-grafana - Grafana for metric visualization vms-system-kiali - Kiali for management console of istio service mesh vmi-system-osd - OpenSearch Dashboards for log visualization prometheus-prometheus-operator-kube-p-prometheus - Prometheus for metric collection     Diagnose failures.\nView the event logs of any pod not entering the Running state within a reasonable length of time, such as five minutes. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl describe pod -n hello-helidon -l app=hello-helidon    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUse the specific namespace and name for the pod being investigated.\n  Explore the application Follow these steps to explore the application’s functionality. If DNS was not configured, then use the alternative commands.\n  Save the host name and IP address of the load balancer exposing the application’s REST service endpoints for later. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ HOST=$(kubectl get gateways.networking.istio.io hello-helidon-hello-helidon-gw \\ -n hello-helidon \\ -o jsonpath='{.spec.servers[0].hosts[0]}') $ ADDRESS=$(kubectl get service \\ -n istio-system istio-ingressgateway \\ -o jsonpath='{.status.loadBalancer.ingress[0].ip}')    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE:\n The value of ADDRESS is used only if DNS has not been configured. The following alternative commands may not work in conjunction with firewalls that validate HTTP Host headers.    Get the default message. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ curl -sk \\ -X GET \\ \"https://${HOST}/greet\" # Expected response {\"message\":\"Hello World!\"}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf DNS has not been configured, then use this command.\n  code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ curl -sk \\ -X GET \\ \"https://${HOST}/greet\" \\ --resolve ${HOST}:443:${ADDRESS}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   Get a message for Robert. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ curl -sk \\ -X GET \\ \"https://${HOST}/greet/Robert\" # Expected response {\"message\":\"Hello Robert!\"} ``` If DNS has not been configured, then use this command. ``` $ curl -sk \\ -X GET \"https://${HOST}/greet/Robert\" \\ --resolve ${HOST}:443:${ADDRESS}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Update the default greeting. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ curl -sk \\ -X PUT \\ \"https://${HOST}/greet/greeting\" \\ -H 'Content-Type: application/json' \\ -d '{\"greeting\" : \"Greetings\"}'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf DNS has not been configured, then use this command. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ curl -sk \\ -X PUT \\ \"https://${HOST}/greet/greeting\" \\ -H 'Content-Type: application/json' \\ -d '{\"greeting\" : \"Greetings\"}' \\ --resolve ${HOST}:443:${ADDRESS}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the new message for Robert. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ curl -sk \\ -X GET \\ \"https://${HOST}/greet/Robert\" # Expected response {\"message\":\"Greetings Robert!\"}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf DNS has not been configured, then use this command. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ curl -sk \\ -X GET \\ \"https://${HOST}/greet/Robert\" \\ --resolve ${HOST}:443:${ADDRESS}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access the application’s logs Deployed applications have log collection enabled. These logs are collected using OpenSearch and can be accessed using OpenSearch Dashboards. OpenSearch and OpenSearch Dashboards are examples of infrastructure Verrazzano creates in support of an application as a result of applying an application configuration. For more information on creating an index pattern and visualizing the log data collected in OpenSearch, see OpenSearch Dashboards.\nDetermine the URL to access OpenSearch Dashboards: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ OSD_HOST=$(kubectl get ingress \\ -n verrazzano-system vmi-system-osd \\ -o jsonpath='{.spec.rules[0].host}') $ OSD_URL=\"https://${OSD_HOST}\" $ echo \"${OSD_URL}\" $ open \"${OSD_URL}\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe user name to access OpenSearch Dashboards defaults to verrazzano during the Verrazzano installation.\nDetermine the password to access OpenSearch Dashboards: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ echo $(kubectl get secret \\ -n verrazzano-system verrazzano \\ -o jsonpath={.data.password} | base64 \\ --decode)    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAccess the application’s metrics Deployed applications have metric collection enabled. Grafana can be used to access these metrics collected by Prometheus. Prometheus and Grafana are additional components Verrazzano creates as a result of applying an application configuration. For more information on visualizing Prometheus metrics data, see Grafana.\nDetermine the URL to access Grafana: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ GRAFANA_HOST=$(kubectl get ingress \\ -n verrazzano-system vmi-system-grafana \\ -o jsonpath='{.spec.rules[0].host}') $ GRAFANA_URL=\"https://${GRAFANA_HOST}\" $ echo \"${GRAFANA_URL}\" $ open \"${GRAFANA_URL}\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe user name to access Grafana is set to the default value verrazzano during the Verrazzano installation.\nDetermine the password to access Grafana: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ echo $(kubectl get secret \\ -n verrazzano-system verrazzano \\ -o jsonpath={.data.password} | base64 \\ --decode)    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAlternatively, metrics can be accessed directly using Prometheus. Determine the URL for this access: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ PROMETHEUS_HOST=$(kubectl get ingress \\ -n verrazzano-system vmi-system-prometheus \\ -o jsonpath='{.spec.rules[0].host}') $ PROMETHEUS_URL=\"https://${PROMETHEUS_HOST}\" $ echo \"${PROMETHEUS_URL}\" $ open \"${PROMETHEUS_URL}\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe user name and password for both Prometheus and Grafana are the same.\nSuppress Kiali console warnings For some applications, the Kiali console may show warnings for VirtualService and Gateway objects that replicate hostname/port configurations across multiple IngressTraits. These warnings do not impact functionality and can be suppressed with the following component override: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  kiali: overrides: - values: kiali_feature_flags: validations: ignore: [\"KIA1106\", \"KIA0301\"]    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nRemove the application Run the following commands to delete the application configuration, and optionally the component and namespace.\n  Delete the application configuration. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-app.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe deletion of the application configuration will result in the destruction of all application-specific Kubernetes objects.\n  (Optional) Delete the application’s component. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-comp.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: This step is not required if other application configurations for this component will be applied in the future.\n  (Optional) Delete the namespace. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete namespace hello-helidon    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"","excerpt":"Prerequisites  Access to an existing Kubernetes cluster with Verrazzano installed. Access to the application’s image in GitHub Container Registry. Confirm access using this command to pull the …","ref":"/docs/applications/oam/deploy-app/","tags":"","title":"Develop and Deploy Applications Using OAM"},{"body":"Issue: Fluentd’s inability to push logs to OpenSearch due to a permission issue when SELinux is in enforcing mode.\nIf you are unable to see logs in OpenSearch, it may be due to a permission issue in Fluentd when SELinux is in enforcing mode, which prevents Fluentd from pushing the logs to OpenSearch.\nTo troubleshoot the Fluentd permission issue, follow these steps:\n  Check Fluentd pod logs.\n Identify the Fluentd pod related to the Verrazzano installation. View the logs of the Fluentd pod using the following command: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs \u003cfluentd-pod-name\u003e -n verrazzano-system    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));     Check for an error description.\n Look for an error message in the Fluentd pod logs. If you see an error with the following description, then follow the instructions in Step 3. Resolve permission issue.  unexpected error error_class=Errno::EACCES error=\"Permission denied @ rb_sysopen - /var/log/vz-fluentd-containers.log.pos\", it indicates a permission issue. Fluentd doesn't have enough privilege to write `.pos` file.   Resolve permission issue.\n The issue occurs when SELinux is in enforcing mode on the worker nodes and Fluentd does not have the appropriate SELinux context to have read/write access to the logs (/var/log/) directory. Check if SELinux is in enforcing mode by running this command on the worker nodes: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ sudo getenforce    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If SELinux is in enforcing mode, then follow the advice found here.    Verification.\n Verify that Fluentd is able to read and push the logs to OpenSearch by reviewing the Fluentd logs. Verify that the logs are visible in OpenSearch by accessing the OpenSearch dashboard or using relevant search queries.    ","categories":"","description":"Troubleshoot a Fluentd permission issue when SELinux is in `enforcing` mode","excerpt":"Troubleshoot a Fluentd permission issue when SELinux is in `enforcing` mode","ref":"/docs/troubleshooting/troubleshooting-fluentd/","tags":"","title":"Fluentd Issues"},{"body":"Consoles accessed by the same user name  Grafana Prometheus OpenSearch Dashboards OpenSearch Kiali Jaeger Thanos Query  User: verrazzano\nTo get the password: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get secret \\ --namespace verrazzano-system verrazzano \\ -o jsonpath={.data.password} | base64 \\ --decode; echo     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe Argo CD console You can log in to the Argo CD console using the verrazzano user configured in Keycloak or with the local admin user for Argo CD. To log in with Keycloak, select the Log in with Keycloak link or enter the local user credentials to log in as a local user.\nLocal Admin User: admin\nTo get the password: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl -n argocd get secret \\ argocd-initial-admin-secret \\ -o jsonpath={.data.password} | base64 \\ --decode; echo     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nKeycloak User: verrazzano\nTo get the password: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get secret \\ --namespace verrazzano-system verrazzano \\ -o jsonpath={.data.password} | base64 \\ --decode; echo     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe Keycloak admin console User: keycloakadmin\nTo get the password: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get secret \\ --namespace keycloak keycloak-http \\ -o jsonpath={.data.password} | base64 \\ --decode; echo     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe Rancher console You can log in to the Rancher console using the verrazzano user configured in Keycloak or with the local admin user for Rancher. To log in with Keycloak, select the Log in with Keycloak link or select the Use a local user link to log in with the local user.\nLocal Admin User: admin\nTo get the password: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get secret \\ --namespace cattle-system rancher-admin-secret \\ -o jsonpath={.data.password} | base64 \\ --decode; echo     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nKeycloak User: verrazzano\nTo get the password: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get secret \\ --namespace verrazzano-system verrazzano \\ -o jsonpath={.data.password} | base64 \\ --decode; echo     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"Get the credentials to access the consoles that Verrazzano installs","excerpt":"Get the credentials to access the consoles that Verrazzano installs","ref":"/docs/setup/access/console-credentials/","tags":"","title":"Get Console Credentials"},{"body":"","categories":"","description":"Learn various ways to support and maintain a highly available Verrazzano environment","excerpt":"Learn various ways to support and maintain a highly available Verrazzano environment","ref":"/docs/guides/ha/","tags":"","title":"High Availability"},{"body":"","categories":"","description":"Learn how to install Verrazzano in a multicluster environment","excerpt":"Learn how to install Verrazzano in a multicluster environment","ref":"/docs/setup/mc-install/","tags":"","title":"Install Verrazzano in a Multicluster Environment"},{"body":"Verrazzano can be deployed to a number of different hosted and on-premises Kubernetes environments. Particularly in hosted environments, it may not be possible to choose the authentication providers configured for the Kubernetes API server, and Verrazzano may have no ability to view, manage, or authenticate users.\nVerrazzano installs Keycloak to provide a common user store across all Kubernetes environments. The Verrazzano admin user can create and manage user accounts in Keycloak, and Verrazzano can authenticate and authorize Keycloak users.\nAlso, you can configure Keycloak to delegate authentication to an external user store, such as Active Directory or an LDAP server.\nBecause Keycloak is not configured as an authentication provider for the Kubernetes API, authenticating Keycloak users to Kubernetes requires the use of a proxy that impersonates Keycloak users when making Kubernetes API requests. For more information about the Verrazzano authentication proxy, see Verrazzano Proxies.\nKeycloak is also used when authenticating to the Verrazzano Console and the various Verrazzano Monitoring Instance (VMI) logging and metrics consoles. The Verrazzano Console uses the OpenID Connect (OIDC) PKCE flow to authenticate users against Keycloak and obtain ID and access tokens. Authentication for VMI consoles is provided by the Verrazzano authentication proxy, which also uses PKCE to authenticate users, validates the resulting tokens, and authorizes incoming requests. For more information about the Verrazzano authentication proxy, see Verrazzano Proxies.\n","categories":"","description":"Learn about Keycloak user management and Single Sign-On (SSO)","excerpt":"Learn about Keycloak user management and Single Sign-On (SSO)","ref":"/docs/security/keycloak/","tags":"","title":"Keycloak and SSO"},{"body":"Prerequisites Prior to running the multicluster examples, complete the multicluster installation and managed cluster registration documented here.\n","categories":"","description":"Examples of using Verrazzano in a multicluster environment","excerpt":"Examples of using Verrazzano in a multicluster environment","ref":"/docs/examples/multicluster/","tags":"","title":"Multicluster"},{"body":"Verrazzano federates metrics from managed clusters to the admin cluster. This ensures that metrics in managed clusters can be queried from the admin cluster.\nIf you enable Thanos on the managed clusters, Verrazzano installs the required set of Thanos components on the managed clusters. Then, on the admin cluster, Verrazzano automatically configures the managed cluster’s Thanos endpoint in Thanos Query. This allows you to query metrics across all clusters from Thanos Query on the admin cluster.\nFor Thanos to query metrics from managed clusters, you must enable Thanos on the admin cluster and managed clusters. If Thanos is disabled on either the admin or managed clusters, then Prometheus federation is used to scrape metrics from managed clusters.\nWhen enabling long-term metric storage in object storage, it is recommended that you use a separate bucket for each managed cluster. This provides metric data isolation and improves overall query performance. For more information, see Thanos.\nThe following is a representation of metrics collection in a multicluster environment.\n","categories":"","description":"Learn about Verrazzano metrics in a multicluster environment","excerpt":"Learn about Verrazzano metrics in a multicluster environment","ref":"/docs/observability/monitoring/multicluster-metrics/","tags":"","title":"Multicluster Monitoring"},{"body":"Network traffic refers to the data flowing across the network. In the context of this document, it is useful to think of network traffic from two perspectives: traffic based on direction and traffic related to component types, system, or applications. Traffic direction is either north-south traffic, which enters and leaves the cluster, or east-west traffic, which stays within the cluster.\nFirst is a description of getting traffic into the cluster, then how traffic flows after it is in the cluster.\nIngress Ingress is an overloaded term, so it needs to be understood in context. Sometimes the term means external access into the cluster, as in “ingress to the cluster.” The term also refers to the Kubernetes Ingress resource. In addition, it might be used to mean network ingress to a container in a Pod. Here, it’s used to refer to both general ingress into the cluster and the Kubernetes Ingress resource.\nDuring installation, Verrazzano creates the necessary network resources to access both system components and applications. The following ingress and load balancers descriptions are in the context of a Verrazzano installation.\nLoadBalancer Services To reach Pods from outside a cluster, an external IP address must be exposed using a LoadBalancer or NodePort service. Verrazzano creates two LoadBalancer services, one for system component traffic and another for application traffic. The specifics of how the service gets traffic into the cluster depends on the underlying Kubernetes platform. With Oracle Cloud Infrastructure Container Engine for Kubernetes (OKE), creating a LoadBalancer type service will result in an Oracle Cloud Infrastructure load balancer being created and configured to load balance to a set of Pods.\nIngress for system components To provide ingress to system components, Verrazzano installs a NGINX Ingress Controller, which includes a NGINX load balancer. Verrazzano also creates Kubernetes Ingress resources to configure ingress for each system component that requires ingress. An Ingress resource is used is to specify HTTP/HTTPS routes to Kubernetes services, along with an endpoint host name and a TLS certificate. An Ingress by itself doesn’t do anything; it is just a resource. An ingress controller is needed to watch Ingress resources and reconcile them, configuring the underlying Kubernetes load balancer to handle the service routing. The NGINX Ingress Controller processes Ingress resources and configures NGINX with the ingress route information, and such.\nThe NGINX Ingress Controller is a LoadBalancer service, as seen here: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get service -n ingress-nginx # Sample output ingress-controller-ingress-nginx-controller LoadBalancer    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUsing the OKE example, traffic entering the Oracle Cloud Infrastructure load balancer is routed to the NGINX load balancer, then routed from there to the Pods belonging to the services described in the Ingress.\nIngress for applications Verrazzano also provides ingress into applications, but uses an Istio ingress gateway, which is an Envoy proxy, instead of NGINX. Istio has a Gateway resource that provides load balancer information, such as hosts, ports, and certificates for traffic coming into the mesh. For more information, see Istio Gateway. Just as an Ingress needs a corresponding Ingress controller, the same is true for the Gateway resource, where there is a corresponding Istio ingress gateway controller. However, unlike the Ingress, the Gateway resource doesn’t have service routing information. That is handled by the Istio VirtualService resource. The combination of Gateway and VirtualService is basically a superset of Ingress, because the combination provides more features than Ingress. In summary, the Istio ingress gateway provides ingress to the cluster using information from both the Gateway and VirtualService resources.\nBecause Verrazzano doesn’t create any applications during installations, there is no need to create a Gateway and VirtualService at that time. However, during installation, Verrazzano does create the Istio ingress gateway, which is a LoadBalancer service, along with the Istio egress gateway, which is a ClusterIP service.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get service -n istio-system # Sample output istio-ingressgateway LoadBalancer    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAgain, referring to the OKE use case, this means that there will another Oracle Cloud Infrastructure load balancer created, routing traffic to the Istio ingress gateway Pod, for example, the Envoy proxy.\nExternal DNS When you install Verrazzano, you can optionally specify an external DNS for your domain. If you do that, Verrazzano will not only create the DNS records, using ExternalDNS, but also it will configure your host name in the Ingress resources. You can then use that host name to access the system components through the NGINX Ingress Controller.\nSystem traffic System traffic includes all traffic that enters and leaves system Pods.\nNorth-south system traffic North-south traffic includes all system traffic that enters or leaves a Kubernetes cluster.\nIngress The following lists the Verrazzano system components which are accessed through the NGINX Ingress Controller from a client external to the cluster:\n argoCD OpenSearch Keycloak OpenSearch Dashboards Grafana Prometheus Rancher Verrazzano Console Verrazzano API  Egress The following table shows Verrazzano system components that initiate requests to a destination outside the cluster.\n   Component Destination Description     argoCD Git webhooks (GitHub, GitLab, Bitbucket) Argo CD connection to Git webhooks for connecting to Git repositories.   cert-manager Let’s Encrypt Gets signed certificate.   ExternalDNS External DNS Creates and deletes DNS entries in an external DNS.   Fluentd OpenSearch Fluentd on the managed cluster calls OpenSearch on the admin cluster.   Prometheus Prometheus Prometheus on the admin cluster scrapes metrics from Prometheus on the managed cluster.   Rancher Agent Rancher Rancher agent on the managed cluster sends requests to Rancher on the admin cluster.   Verrazzano Authentication Proxy Keycloak Calls Keycloak for authentication, which includes redirects.   Verrazzano Platform Operator Kubernetes API server Multicluster agent on the managed cluster calls API server on the admin cluster.    East-west system traffic The following tables show Verrazzano system components that send traffic to a destination inside the cluster, with the following exceptions:\n Usage of CoreDNS: It can be assumed that any Pod in the cluster can access CoreDNS for name resolution. Envoy to Istiod: The Envoy proxies all make requests to the Istio control plane to get dynamic configuration, and such. This includes both the gateways and the mesh sidecar proxies. That traffic is not shown. Traffic within a component is not shown, for example, traffic between OpenSearch Pods. Prometheus scraping traffic is shown in the second table.     Component Destination Description     argoCD Kubernetes API server Performs CRUD operations on Kubernetes resources.   cert-manager Kubernetes API server Performs CRUD operations on Kubernetes resources.   Fluentd OpenSearch Fluentd sends data to OpenSearch.   Grafana Prometheus Console for Prometheus data.   OpenSearch Dashboards OpenSearch Console for OpenSearch.   NGINX Ingress Controller Kubernetes API server Performs CRUD operations on Kubernetes resources.   Istio Kubernetes API server Performs CRUD operations on Kubernetes resources.   Rancher Kubernetes API server Performs CRUD operations on Kubernetes resources.   Verrazzano Authentication Proxy Keycloak Calls Keycloak for token authentication.   Verrazzano Authentication Proxy VMI components Access consoles for OpenSearch Dashboards, Grafana, and such.   Verrazzano Authentication Proxy Kubernetes API server Performs CRUD operations on Kubernetes resources.   Verrazzano Application Operator Kubernetes API server Performs CRUD operations on Kubernetes resources.   Verrazzano Monitoring Operator Kubernetes API server Performs CRUD operations on Kubernetes resources.   Verrazzano Operator Kubernetes API server Performs CRUD operations on Kubernetes resources.   Verrazzano Platform Operator Kubernetes API server Performs CRUD operations on Kubernetes resources.   Verrazzano Platform Operator Rancher Registers the managed cluster with Rancher.    Prometheus scraping traffic This table shows Prometheus traffic for each system component scrape target.\n   Target Description     argoCD Envoy metrics   cadvisor Kubernetes metrics   Grafana Envoy metrics   Istiod Istio control plane metrics   Istiod Envoy metrics   Istio egress gateway Envoy metrics   Istio ingress gateway Envoy metrics   Keycloak Envoy metrics   MySQL Envoy metrics   NGINX Ingress Controller Envoy metrics   NGINX Ingress Controller NGINX metrics   NGINX default back end Envoy metrics   Node exporter Node metrics   OpenSearch Envoy metrics   OpenSearch Dashboards Envoy metrics   Prometheus Envoy metrics   Prometheus Prometheus metrics   Verrazzano Console Envoy metrics   Verrazzano API Envoy metrics   WebLogic operator Envoy metrics    Webhooks Several of the system components are controllers and some of those have webhooks. Webhooks are called by the Kubernetes API server on a component HTTPS port to validate or mutate API payloads before they reach the API server.\nThe following components use webhooks:\n cert-manager Coherence Operator Istio Rancher Verrazzano Application Operator Verrazzano Platform Operator  Application traffic Application traffic includes all traffic to and from Verrazzano applications.\nNorth-south application traffic After Verrazzano is installed, you can deploy applications into the Istio mesh. When doing so, you will likely need ingress into the application. As previously mentioned, this can be done with Istio using the Gateway and VirtualService resources. Verrazzano will create those resources for you when you use an IngressTrait in your ApplicationConfiguration. The Istio ingress gateway created during installation will be shared by all applications in the mesh, and the Gateway resource is bound to the Istio ingress gateway that was created during installation. This is done by the selector field in the Gateway. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   selector: istio: ingressgateway    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nVerrazzano creates a Gateway/VirtualService pair for each IngressTrait. Following is an example of those two resources created by Verrazzano.\nHere is the Gateway; in this case both the host name and certificate were generated by Verrazzano. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: v1 items: - apiVersion: networking.istio.io/v1beta1 kind: Gateway metadata: ... name: hello-helidon-hello-helidon-gw namespace: hello-helidon ... spec: selector: istio: ingressgateway servers: - hosts: - hello-helidon-appconf.hello-helidon.1.2.3.4.nip.io port: name: HTTPS number: 443 protocol: HTTPS tls: credentialName: hello-helidon-hello-helidon-appconf-cert-secret mode: SIMPLE    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nHere is the VirtualService; notice that it refers back to the Gateway and that it contains the service routing information. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: v1 items: - apiVersion: networking.istio.io/v1beta1 kind: VirtualService metadata: ... name: hello-helidon-ingress-rule-0-vs namespace: hello-helidon spec: gateways: - hello-helidon-hello-helidon-gw hosts: - hello-helidon-appconf.hello-helidon.1.2.3.4.nip.io HTTP: - match: - uri: prefix: /greet route: - destination: host: hello-helidon port: number: 8080    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nEast-west application traffic To manage east-west traffic, each service in the mesh should be routed using a VirtualService and an optional DestinationRule. You can still send east-west traffic without either of these resources, but you won’t get any custom routing or load balancing. Verrazzano doesn’t configure east-west traffic. Consider bobbys-front-end in the Bob’s Books example at bobs-books-comp.yaml. When deploying Bob’s Books, a VirtualService is created for bobbys-front-end, because of the IngressTrait, but there are no VirtualServices for the other services in the application. When bobbys-front-end sends requests to bobbys-helidon-stock-application, this east-west traffic still goes to bobbys-helidon-stock-application through the Envoy sidecar proxies in the source and destination Pods, but there is no VirtualService representing bobbys-helidon-stock-application where you could specify a canary deployment or custom load balancing. This is something you could configure manually, but it is not configured by Verrazzano.\nProxies Verrazzano uses network proxies in multiple places. The two proxy products are Envoy and NGINX. The following table shows which proxies are used and in which Pod they run.\n   Usage Proxy Pod Namespace Description     System ingress NGINX ingress-controller-ingress-nginx-controller-* ingress-nginx Provides external access to Verrazzano system components.   Verrazzano authentication proxy NGINX verrazzano-authproxy-* verrazzano-system Verrazzano authentication proxy server for Kubernetes API and Single Sign-On (SSO).   Application ingress Envoy istio-ingressgateway-* istio-system Provides external access to Verrazzano applications.   Application egress Envoy istio-egressgateway-* istio-system Provides control of application egress traffic.   Istio mesh sidecar Envoy ingress-controller-ingress-nginx-controller-* ingress-nginx NGINX Ingress Controller in the Istio mesh.   Istio mesh sidecar Envoy ingress-controller-ingress-nginx-defaultbackend-* ingress-nginx NGINX default backend in the Istio mesh.   Istio mesh sidecar Envoy fluentd-* verrazzano-system Fluentd in the Istio mesh.   Istio mesh sidecar Envoy keycloak-* keycloak Keycloak in the Istio mesh.   Istio mesh sidecar Envoy mysql-* keycloak MySQL used by Keycloak in the Istio mesh.   Istio mesh sidecar Envoy verrazzano-api-* verrazzano-system Verrazzano API in the Istio mesh.   Istio mesh sidecar Envoy verrazzano-console-* verrazzano-system Verrazzano Console in the Istio mesh.   Istio mesh sidecar Envoy vmi-system-es-master-* verrazzano-system OpenSearch in the Istio mesh.   Istio mesh sidecar Envoy vmi-system-es-data-* verrazzano-system OpenSearch in the Istio mesh.   Istio mesh sidecar Envoy vmi-system-es-ingest-* verrazzano-system OpenSearch in the Istio mesh.   Istio mesh sidecar Envoy vmi-system-kibana-* verrazzano-system OpenSearch Dashboards in the Istio mesh.   Istio mesh sidecar Envoy vmi-system-grafana-* verrazzano-system Grafana in the Istio mesh.   Istio mesh sidecar Envoy weblogic-operator-* verrazzano-system WebLogic Kubernetes Operator in the Istio mesh.   Istio mesh sidecar Envoy prometheus-prometheus-operator-kube-p-prometheus-* verrazzano-monitoring Prometheus in the Istio mesh.    Multicluster Some Verrazzano components send traffic between Kubernetes clusters. Those components are the Verrazzano agent, Verrazzano authentication proxy, and Prometheus.\nMulticluster egress The following table shows Verrazzano system components that initiate requests between the admin and managed clusters. All of these requests go through the NGINX Ingress Controller on the respective destination cluster.\nTraffic on port 443 needs to be allowed in both directions, from managed clusters to the admin cluster, and from the admin cluster to managed clusters. Additionally, if Rancher is not enabled on the admin cluster, then managed clusters will also need access to the admin cluster’s Kubernetes API server port (typically, this is port 6443).\n   Source Cluster Source Component Destination Cluster Destination Component Description     Admin Prometheus Managed Prometheus Scrapes metrics on managed clusters.   Admin argoCD Managed Rancher Proxy Argo CD connects to the Rancher proxy for creating resources required for the Argo CD managed cluster registration.   Admin Verrazzano Console Managed Verrazzano Authentication Proxy Admin cluster proxy sends Kubernetes API requests to managed cluster proxy.   Admin Verrazzano Cluster Operator Managed Rancher Proxy Admin cluster sends registration updates to managed cluster, and retrieves managed cluster CA certificate.   Managed Fluentd Admin OpenSearch Fluentd sends logs to OpenSearch.   Managed Rancher Agent Admin Rancher Rancher Agent sends requests Rancher.   Managed Verrazzano Authentication Proxy Admin Keycloak Proxy sends requests to Keycloak.   Managed Verrazzano Agent Admin Rancher Proxy or Kubernetes API server Managed cluster agent, in the application operator, sends requests to the Rancher proxy if Rancher is enabled, or to the admin cluster Kubernetes API server.    Verrazzano agent In the multicluster topology, the Verrazzano platform operator has an agent thread running on the managed cluster that sends requests to the Kubernetes API server on the admin cluster. The URL for the admin cluster Kubernetes API server is registered on the managed cluster by the user.\nVerrazzano authentication proxy In a multicluster topology, the Verrazzano authentication proxy runs on both the admin and managed clusters. On the admin cluster, the authentication proxy connects to in-cluster Keycloak, using the Keycloak Service. On the managed cluster, the authentication proxy connects to Keycloak on the admin cluster through the NGINX Ingress Controller running on the admin cluster.\nFor Single Sign-On (SSO), the authentication proxy also needs to send requests to Keycloak, either in-cluster or through the cluster ingress. When a request comes into the authentication proxy without an authentication header, the proxy sends a request to Keycloak through the NGINX Ingress Controller, so the request exits the cluster. Otherwise, if the authentication proxy is on the admin cluster, then the request is sent directly to Keycloak within the cluster. If the authentication proxy is on the managed cluster, then it must send requests to Keycloak on the admin cluster.\nPrometheus A single Prometheus service in the cluster, scrapes metrics from Pods in system components and applications. It also scrapes Pods in the Istio mesh using HTTPS, and outside the mesh using HTTP. In the multicluster case, Prometheus on the admin cluster, scrapes metrics from Prometheus on the managed cluster, through the NGINX Ingress Controller on the managed cluster.\n","categories":"","description":"Understand Verrazzano network traffic","excerpt":"Understand Verrazzano network traffic","ref":"/docs/networking/traffic/","tags":"","title":"Network Traffic"},{"body":"Open Application Model (OAM) is a runtime-agnostic specification for defining cloud native applications; it allows developers to focus on the application instead of the complexities of a particular runtime infrastructure. OAM provides the specification for several file formats and rules for a runtime to interpret. Verrazzano uses OAM to enable the definition of a composite application abstraction and makes OAM constructs available within a VerrazzanoApplication YAML file. Verrazzano provides the flexibility to combine what you want into a multicloud enablement. It uses the VerrazzanoApplication as a means to encapsulate a set of components, scopes, and traits, and deploy them on a selected cluster.\nOAM’s workload concept makes it easy to use many different workload types. Verrazzano includes specific workload types with special handling to deploy and manage those types, such as WebLogic, Coherence, and Helidon. OAM’s flexibility lets you create a grouping that is managed as a unit, although each component can be scaled or updated independently.\nHow does OAM work? OAM has five core concepts:\n Workloads - Declarations of the kinds of resources supported by the platform and the OpenAPI schema for that resource. Most Kubernetes CRDs can be exposed as workloads. Standard Kubernetes resource types can also be used (for example, Deployment, Service, Pod, ConfigMap). Components - Wrap a workload resource’s specification data within OAM specific metadata. Application Configurations - Describe a collection of components that comprise an application. This is also where customization (such as, environmental) of each component is done. Customization is achieved using scopes and traits. Scopes - Apply customization to several components. Traits - Apply customization to a single component.  ","categories":"","description":"","excerpt":"Open Application Model (OAM) is a runtime-agnostic specification for defining cloud native applications; it allows developers to focus on the application instead of the complexities of a particular …","ref":"/docs/introduction/verrazzanooam/","tags":"","title":"Verrazzano and the Open Application Model"},{"body":"Prepare for the generic install Verrazzano requires that your Kubernetes cluster provides an implementation of network load balancers (Services of type LoadBalancer) for a production environment. If your generic Kubernetes implementation provides this feature, then you can use a default configuration of the Verrazzano custom resource with no customizations and follow the Installation Guide.\nNOTE Remember to not overlap network Classless Inter-Domain Routing (CIDR) blocks when designing and implementing your Kubernetes cluster; proper routing relies on that.  You can install a load balancer, such as MetalLB. This setup requires knowledge of networking both inside and outside your Kubernetes cluster. This would include specifics of your Container Network Interface (CNI) implementation, IP address allocation schemes, and routing that goes beyond the scope of this documentation. For a Kind implementation, see Install and configure MetalLB.\nIt is possible to use a Kubernetes Service of type NodePort to test aspects of Verrazzano. This requires a good working knowledge of networking and has limited use cases.\nNext steps To continue, see the Installation Guide.\n","categories":"","description":"Set up a generic Kubernetes cluster for Verrazzano","excerpt":"Set up a generic Kubernetes cluster for Verrazzano","ref":"/docs/setup/install/prepare/platforms/generic/generic/","tags":"","title":"Prepare a Generic Kubernetes Cluster"},{"body":"See the following support information, learning channels, and Verrazzano release history:\n Verrazzano Community Support - Join Verrazzano on Slack! Verrazzano GitHub Project Oracle Verrazzano Enterprise Container Platform Support (available for purchase; contact Oracle Sales) Check us out on Medium Learn about Verrazzano on YouTube  Release History \u0026 Error Correction Dates\nThe timeline for Verrazzano releases and the date of their end of error correction.\n   Verrazzano Release Date Latest Patch Release Latest Patch Release Date End of Error Correction     1.6 2023-06-28 1.6.4 2023-08-16 2024-06-30*   1.5 2023-02-15 1.5.5 2023-08-02 2024-02-28   1.4 2022-09-30 1.4.6 2023-07-31 2023-10-31   1.3 2022-05-24 1.3.8 2022-11-17 2023-05-31   1.2 2022-03-14 1.2.2 2022-05-10 2022-11-30   1.1 2021-12-16 1.1.2 2022-03-09 2022-09-30   1.0 2021-08-02 1.0.4 2021-12-20 2022-06-30    *Projected date. Actual date will be determined when the next minor or major release is available. ","categories":"","description":"","excerpt":"See the following support information, learning channels, and Verrazzano release history:\n Verrazzano Community Support - Join Verrazzano on Slack! Verrazzano GitHub Project Oracle Verrazzano …","ref":"/docs/support/","tags":"","title":"Support Information"},{"body":"You can synchronize cluster registration across Verrazzano by enabling syncClusters in the Verrazzano custom resource. Any clusters imported in the Rancher console will be synchronized across the rest of Verrazzano, including in Verrazzano managed cluster resources, Rancher, and Argo CD. Additionally, you can use a label selector to filter the clusters you want registered.\nRegister managed clusters automatically The following illustrates an admin cluster Verrazzano resource that enables syncClusters. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: admin spec: profile: prod components: clusterOperator: overrides: - values: syncClusters: enabled: true    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n When enabled is set to true, Verrazzano will synchronize the registration of clusters across Verrazzano, Rancher, and Argo CD. If enabled is set to false (the default), then Verrazzano will not synchronize the registration of clusters across Verrazzano.  Filter cluster selection Optionally, to determine which clusters imported into Rancher will be automatically registered by Verrazzano, you can provide a label selector in the Verrazzano resource. This lets you filter which clusters you want to be synchronized.\nThe following illustrates an admin cluster Verrazzano resource that supports cluster label selection. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: admin spec: profile: prod components: clusterOperator: overrides: - values: syncClusters: enabled: true clusterSelector: matchExpressions: - key: verrazzanomulticluster operator: In values: [supported]    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe syncClusters enabled field must be set to true to use cluster label selection. Verrazzano will automatically register all clusters with labels that match the clusterSelector field.\n The clusterSelector field is optional. If enabled is set to true and the clusterSelector field is omitted, then all clusters imported into Rancher will be automatically registered.  When you import a cluster into Rancher, you can provide a label and value for the cluster. If the label matches this label selector, then the cluster will be synchronized.\n","categories":"","description":"Register and synchronize cluster registration automatically","excerpt":"Register and synchronize cluster registration automatically","ref":"/docs/setup/mc-install/register/syncclusters/","tags":"","title":"Synchronize Managed Clusters Registration"},{"body":"Thanos is a group of components that seamlessly integrate with Prometheus to monitor your applications. You can enable and configure Thanos components with Verrazzano and use long-term storage to store metrics. By using the Thanos Query console, you can query for metrics across all Prometheus instances and long-term storage. Thanos also makes it easier to scale Prometheus horizontally and obtain a global view of data from multiple Prometheus servers.\nAdvantages of using Thanos:\n Long-term metrics retention High availability Easy backup for metrics Efficient data access  For more information on Thanos, see the Thanos website.\nThanos components Verrazzano currently supports the following Thanos components:\n   Components Description     Compactor Periodically scans long-term storage and performs compaction where required to improve query efficiency.   Ruler Provides rule and alert evaluation on top of a given Thanos Query instance.   Sidecar Container that resides in the Prometheus pod. It connects to Prometheus, reads its data for queries, and uploads it to long-term storage.   Store Gateway Serves metrics from long-term storage.   Query Implements the Prometheus API to aggregate data from the underlying components and provides a user interface for querying across all Prometheus stores.   Query Frontend Implements the Prometheus API and proxies it to Query while caching the response and optionally, splitting queries.    Verrazzano installs these Thanos components using a Helm chart. You can customize the installation configuration using Helm overrides specified in the Verrazzano custom resource.\nEnable Thanos To enable Thanos in Verrazzano, add the following:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: components: prometheusOperator: enabled: true overrides: - values: prometheus: thanos: integration: sidecar thanos: enabled: true    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Query and Query Frontend are the only Thanos components enabled by default.\nEnable long-term storage using OCI Object Storage Optionally, you can configure Thanos to use OCI Object Storage for long-term storage of metrics.\nTo enable this behavior complete the following steps:\nStep 1: Create a YAML configuration file Create a local file named storage.yaml that identifies your OCI Object Storage bucket name, the region and compartment where it is located within your OCI tenancy, and a valid set of credentials for Thanos to use when accessing it.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  type: OCI config: provider: \"raw\" bucket: \"thanos\" compartment_ocid: \"ocid1.compartment.oc1.....\" region: \"us-ashburn-1\" tenancy_ocid: \"ocid1.tenancy.oc1.....\" user_ocid: \"ocid1.user.oc1.....\" fingerprint: \"12:d3:4c:...\" privatekey: | -----BEGIN RSA PRIVATE KEY----- ... -----END RSA PRIVATE KEY-----    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Step 2: Create a secret Create the secret for object storage configuration using the storage.yaml file you created in Step 1.\nThe Thanos Store Gateway requires the key in the secret to be objstore.yml.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create namespace verrazzano-monitoring $ kubectl create secret generic objstore-config -n verrazzano-monitoring --from-file=objstore.yml=storage.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Step 3: Enable storage, Thanos Store Gateway, and Compactor The following example enables storage, creates the required secret, and enables the Thanos Store Gateway and Compactor in the Verrazzano custom resource. It also configures the Thanos Sidecar to write to object storage and the Store Gateway to read from object storage. Additionally, it configures the Thanos Compactor to perform compaction on the same object storage.\nNote: objstore-config is the secret that you created in Step 2.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: components: prometheusOperator: enabled: true overrides: - values: prometheus: thanos: integration: sidecar prometheusSpec: thanos: objectStorageConfig: name: objstore-config key: objstore.yml thanos: enabled: true overrides: - values: existingObjstoreSecret: objstore-config storegateway: enabled: true compactor: enabled: true    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Alerting with Thanos Ruler The following example shows how to enable Thanos Ruler and Alertmanager in the Verrazzano resource. It also configures the Thanos Ruler to send alerts to Alertmanager.\nNOTE: For the Thanos Ruler to work, you must configure storage as discussed in Enable Storage, and you must also enable Alertmanager.\nNote that in this configuration, Prometheus will not fire alerts to Alertmanager, since the Thanos Ruler does so.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: components: prometheusOperator: enabled: true overrides: - values: alertmanager: enabled: true thanos: enabled: true overrides: - values: existingObjstoreSecret: objstore-config ruler: enabled: true    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Verrazzano configures several alerting rules by default, which can be viewed in the Thanos Ruler console. You can configure additional alerts by creating your own PrometheusRules. For more information, see Alertmanager.\nAccess the Thanos consoles You can access the Thanos Query and Ruler consoles using the instructions at Get console URLs.\n","categories":"","description":"Use Thanos to access and store metrics data","excerpt":"Use Thanos to access and store metrics data","ref":"/docs/observability/monitoring/configure/thanos/","tags":"","title":"Thanos"},{"body":"ToDo List is an example application containing a WebLogic component. For more information and the source code of this application, see the Verrazzano Examples.\nBefore you begin  Set up a multicluster Verrazzano environment following the installation instructions. The example assumes that there is a managed cluster named managed1 associated with the multicluster environment. If your environment does not have a cluster of that name, then you should edit the deployment files and change the cluster name listed in the placement section. To download the example application image, you must first accept the license agreement.  In a browser, navigate to https://container-registry.oracle.com/ and sign in. Search for example-todo and weblogic. For each one:  Select the image name in the results. From the drop-down menu, select your language and click Continue. Then read and accept the license agreement.      Set up the following environment variables to point to the kubeconfig file for the admin and managed clusters. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ export KUBECONFIG_ADMIN=/path/to/your/adminclusterkubeconfig $ export KUBECONFIG_MANAGED1=/path/to/your/managedclusterkubeconfig    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: The ToDo List application deployment files are contained in the Verrazzano project located at \u003cVERRAZZANO_HOME\u003e/examples/multicluster/todo-list, where \u003cVERRAZZANO_HOME\u003e is the root of the Verrazzano project.\nDeploy the application   Create a namespace for the multicluster ToDo List example by applying the Verrazzano project file. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN apply \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/todo-list/verrazzano-project.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Create a docker-registry secret to enable pulling the ToDo List example image from the registry. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN create secret docker-registry tododomain-repo-credentials \\ --docker-server=container-registry.oracle.com \\ --docker-username=YOUR_REGISTRY_USERNAME \\ --docker-password=YOUR_REGISTRY_PASSWORD \\ --docker-email=YOUR_REGISTRY_EMAIL \\ -n mc-todo-list    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nReplace YOUR_REGISTRY_USERNAME, YOUR_REGISTRY_PASSWORD, and YOUR_REGISTRY_EMAIL with the values you use to access the registry.\n  Create and label secrets for the WebLogic domain: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # Replace the values of the WLS_USERNAME and WLS_PASSWORD environment variables as appropriate. $ export WLS_USERNAME=\u003cusername\u003e $ export WLS_PASSWORD=\u003cpassword\u003e $ kubectl --kubeconfig $KUBECONFIG_ADMIN create secret generic tododomain-weblogic-credentials \\ --from-literal=password=$WLS_PASSWORD \\ --from-literal=username=$WLS_USERNAME \\ -n mc-todo-list $ kubectl --kubeconfig $KUBECONFIG_ADMIN create secret generic tododomain-jdbc-tododb \\ --from-literal=username=$WLS_USERNAME \\ --from-literal=password=$WLS_PASSWORD \\ -n mc-todo-list $ kubectl --kubeconfig $KUBECONFIG_ADMIN -n mc-todo-list label secret tododomain-jdbc-tododb weblogic.domainUID=tododomain    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNote that the ToDo List example application is preconfigured to use specific secret names. For the source code of this application, see the Verrazzano Examples.\n  Apply the component and multicluster application resources to deploy the ToDo List application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN apply \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/todo-list/todo-list-components.yaml $ kubectl --kubeconfig $KUBECONFIG_ADMIN apply \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/todo-list/mc-todo-list-application.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the ToDo List example application to be ready. The tododomain-adminserver pod may take several minutes to be created and Ready. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 wait pod \\ --for=condition=Ready tododomain-adminserver \\ -n mc-todo-list \\ --timeout=300s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the generated host name for the application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ HOST=$(kubectl --kubeconfig $KUBECONFIG_MANAGED1 get gateway \\ -n mc-todo-list \\ -o jsonpath='{.items[0].spec.servers[0].hosts[0]}') $ echo $HOST # Sample output todo-appconf.mc-todo-list.11.22.33.44.nip.io    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the EXTERNAL_IP address of the istio-ingressgateway service. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ADDRESS=$(kubectl --kubeconfig $KUBECONFIG_MANAGED1 get service \\ -n istio-system istio-ingressgateway \\ -o jsonpath='{.status.loadBalancer.ingress[0].ip}') $ echo $ADDRESS # Sample output 11.22.33.44    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access the ToDo List example application.\n  Using the command line code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # The expected response of this query is the HTML of a web page $ curl -sk https://${HOST}/todo/ \\ --resolve ${HOST}:443:${ADDRESS}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If you are using nip.io, then you do not need to include --resolve.\n  Local testing with a browser\nTemporarily, modify the /etc/hosts file (on Mac or Linux) or c:\\Windows\\System32\\Drivers\\etc\\hosts file (on Windows 10), to add an entry mapping the host name to the ingress gateway’s EXTERNAL-IP address. For example:\n11.22.33.44 todo.example.com Then, you can access the application in a browser at https://todo.example.com/todo.\n  Using your own DNS name\nPoint your own DNS name to the ingress gateway’s EXTERNAL-IP address.\n In this case, you would need to have edited the todo-list-application.yaml file to use the appropriate value under the hosts section (such as yourhost.your.domain), before deploying the ToDo List application. Then, you can use a browser to access the application at https://\u003cyourhost.your.domain\u003e/todo/.  Accessing the application in a browser will open a page, “Derek’s ToDo List”, with an edit field and an Add button that lets add tasks.\n    A variety of endpoints associated with the deployed ToDo List application are available to further explore the logs, metrics, and such. You can access them according to the directions here.\n  Verify the deployed application   Verify that the application configuration, domain, and ingress trait all exist. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 get ApplicationConfiguration -n mc-todo-list # Sample output NAME AGE todo-appconf 19h $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 get Domain -n mc-todo-list # Sample output NAME AGE todo-domain 19h $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 get IngressTrait -n mc-todo-list # Sample output NAME AGE todo-domain-trait-7cbd798c96 19h    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Verify that the WebLogic Administration Server and MySQL pods have been created and are running. Note that this will take several minutes. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 get pods -n mc-todo-list # Sample output NAME READY STATUS RESTARTS AGE mysql-5c75c8b7f-vlhck 2/2 Running 0 19h tododomain-adminserver 4/4 Running 0 19h    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Undeploy the application Regardless of its location, to undeploy the application, delete the application resources and the project from the admin cluster. Undeploy affects all clusters in which the application is located.\n  To undeploy the application, delete the ToDo List OAM resources. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN delete \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/todo-list/mc-todo-list-application.yaml $ kubectl --kubeconfig $KUBECONFIG_ADMIN delete \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/todo-list/todo-list-components.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the project. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN delete \\ -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/multicluster/todo-list/verrazzano-project.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the namespace mc-todo-list after the application pods are terminated. The secrets created for the WebLogic domain also will be deleted. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig $KUBECONFIG_ADMIN delete namespace mc-todo-list $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 delete namespace mc-todo-list    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"ToDo List is an example application containing a WebLogic component deployed to a multicluster environment.","excerpt":"ToDo List is an example application containing a WebLogic component deployed to a multicluster environment.","ref":"/docs/examples/multicluster/todo-list/","tags":"","title":"Multicluster ToDo List"},{"body":"","categories":"","description":"Learn how to trace, capture, and view application requests","excerpt":"Learn how to trace, capture, and view application requests","ref":"/docs/observability/tracing/","tags":"","title":"Tracing Application Requests"},{"body":"The exact steps required to upgrade a Verrazzano environment to achieve high availability will vary based on the configuration of each environment.\n  Assess whether your Kubernetes configuration must be updated to support the level of high availability that you want to achieve. See Configure High Availability.\n  Upgrade Verrazzano to v1.5.0 or later. See Upgrade Verrazzano.\n  The examples/ha directory contains examples of highly available Verrazzano installations. The following example uses the ha.yaml file as an example of how to upgrade a default prod installation to a highly available Verrazzano environment.\na. Create a patch file:\n  code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ cat \u003e patch.yaml \u003c\u003cEOF spec: components: authProxy: overrides: - values: replicas: 2 certManager: overrides: - values: replicaCount: 2 cainjector: replicaCount: 2 webhook: replicaCount: 2 console: overrides: - values: replicas: 2 ingress: overrides: - values: controller: autoscaling: enabled: true minReplicas: 2 defaultBackend: replicaCount: 2 istio: overrides: - values: apiVersion: install.istio.io/v1alpha1 kind: IstioOperator spec: components: pilot: k8s: replicaCount: 2 ingressGateways: - enabled: true k8s: affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - podAffinityTerm: labelSelector: matchExpressions: - key: app operator: In values: - istio-ingressgateway topologyKey: kubernetes.io/hostname weight: 100 replicaCount: 2 service: type: LoadBalancer name: istio-ingressgateway egressGateways: - enabled: true k8s: affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - podAffinityTerm: labelSelector: matchExpressions: - key: app operator: In values: - istio-egressgateway topologyKey: kubernetes.io/hostname weight: 100 replicaCount: 2 name: istio-egressgateway keycloak: overrides: - values: replicas: 2 mysql: overrides: - values: serverInstances: 3 routerInstances: 2 opensearchDashboards: replicas: 2 kiali: overrides: - values: deployment: replicas: 2 prometheusOperator: overrides: - values: prometheus: prometheusSpec: replicas: 2 opensearch: nodes: - name: es-ingest replicas: 2 EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  b. Apply the patch: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl patch verrazzano verrazzano --patch-file=patch.yaml --type=merge    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nc. Wait for the patch to be installed: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl wait --timeout=30m --for=jsonpath='{.status.state}'=Ready verrazzano/verrazzano    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"A guide for upgrading a `prod` installation for a highly available environment","excerpt":"A guide for upgrading a `prod` installation for a highly available environment","ref":"/docs/guides/ha/prod-upgrade/","tags":"","title":"Upgrade prod Installation for High Availability"},{"body":"Check that all the pods in the verrazzano-system namespace are in the Running state. While the upgrade is in progress, you may see some pods terminating and restarting as newer versions of components are applied, for example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n verrazzano-system # Sample output coherence-operator-866798c99d-r69xt 1/1 Running 1 43m fluentd-f9fbv 2/2 Running 0 38m fluentd-n79c4 2/2 Running 0 38m fluentd-xslzw 2/2 Running 0 38m oam-kubernetes-runtime-56cdb56c98-wn2mb 1/1 Running 0 43m verrazzano-application-operator-7c95ddd5b5-7xzmn 1/1 Running 0 42m verrazzano-authproxy-594d8c8dcd-llmlr 2/2 Running 0 38m verrazzano-console-74dbf97fdf-zxvvn 2/2 Running 0 38m verrazzano-monitoring-operator-6fcf8484fd-gfkhs 1/1 Running 0 38m verrazzano-operator-66c8566f95-8lbs6 1/1 Running 0 38m vmi-system-es-master-0 2/2 Running 0 38m vmi-system-grafana-799d79648d-wsdp4 2/2 Running 0 38m vmi-system-kiali-574c6dd94d-f49jv 2/2 Running 0 41m vmi-system-osd-77f8d998f4-zzvqr 2/2 Running 0 38m weblogic-operator-7b447fdb47-wlw64 2/2 Running 0 42m    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nCheck that the pods in your application namespaces are ready, for example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n todo-list # Sample output NAME READY STATUS RESTARTS AGE mysql-67575d8954-d4vkm 2/2 Running 0 39h tododomain-adminserver 4/4 Running 0 39h    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"Verify the upgrade installation","excerpt":"Verify the upgrade installation","ref":"/docs/setup/upgrade/verify/","tags":"","title":"Verify the Upgrade"},{"body":"Packages:\n  clusters.verrazzano.io/v1alpha1   clusters.verrazzano.io/v1alpha1   Resource Types:  VerrazzanoManagedCluster  VerrazzanoManagedCluster   VerrazzanoManagedCluster specifies the Verrazzano Managed Cluster API.\n    Field Description      apiVersion string   clusters.verrazzano.io/v1alpha1      kind string  VerrazzanoManagedCluster    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  VerrazzanoManagedClusterSpec     The desired state of a Verrazzano Managed Cluster resource.\n     caSecret  string    The name of a Secret that contains the CA certificate of the managed cluster. This is used to configure the admin cluster to scrape metrics from the Prometheus endpoint on the managed cluster. If Rancher is enabled on the admin cluster, this will be automatically populated by Verrazzano. Otherwise, if you disabled Rancher, see the pre-registration instructions for how to create this Secret.\n    description  string    (Optional) The description of the managed cluster.\n    managedClusterManifestSecret  string    (Optional) The name of the Secret containing the generated YAML manifest file to be applied by the user to the managed cluster. This field is managed by a Verrazzano Kubernetes operator.\n    serviceAccount  string    (Optional) The name of the ServiceAccount that was generated for the managed cluster. This field is managed by a Verrazzano Kubernetes operator.\n       status  VerrazzanoManagedClusterStatus     The observed state of a Verrazzano Managed Cluster resource.\n    ArgoCDRegistration   (Appears on:VerrazzanoManagedClusterStatus)  ArgoCDRegistration defines the Argo CD registration state for a managed cluster.\n    Field Description      status  ArgoCDRegistrationStatus     The status of the ArgoCD registration.\n    lastSetTimestamp  Kubernetes meta/v1.Time     (Optional) The timestamp of last status set.\n    message  string    (Optional) Supporting message related to the Argo CD registration status.\n    ArgoCDRegistrationStatus (string alias)  (Appears on:ArgoCDRegistration)  ArgoCDRegistrationStatus identifies the status of an Argo CD registration.\n    Value Description   \"Completed\"\n  \"Failed\"\n  \"PendingRancherClusterRegistration\"\n    Condition   (Appears on:VerrazzanoManagedClusterStatus)  Condition describes a condition that occurred on the Verrazzano Managed Cluster.\n    Field Description      lastTransitionTime  Kubernetes meta/v1.Time     (Optional) Last time the condition transitioned from one status to another.\n    message  string    (Optional) A message with details about the last transition.\n    status  Kubernetes core/v1.ConditionStatus     Status of the condition: one of True, False, or Unknown.\n    type  ConditionType     The condition of the multicluster resource which can be checked with a kubectl wait command. Condition values are case-sensitive and formatted as follows: Ready: the VerrazzanoManagedCluster is ready to be used and all resources needed have been generated.\n    ConditionType (string alias)  (Appears on:Condition)  ConditionType identifies the condition of the Verrazzano Managed Cluster which can be checked with kubectl wait.\n    Value Description   \"ManagedCARetrieved\"\n ManagedCARetrieved = true means that the managed cluster CA cert has been retrieved and populated. This is done by the VMC controller via the Rancher API proxy for the managed cluster.\n \"ManifestPushed\"\n ConditionManifestPushed = true means the the agent and registration secrets have been successfully transferred to the managed cluster on a multicluster install\n \"Ready\"\n Ready = true means the VMC is ready to be used and all resources needed have been generated\n   RancherRegistration   (Appears on:VerrazzanoManagedClusterStatus)  RancherRegistration defines the Rancher registration state for a managed cluster.\n    Field Description      clusterID  string    The Rancher cluster ID for this cluster.\n    message  string    (Optional) A supporting message related to the Rancher registration status.\n    status  RancherRegistrationStatus     The status of the Rancher registration.\n    RancherRegistrationStatus (string alias)  (Appears on:RancherRegistration)  RancherRegistrationStatus identifies the status of a Rancher registration.\n    Value Description   \"DeleteFailed\"\n  \"Completed\"\n  \"Failed\"\n    StateType (string alias)  (Appears on:VerrazzanoManagedClusterStatus)  StateType identifies the state of the Verrazzano Managed Cluster.\n    Value Description   \"Active\"\n  \"Inactive\"\n  \"Pending\"\n    VerrazzanoManagedClusterSpec   (Appears on:VerrazzanoManagedCluster)  VerrazzanoManagedClusterSpec defines the desired state of a Verrazzano Managed Cluster.\n    Field Description      caSecret  string    The name of a Secret that contains the CA certificate of the managed cluster. This is used to configure the admin cluster to scrape metrics from the Prometheus endpoint on the managed cluster. If Rancher is enabled on the admin cluster, this will be automatically populated by Verrazzano. Otherwise, if you disabled Rancher, see the pre-registration instructions for how to create this Secret.\n    description  string    (Optional) The description of the managed cluster.\n    managedClusterManifestSecret  string    (Optional) The name of the Secret containing the generated YAML manifest file to be applied by the user to the managed cluster. This field is managed by a Verrazzano Kubernetes operator.\n    serviceAccount  string    (Optional) The name of the ServiceAccount that was generated for the managed cluster. This field is managed by a Verrazzano Kubernetes operator.\n    VerrazzanoManagedClusterStatus   (Appears on:VerrazzanoManagedCluster)  VerrazzanoManagedClusterStatus defines the observed state of a Verrazzano Managed Cluster.\n    Field Description      apiUrl  string    The Verrazzano API server URL for this managed cluster.\n    conditions  []Condition     The current state of this managed cluster.\n    lastAgentConnectTime  Kubernetes meta/v1.Time     The last time the agent from this managed cluster connected to the admin cluster.\n    prometheusHost  string    The Prometheus host for this managed cluster.\n    thanosQueryStore  string    The Thanos Query Store API host name for this managed cluster.\n    rancherRegistration  RancherRegistration     The state of Rancher registration for this managed cluster.\n    argoCDRegistration  ArgoCDRegistration     The state of ArgoCD registration for this managed cluster.\n    state  StateType     The state of this managed cluster.\n      Generated with gen-crd-api-reference-docs on git commit 238db2c3e. \n","categories":"","description":"","excerpt":"Packages:\n  clusters.verrazzano.io/v1alpha1   clusters.verrazzano.io/v1alpha1   Resource Types:  VerrazzanoManagedCluster  VerrazzanoManagedCluster   VerrazzanoManagedCluster specifies the Verrazzano …","ref":"/docs/reference/vco-clusters-v1alpha1/","tags":"","title":"Verrazzano Managed Cluster"},{"body":"Before you begin Enabled and configure Argo CD using the instructions here.\nDeploy a sample application To deploy applications in a custom namespace, create Argo CD applications that specify the Git repository path, which Argo CD requires to synchronize and deploy the applications in the specified namespace.\nNOTE: You can either pre-create a namespace and label it or auto-create a namespace when deploying an application. In this example, we will auto-create a namespace.\nThis example provides information about how to deploy the Hello-helidon application. The Hello-helidon application and component YAML files are available at Hello World Helidon.\n Log in to the Argo CD console. Click New App. Specify a name for the application. For Project Name, select default. Select the Sync Policy option Automatic. By default, every three minutes, Argo CD checks the specified Git repository and synchronizes the updates in Kubernetes to the Git repository In the Sync Options section, select Auto-Create Namespace. By auto-creating the namespace, the application will be deployed outside of the service mesh. Under the Source section, enter the following:  Repository URL: https://github.com/verrazzano/verrazzano/ Revision: master Path: Path in the repository where the Kubernetes resource definitions are listed. For example: examples/helidon-config   Under the Destination section, do the following:  Cluster URL: Select the cluster to which you want to deploy the applications. Namespace: Specify the namespace in which you want to deploy the applications. The instructions in this sample use hello-helidon as the namespace.   Click Create. This creates the Argo CD application and a pictorial representation of the deployed applications is displayed.  Verify the deployed application The Hello World Helidon microservices application implements a REST API endpoint, /config, which returns a message {\"message\":\"Hello World!\"} when invoked.\nNOTE: The following instructions assume that you are using a Kubernetes environment such as OKE. Other environments or deployments may require alternative mechanisms for retrieving addresses, ports, and such.\nFollow these steps to test the endpoints.\n  Get the generated host name for the application.\n$ HOST=$(kubectl get gateways.networking.istio.io hello-helidon-helidon-config-appconf-gw \\ -n hello-helidon \\ -o jsonpath='{.spec.servers[0].hosts[0]}') $ echo $HOST # Sample output helidon-config-appconf.hello-helidon.11.22.33.44.nip.io   Get the EXTERNAL_IP address of the istio-ingressgateway service.\n$ ADDRESS=$(kubectl get service \\ -n istio-system istio-ingressgateway \\ -o jsonpath='{.status.loadBalancer.ingress[0].ip}') $ echo $ADDRESS # Sample output 11.22.33.44   Access the application.\n  Using the command line\n$ curl -sk \\ -X GET \\ https://${HOST}/config \\ --resolve ${HOST}:443:${ADDRESS} # Expected response output {\"message\":\"Hello World!\"} If you are using nip.io, then you do not need to include --resolve.\n  Local testing with a browser\nTemporarily, modify the /etc/hosts file (on Mac or Linux) or c:\\Windows\\System32\\Drivers\\etc\\hosts file (on Windows 10), to add an entry mapping the host name to the ingress gateway’s EXTERNAL-IP address. For example:\n11.22.33.44 hello-helidon.example.com Then you can access the application in a browser at https://\u003chost\u003e/config.\n If you are using nip.io, then you can access the application in a browser using the HOST variable (for example, https://${HOST}/config). If you are going through a proxy, then you may need to add *.nip.io to the NO_PROXY list.    Using your own DNS name\nPoint your own DNS name to the ingress gateway’s EXTERNAL-IP address.\n In this case, you would need to edit the hello-helidon-app.yaml file to use the appropriate value under the hosts section (such as yourhost.your.domain), before deploying the hello-helidon application. Then, you can use a browser to access the application at https://\u003cyourhost.your.domain\u003e/config.      A variety of endpoints associated with the deployed application are available to further explore the logs, metrics, and such. You can access them according to the directions here.\n  Undeploy applications  Log in to the Argo CD console. Select the application that you want to undeploy and then click Delete. Enter the name of the application and then click OK. This deletes all the resources created by the specific application except for the namespaces.  ","categories":"","description":"Use Argo CD to deploy and undeploy applications","excerpt":"Use Argo CD to deploy and undeploy applications","ref":"/docs/examples/argo-cd/","tags":"","title":"Continuous deployment example with Argo CD"},{"body":"An authorization policy enables access control on workloads in the mesh. Also, an authorization policy supports both allow and deny policies. In the following example, the authorization policy allows access from the listed service accounts that can access the Hello Helidon Greet application.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: labels: verrazzano.io/istio: hello-helidon name: hello-helidon namespace: hello-helidon spec: rules: - from: - source: principals: - cluster.local/ns/hello-helidon/sa/hello-helidon - cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account - cluster.local/ns/verrazzano-system/sa/verrazzano-monitoring-operator - cluster.local/ns/verrazzano-monitoring/sa/prometheus-operator-kube-p-prometheus selector: matchLabels: verrazzano.io/istio: hello-helidon    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"Learn about authorization policies","excerpt":"Learn about authorization policies","ref":"/docs/applications/kubernetes/auth_policy/","tags":"","title":"Authorization Policy"},{"body":"The Jaeger agent sidecar is injected to application pods by the \"sidecar.jaegertracing.io/inject\": \"true\" annotation. You may apply this annotation to namespaces or pod controllers, such as Deployments. The subsequent snippet shows how to annotate an OAM Component for Jaeger agent injection. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:Componentmetadata:name:example-componentspec:workload:apiVersion:core.oam.dev/v1alpha2kind:ContainerizedWorkloadmetadata:name:example-workloadannotations:# The component's Deployment will carry the Jaeger annotation.\"sidecar.jaegertracing.io/inject\": \"true\"   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf you have multiple Jaeger instances in your cluster, specify the name of the Jaeger instance to which you intend to send the traces, as a value for the annotation sidecar.jaegertracing.io/inject. For more details, see the Jaeger documentation.\nNOTE: Using the Jaeger agent is not supported in Helidon 3.x. To use Jaeger tracing, the Helidon application should connect directly to the Jaeger collector. See the following example YAML file, where \"TRACING_HOST\" is set to \"jaeger-operator-jaeger-collector.verrazzano-monitoring\" and \"TRACING_PORT\" to \"9411\". For Jaeger tracing in a multicluster Verrazzano environment, set the \"TRACING_HOST\" to \"jaeger-verrazzano-managed-cluster-collector.verrazzano-monitoring.svc.cluster.local\".\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:Componentmetadata:name:hello-helidon-componentspec:workload:apiVersion:oam.verrazzano.io/v1alpha1kind:VerrazzanoHelidonWorkloadmetadata:name:hello-helidon-workloadlabels:app:hello-helidonversion:v1spec:deploymentTemplate:metadata:name:hello-helidon-deploymentpodSpec:containers:- name:hello-helidon-containerimage:\"ghcr.io/verrazzano/example-helidon-greet-app-v1:1.0.0-1-20220513221156-7da0d32\"env:- name:\"TRACING_SERVICE\"value:\"hello-helidon\"- name:\"TRACING_PORT\"value:\"9411\"- name:\"TRACING_HOST\"value:\"jaeger-operator-jaeger-collector.verrazzano-monitoring\"ports:- containerPort:8080name:http   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"Configure applications to export traces to Jaeger","excerpt":"Configure applications to export traces to Jaeger","ref":"/docs/observability/tracing/capture-traces/","tags":"","title":"Capture Trace Spans Generated by your Application"},{"body":"Change the Verrazzano password To change the Verrazzano password, first change the user password in Keycloak and then update the Verrazzano secret.\nChange the user in Keycloak\n  Navigate to the Keycloak admin console.\na. Obtain the Keycloak admin console URL, as described here.\nb. Obtain the Keycloak admin console credentials, as described here.\n  In the left pane, select the verrazzano-system realm from the drop-down menu.\n  In the left pane, under Manage, select Users.\n  In the Users pane, search for verrazzano or click View all users.\n  Select the verrazzano user.\n  At the top, select the Credentials tab.\n  Click Reset Password.\n  Specify the new password and confirm.\n  Specify whether the new password is a temporary password. A temporary password must be reset on next login.\n  Save and confirm the password reset by clicking Reset password in the confirmation dialog.\n  Update the Verrazzano secret\nGet the base64 encoding for your new password. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ echo -n '\u003cnew password of verrazzano user\u003e' | base64     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUpdate the password in the secret to replace the existing password value with the new base64 encoded value. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl patch secret verrazzano -n verrazzano-system -p '{\"data\": {\"password\": \"\u003cbase64 password of verrazzano user\u003e\"}}'     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nChange the Keycloak administrator password To change the Keycloak administrator password, first change the user password in Keycloak and then update the Keycloak secret.\nChange the administrator user in Keycloak\n  Navigate to the Keycloak admin console.\na. Obtain the Keycloak admin console URL, as described here.\nb. Obtain the Keycloak admin console credentials, as described here.\n  In the left pane, select the master realm from the drop-down menu.\n  In the left pane, under Manage, select Users.\n  In the Users pane, select the keycloakadmin user.\n  At the top, select the Credentials tab.\n  Click Reset password.\n  Specify the new password and confirm.\n  Specify whether the new password is a temporary password. A temporary password must be reset on next login.\n  Save and confirm the password reset by clicking Reset password in the confirmation dialog.\n  Update the Keycloak secret\nGet the base64 encoding for your new password. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ echo -n '\u003cnew password for keycloakadmin user\u003e' | base64     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUpdate the password in the secret to replace the existing password value with the new base64 encoded value. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl patch secret keycloak-http -n keycloak -p '{\"data\": {\"password\": \"\u003cbase64 password of keycloakadmin user\u003e\"}}'     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"Change the Verrazzano and Keycloak administrator passwords","excerpt":"Change the Verrazzano and Keycloak administrator passwords","ref":"/docs/setup/access/password/","tags":"","title":"Change Verrazzano Passwords"},{"body":"Verrazzano uses NGINX for ingress to Verrazzano system components and Istio for application ingress. You can customize the NGINX and Istio ingress installation configurations using Helm overrides specified in the Verrazzano custom resource. For example, the following Verrazzano custom resource overrides the shape of an Oracle Cloud Infrastructure load balancer for both NGINX and Istio ingresses. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: custom-lb-settings spec: profile: prod components: ingressNGINX: type: LoadBalancer overrides: - values: controller: service: annotations: service.beta.kubernetes.io/oci-load-balancer-shape: flexible service.beta.kubernetes.io/oci-load-balancer-shape-flex-max: \"100\" service.beta.kubernetes.io/oci-load-balancer-shape-flex-min: \"100\" istio: overrides: - values: apiVersion: install.istio.io/v1alpha1 kind: IstioOperator spec: components: ingressGateways: - enabled: true name: istio-ingressgateway k8s: serviceAnnotations: service.beta.kubernetes.io/oci-load-balancer-shape: flexible service.beta.kubernetes.io/oci-load-balancer-shape-flex-max: \"100\" service.beta.kubernetes.io/oci-load-balancer-shape-flex-min: \"100\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor more information about setting component overrides, see Customizing the Chart Before Installing.\n","categories":"","description":"Customize Verrazzano NGINX and Istio ingress settings","excerpt":"Customize Verrazzano NGINX and Istio ingress settings","ref":"/docs/networking/traffic/ingress/","tags":"","title":"Customize Ingress"},{"body":"The following components can use persistent storage:\n OpenSearch OpenSearch Dashboards Prometheus Grafana Keycloak/MySQL  By default, each Verrazzano installation profile has different storage characteristics. The dev profile uses ephemeral storage only, but in all other profiles, each of the listed components use persistent storage. For more information, see Profile Configurations.\nNOTE Ephemeral storage is not recommended for use in production; Kubernetes pods can be restarted at any time, leading to a loss of data and system instability if non-persistent storage is used. Persistent storage is recommended for all use cases beyond evaluation or development.  While each profile has its own default persistence settings, in each case you have the option to override the profile defaults to customize your persistence settings.\nYou can customize the persistence settings for these components through the VerrazzanoSpec, as follows:\n Overriding the persistence settings for all components (Keycloak, Grafana, Prometheus, OpenSearch, and OpenSearch Dashboards) by using the defaultVolumeSource field. Overriding the persistence settings for Keycloak by using the volumeSource field on that component’s configuration.  You can set the global defaultVolumeSource and component-level volumeSource fields to one of the following values:\n   Value Storage     emptyDir Ephemeral storage; should not be used for production scenarios.   persistentVolumeClaim A PersistentVolumeClaimVolumeSource where the claimSource field references a named volumeClaimSpecTemplate.    When you want to use a persistentVolumeClaim to override the storage settings for components, you must do the following:\n Create a volumeClaimSpecTemplate which identifies the desired persistence settings. Configure a persistentVolumeClaim for the component where the claimName field references the template you created previously.  This lets you create named persistence settings that can be shared across multiple components within a Verrazzano configuration. Note that the existence of a persistence template in the volumeClaimSpecTemplates list does not directly result in the creation of a persistent volume, or affect any component storage settings until it is referenced by either defaultVolumeSource or a specific component’s volumeSource.\nExamples Review the following customizing persistent storage examples:\n Customize persistence globally using defaultVolumeSource Customize PersistentVolumeClaim settings for Keycloak using volumeSource Use global and local persistence settings together  Customize persistence globally using defaultVolumeSource NOTE Beginning in version 1.5, persistent storage is always required for MySQL. If defaultVolumeSource is configured to use emptyDir, then MySQL will ignore that configuration setting.  If defaultVolumeSource is configured, then that setting will be used for all components that require storage.\nFor example, the following Verrazzano configuration uses the prod profile, but disables persistent storage for all components. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: no-storage-prod spec: profile: prod defaultVolumeSource: emptyDir: {}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe following example uses persistentVolumeClaim to override persistence settings globally for a prod profile, to use 100Gi volumes for all components, instead of the default of 50Gi. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: prod-global-override spec: profile: prod defaultVolumeSource: persistentVolumeClaim: claimName: globalOverride volumeClaimSpecTemplates: - metadata: name: globalOverride spec: resources: requests: storage: 100Gi    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe following example uses a managed-cluster profile but overrides the persistence settings to use ephemeral storage. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: mgdcluster-empty-storage-example spec: profile: managed-cluster defaultVolumeSource: emptyDir: {} # Use emphemeral storage for all Components unless overridden    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nCustomize PersistentVolumeClaim settings for Keycloak using volumeSource The following example Verrazzano configuration enables a 100Gi PersistentVolumeClaim for the MySQL component in Keycloak in a dev profile configuration. This overrides the default of ephemeral storage for Keycloak in that profile, while retaining the default storage settings for other components. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: dev-mysql-storage-example spec: profile: dev components: keycloak: mysql: volumeSource: persistentVolumeClaim: claimName: mysql # Use the \"mysql\" PVC template for the MySQL volume configuration volumeClaimSpecTemplates: - metadata: name: mysql spec: resources: requests: storage: 100Gi    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUse global and local persistence settings together The following example uses a dev installation profile, but overrides the profile persistence settings to:\n Use 200Gi volumes for all components by default. Use a 100Gi volume for the MySQL instance associated with Keycloak.  code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: dev-storage-example spec: profile: dev defaultVolumeSource: persistentVolumeClaim: claimName: vmi # Set storage globally for the metrics stack components: keycloak: mysql: volumeSource: persistentVolumeClaim: claimName: mysql # Set storage separately for keycloak's MySql instance volumeClaimSpecTemplates: - metadata: name: mysql spec: resources: requests: storage: 100Gi - metadata: name: vmi spec: resources: requests: storage: 200Gi    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"Customize persistent storage settings","excerpt":"Customize persistent storage settings","ref":"/docs/observability/storage/","tags":"","title":"Customize Persistent Storage"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/applications/multicluster/","tags":"","title":"Deploy Applications in a Multicluster Environment"},{"body":"Grafana provides visualization for your Prometheus metric data.\n Single pod per cluster. Named vmi-system-grafana-* in the verrazzano-system namespace. Provides dashboards for metrics visualization.  To access Grafana:\n  Get the host name from the Grafana ingress. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get ingress vmi-system-grafana -n verrazzano-system # Sample output NAME CLASS HOSTS ADDRESS PORTS AGE vmi-system-grafana \u003cnone\u003e grafana.vmi.system.default.123.456.789.10.nip.io 123.456.789.10 80, 443 26h    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the password for the user verrazzano. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get secret \\ --namespace verrazzano-system verrazzano \\ -o jsonpath={.data.password} | base64 \\ --decode; echo    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access Grafana in a browser using the host name.\n  Log in using the verrazzano user and the password.\n  Grafana dashboards Verrazzano installs a number of preconfigured dashboards in Grafana. These dashboards are organized logically into folders. To view the folders, locate the Dashboards icon and select Manage.\nWithin each folder, you will find one or more preconfigured dashboards. The dashboards provide a visual representation of metrics for monitoring your applications, the Kubernetes clusters where your applications are running, and Verrazzano itself. You can add to these dashboards, and you can copy and modify the preconfigured dashboards.\nHere are the folders and dashboard descriptions:\n Coherence - A set of dashboards for monitoring Coherence applications. They provide metrics from Coherence clusters, Caches, Elastic Data, Federation Details, HTTP Servers, Kubernetes, Machines, Cluster Members, Persistence Summary, Proxy Servers, and Coherence Services. Helidon - For Helidon workloads, provides the JVM details for Helidon applications, such as Status, Heap Usage, JVM Heap Sizes, Thread Count, HTTP Requests, and such. Istio - A set of dashboards for monitoring the Verrazzano Istio service mesh and the workloads running in the mesh. JVM - For monitoring applications deployed in Verrazzano. NGINX - For monitoring the Verrazzano system ingress controller and the ingresses created using the ingress controller. Metrics include Controller Request Volume, Controller Connections, Controller Success Rate, Config Reloads, Network Pressure, and such. OpenSearch - Provides metrics from OpenSearch clusters, such as Cluster Health, Shard Details, Index Details, JVM Metrics, and such. Prometheus Operator - Provides metrics for the cluster compute resources, such as CPU Utilization, Memory Limits, and such. WebLogic - For WebLogic workloads, provides WebLogic Server runtime metrics to monitor and diagnose the runtime deployment of WebLogic Server.  In addition, there are the following preconfigured Grafana Verrazzano dashboards. These dashboards are located in Verrazzano Application, Verrazzano Monitoring, and Verrazzano System folders:\n Verrazzano Application contains the Application Status dashboard. This dashboard provides information on the overall health and performance of OAM applications that are deployed in Verrazzano and the details of the running pods. You can filter this information based on cluster, application, and component.  When you deploy a new application in Verrazzano, the application is automatically added to the dashboard and becomes available in the list of Applications. You can select the specific application that you want to monitor and select which application metrics to view. Metrics are available in three rows:  Summary provides CPU and memory usage and pod status. Storage provides disk and PVC (Persistent Volume Claims) usage. Requests provides HTTP requests and request metrics.     Verrazzano Monitoring contains dashboards for monitoring the Kubernetes clusters where Verrazzano is running:  alertmanager-mixin displays alerts created by Alertmanager, including the successful and invalid notifications sent by Alertmanager. etcd-mixin provides cluster metrics and shows additional information, such as active streams, RPC rate, database size, memory usage, client traffic, peer traffic, and such. kubernetes-mixin provides CPU, memory and network metrics based on cluster, pod, workload type, and nodes; network bandwidth based on cluster, pod, workload type, and nodes; persistent volume usage; and metrics for proxy and scheduler. node-exporter-mixin provides node level status for CPU, memory, disk, and network usage.    \nThe following graphic shows some Verrazzano Monitoring dashboards:\n Verrazzano System has a set of dashboards that provide information on the health of all Verrazzano system components and the resource usage of Kubernetes resources across clusters.  Resource Usage Detailed gives a detailed view of the resource usage for each of the Verrazzano system components, such as the application operator, cluster operator, monitoring operator, and platform operator. You can filter information based on cluster, component, and so on. Resource Usage Summary gives a summary of the resource usage that can be viewed for all components or for a specific component. You can filter information based on cluster, component, and so on. Metrics are available in three rows:  Summary provides CPU and memory usage and pod status. Storage provides disk and PVC (Persistent Volume Claims) usage. Requests provides HTTP requests and request metrics.   System Health gives the health for all Verrazzano system components that can be viewed for local clusters or any other registered clusters.    Dynamic dashboard discovery and portability Verrazzano enables dynamic discovery of Grafana dashboards. Using this feature, you can package the dashboard configuration and settings as a Kubernetes ConfigMap, and then deploy it individually or along with your application.\nTo configure a dashboard as a ConfigMap:\n  Create a dashboard as a JSON file. Or, you can export an existing Grafana dashboard as a JSON file. See Manage Dashboards.\n  Create a ConfigMap on the same cluster running Grafana that includes:\n  The label, grafana_dashboard:\"1\", so that Grafana discovers the dashboard.\n  The JSON code that defines and configures the dashboard (the dashboard JSON from step 1).\n  Optionally, a k8s-sidecar-target-directory annotation, which specifies the Grafana folder name in which you want the dashboard to appear. The value of the annotation is the Grafana folder name. If not specified, the dashboard will appear in the default Grafana folder.\n    Here is an example dashboard ConfigMap.\napiVersion: v1 kind: ConfigMap metadata: annotations: k8s-sidecar-target-directory: My App Dashboards labels: grafana_dashboard: \"1\" name: app-dashboard namespace: app data: app_dashboard.json: |- { \"title\": \"My App Dashboard\", \"uid\": \"Q4Bkkx\", \"version\": 2, \"panels\": [ { ... } ... } After the ConfigMap is created, the dashboard gets loaded in Grafana.\nAlternatively, you can create a ConfigMap from a file using kubectl create configmap, or generate ConfigMap from files. See Create a ConfigMap.\nYou can use dashboard ConfigMaps to deploy custom dashboards; these dashboards can be modified but cannot be saved in Grafana. If you want to modify the dashboard, then either update the ConfigMap or save the dashboard to a new location from the Grafana console.\n","categories":"","description":"Use Grafana to view monitoring metrics","excerpt":"Use Grafana to view monitoring metrics","ref":"/docs/observability/monitoring/configure/grafana/","tags":"","title":"Grafana"},{"body":"Helidon is a collection of Java libraries for writing microservices. Helidon provides an open source, lightweight, fast, reactive, cloud native framework for developing Java microservices. It is available as two frameworks:\n Helidon SE is a compact toolkit that embraces the latest Java SE features: reactive streams, asynchronous and functional programming, and fluent-style APIs. Helidon MP implements and supports Eclipse MicroProfile, a baseline platform definition that leverages Java EE and Jakarta EE technologies for microservices and delivers application portability across multiple runtimes.  Helidon is designed and built with container-first philosophy.\n Small footprint, low memory usage and faster startup times. All 3rd party dependencies are stored separately to enable Docker layering. Provides readiness, liveness and customizable health information for container schedulers like Kubernetes.  Containerized Helidon applications are generally deployed as Deployment in Kubernetes.\nVerrazzano integration Verrazzano supports application definition using Open Application Model (OAM). Verrrazzano applications are composed of components and application configurations.\nHelidon applications are first class citizens in Verrazzano with specialized Helidon workload support, for example, VerrazzanoHelidonWorkload. VerrazzanoHelidonWorkload is supported as part of verrazzano-application-operator in the Verrazzano installation and no additional operator setup or installation is required. VerrazzanoHelidonWorkload also supports all the Traits and Scopes defined by Verrazzano along with core ones defined by the OAM specification.\nVerrazzanoHelidonWorkload is modeled after ContainerizedWorkload, for example, it is used for long-running workloads in containers. However, VerrazzanoHelidonWorkload closely resembles and directly refers to Kubernetes Deployment schema. This enables an easy lift and shift of existing containerized Helidon applications.\nThe complete VerrazzanoHelidonWorkload API definition and description is available at VerrazzanoHelidonWorkload.\nVerrazzano Helidon application development With Verrazzano, you manage the life cycle of applications using Component and ApplicationConfiguration resources. A Verrazzano application can contain any number of VerrazzanoHelidonWorkload components, where each workload is a standalone containerized Helidon application, independent of any other in the application.\nIn the following example, everything under the spec: section is the custom resource YAML file for the containerized Helidon application, as defined by the VerrazzanoHelidonWorkload custom resource. Including this Component reference in your ApplicationConfiguration will result in a new containerized Helidon application being provisioned. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:Componentmetadata:name:hello-helidon-componentnamespace:hello-helidonspec:workload:apiVersion:oam.verrazzano.io/v1alpha1kind:VerrazzanoHelidonWorkloadmetadata:name:hello-helidon-workloadlabels:app:hello-helidonspec:deploymentTemplate:metadata:name:hello-helidon-deploymentpodSpec:containers:- name:hello-helidon-container......   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe Steps to Deploy using OAM provides end-to-end instructions for developing and deploying the Verrazzano Helidon application.\nFor more Verrazzano Helidon application examples, see Examples.\nCustomizing Helidon Workload service By default, deploying a Helidon Workload will create a service to access the Helidon pod. That service can be customized by added a serviceTemplate to the VerrazzanoHelidonWorkload spec. This supports customizing the service metadata and serviceSpec sections to do things, like add labels and annotations, customize the service ports, modify the pod selector, and such. It is not necessary to provide complete metadata and serviceSpec sections. Just add the fields you would like to customize and Verrazzano will create the rest of the fields, based the information provided in the deploymentTemplate. When customizing service ports, refer to Protocol Selection in the Istio documentation.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:Componentmetadata:name:hello-helidon-componentnamespace:hello-helidonspec:workload:apiVersion:oam.verrazzano.io/v1alpha1kind:VerrazzanoHelidonWorkloadmetadata:name:hello-helidon-workloadlabels:app:hello-helidonspec:deploymentTemplate:metadata:name:hello-helidon-deploymentpodSpec:containers:- name:hello-helidon-container......serviceTemplate:metadata:name:hello-helidon-serviceserviceSpec:ports:- name:http-hello-helidon......   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Provisioning When you apply the previous Component YAML file, Kubernetes will create a component.oam.verrazzano.io resource, but the containerized Helidon application will not be created until you create the ApplicationConfiguration resource, which references the VerrazzanoHelidonWorkload component. When the application is created, Verrazzano creates a Deployment and Service resource for each containerized Helidon application.\nTypically, you would modify the Deployment and Service resource to make changes or to do lifecycle operations, like scale in and scale out. However, in the Verrazzano environment, the containerized Helidon application resource is owned by the verrazzano-application-operator and will be reconciled to match the component workload resource. Therefore, you need to manage the application configuration by modifying the VerrazzanoHelidonWorkload or ApplicationConfiguration resource, either by kubectl edit or applying a new YAML file. Verrazzano will notice the Component resource change and will update the Deployment and Service resource as needed.\nYou can add a new VerrazzanoHelidonWorkload to a running application, or remove an existing workload, by modifying the ApplicationConfiguration resource and adding or removing the VerrazzanoHelidonWorkload component.\nScaling The recommended way to scale containerized Helidon application replicas is to specify a ManualScalerTrait with the VerrazzanoHelidonWorkload in the ApplicationConfiguration. The following example configuration shows the replicaCount field that specifies the number of replicas for the application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  ...spec:components:- componentName:hello-helidon-componenttraits:- trait:apiVersion:core.oam.dev/v1alpha2kind:ManualScalerTraitspec:replicaCount:2...   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nVerrazzano will modify the Deployment resource replicas field and the containerized Helidon application replicas will be scaled accordingly.\nNOTE Make sure the replicas defined on the VerrazzanoHelidonWorkload component and that the replicaCount defined on the ManualScalerTrait for that component match, or else the DeploymentController in Kubernetes and OAM runtime in verrazzano-application-operator will compete to create a different number of Pods for same containerized Helidon application. To avoid confusion, we recommend that you specify replicaCount defined on the ManualScalerTrait and leave replicas undefined on VerrazzanoHelidonWorkload (as it is optional).  Logging When a containerized Helidon application is provisioned on Verrazzano, Verrazzano will configure the default logging and send logs to OpenSearch. You can view the logs using the OpenSearch Dashboards.\nThe logs are placed in a per-namespace OpenSearch data stream named verrazzano-application-\u003cnamespace\u003e, for example: verrazzano-application-hello-helidon. All logs from containerized Helidon application pods in the same namespace will go into the same data stream, even for different applications. This is standard behavior and there is no way to disable or change it.\nMetrics Verrazzano uses Prometheus to scrape metrics from containerized Helidon application pods. Like logging, metrics scraping is also enabled during provisioning. You can view metrics using the Grafana console.\nUsing the MetricsTrait custom resource, you can customize configuration information needed to enable metrics for an application component.\nIngress Using the IngressTrait custom resource, you can configure traffic routing to a containerized Helidon application for an application component.\nTroubleshooting Whenever you have a problem with your Verrazzano Helidon application, there are some basic techniques you can use to troubleshoot. Troubleshooting shows you some simple things to try, as well as how to solve common problems you may encounter.\n","categories":"","description":"Develop Helidon applications on Verrazzano","excerpt":"Develop Helidon applications on Verrazzano","ref":"/docs/applications/oam/workloads/helidon/helidon/","tags":"","title":"Helidon Workload"},{"body":"The IngressTrait custom resource contains the configuration of host and path rules for traffic routing to an application. Here is a sample ApplicationConfiguration that specifies an IngressTrait. To deploy an example application that demonstrates this IngressTrait, see Hello World Helidon.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: core.oam.dev/v1alpha2 kind: ApplicationConfiguration metadata: name: hello-helidon-appconf namespace: hello-helidon annotations: version: v1.0.0 description: \"Hello Helidon application\" spec: components: - componentName: hello-helidon-component traits: - trait: apiVersion: oam.verrazzano.io/v1alpha1 kind: IngressTrait metadata: name: hello-helidon-ingress spec: rules: - paths: - path: \"/greet\" pathType: Prefix     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  In the sample configuration, the IngressTrait hello-helidon-ingress is set on the hello-helidon-component application component and defines an ingress rule that configures a path and path type. This exposes a route for external access to the application. Note that because no hosts list is given for the IngressRule, a DNS host name is automatically generated.\nFor example, with the sample application configuration successfully deployed, the application will be accessible with the path specified in the IngressTrait and the generated host name.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ HOST=$(kubectl get gateways.networking.istio.io hello-helidon-hello-helidon-gw -n hello-helidon -o jsonpath={.spec.servers[0].hosts[0]}) $ echo $HOST hello-helidon-appconf.hello-helidon.11.22.33.44.nip.io $ curl -sk -X GET https://${HOST}/greet     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Load balancer session affinity is configured using an HTTP cookie in a destination rule. Here is an updated sample ApplicationConfiguration that includes a destination rule with an HTTP cookie.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: core.oam.dev/v1alpha2 kind: ApplicationConfiguration metadata: name: hello-helidon-appconf namespace: hello-helidon annotations: version: v1.0.0 description: \"Hello Helidon application\" spec: components: - componentName: hello-helidon-component traits: - trait: apiVersion: oam.verrazzano.io/v1alpha1 kind: IngressTrait metadata: name: hello-helidon-ingress spec: rules: - paths: - path: \"/greet\" pathType: Prefix - destination: httpCookie: name: sessioncookie path: \"/\" ttl: 600     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Additionally, an authorization policy limiting access to specific request principals and optionally predicated on additional conditions, can be specified for a path. Request for the path will be limited to matching request principals that meet the defined conditions, otherwise the request will be denied.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: core.oam.dev/v1alpha2 kind: ApplicationConfiguration metadata: name: hello-helidon-appconf namespace: hello-helidon annotations: version: v1.0.0 description: \"Hello Helidon application\" spec: components: - componentName: hello-helidon-component traits: - trait: apiVersion: oam.verrazzano.io/v1alpha1 kind: IngressTrait metadata: name: hello-helidon-ingress spec: rules: - paths: - path: \"/greet\" pathType: Prefix authorizationPolicy: rules: - from: requestPrincipals: - \"*\" when: - key: request.auth.claims[realm_access][roles] values: - \"customer\"     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Use the following rules related to the host name:\n If you provide a host name, then you have an option to provide a certificate. If you do not provide a certificate, then Verrazzano generates one for you. If you provide a certificate, the TLS secret for that certificate must be in the istio-system namespace. If you provide a certificate, then you must provide a host name. If you do not provide either a host name or a certificate, then Verrazzano generates them for you.  ","categories":"","description":"A trait supporting the generation of an ingress for application access","excerpt":"A trait supporting the generation of an ingress for application access","ref":"/docs/applications/oam/traits/ingress/ingress/","tags":"","title":"IngressTrait"},{"body":"Istio gateway A gateway is a load balancer that connects to the mesh and receives incoming or outgoing HTTP/TCP connections. It specifies which ports are to be exposed, the protocol to be used, and so on.\nThe following is an example to direct public access to the Hello Helidon Greet application. Replace domain name with the Kubernetes cluster domain used in Verrazzano. This ensures that you have a fully-qualified domain name for host entries in the resources.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: networking.istio.io/v1beta1 kind: Gateway metadata: name: hello-helidon-hello-helidon-gw namespace: hello-helidon spec: selector: istio: ingressgateway servers: - hosts: - hello-helidon.hello-helidon.\u003cdomain name\u003e name: hello-helidon-ingress port: name: https-hello-helidon-ingress number: 443 protocol: HTTPS tls: credentialName: hello-helidon-hello-helidon-ingress-cert-secret # Secret that contains the certificate used for TLS mode: SIMPLE    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Istio virtual service A virtual service helps in connecting the gateway to the Kubernetes service. It is a set of rules for routing traffic based on the match criteria for a specific protocol. If the traffic matches the criteria, then it will be sent to a named destination service.\nThe following is an example of registering the Hello Helidon Greet application in the Istio service registry.\nReplace domain name with the Kubernetes cluster domain used in Verrazzano. This ensures that you have a fully-qualified domain name for host entries in the resources.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: networking.istio.io/v1beta1 kind: VirtualService metadata: name: hello-helidon-ingress-rule-0-vs namespace: hello-helidon spec: gateways: - hello-helidon-hello-helidon-gw hosts: - hello-helidon.hello-helidon.\u003cdomain name\u003e http: - match: - uri: prefix: /greet route: - destination: host: hello-helidon-deployment port: number: 8080    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"Learn about Istio gateway and virtual service","excerpt":"Learn about Istio gateway and virtual service","ref":"/docs/applications/kubernetes/gateway_virtual_service/","tags":"","title":"Istio Gateway and Virtual Service"},{"body":"Verrazzano uses Kubernetes Role-Based Access Control (RBAC) to protect Verrazzano resources.\nVerrazzano includes a set of roles that can be granted to users, enabling access to Verrazzano resources managed by Kubernetes. In addition, Verrazzano creates a number of roles that grant permissions needed by various Verrazzano system components (operators and third-party components).\nVerrazzano creates default role bindings during installation and for projects, at project creation or update.\nNOTE Kubernetes RBAC must be enabled in every cluster to which Verrazzano is deployed or access control will not work. RBAC is enabled by default in most Kubernetes environments.  Verrazzano user roles The following table lists the defined Verrazzano user roles. Each is a ClusterRole intended to be granted directly to users or groups. (In some scenarios, it may be appropriate to grant a user role to a service account.)\n   Verrazzano Role Binding Scope Description     verrazzano-admin Cluster Manage Verrazzano system components, clusters, and projects. Install and update Verrazzano.   verrazzano-monitor Cluster View and monitor Verrazzano system components, clusters, and projects.   verrazzano-project-admin Namespace Deploy and manage applications.   verrazzano-project-monitor Namespace View and monitor applications.    Kubernetes user roles Verrazzano roles do not include permissions for Kubernetes itself. Instead, it relies on the default user roles provided by Kubernetes. This allows Verrazzano to easily grant the Kubernetes access appropriate to a Verrazzano role, without having to maintain a long list of fine-grained Kubernetes permissions in the Verrazzano roles.\nThe following table shows the default Kubernetes roles that are granted by default for each Verrazzano role.\n   Verrazzano Role Kubernetes Role Binding Scope     verrazzano-admin admin Cluster   verrazzano-monitor view Cluster   verrazzano-project-admin admin Namespace   verrazzano-project-monitor view Namespace    Default role bindings Verrazzano creates role bindings for the system and for projects, binding Verrazzano ClusterRoles to one or more Kubernetes Subjects. By default, each role is bound to a Keycloak group, so all Keycloak users who are members of that group will be granted the role.\nAlso, Verrazzano creates role bindings for the corresponding Kubernetes user roles. The Kubernetes role appropriate for a given Verrazzano role is bound to the same set of Subjects as the corresponding Verrazzano role.\nThe default bindings can be overridden by specifying one or more Kubernetes Subjects to which the role should be bound. Any valid Subject can be specified (user, group, or service account), but two caveats should be kept in mind:\n It’s generally better to grant a role to a group, rather than a specific user, so that roles can be granted (or withdrawn) by editing a user’s group memberships, rather than deleting a role binding and creating a new one. If you do want to grant a role directly to a specific user, then the user must be specified using its unique ID, not its user name. This is because the authentication proxy impersonates the sub (subject) field from the user’s token, which contains the ID. Keycloak user IDs are guaranteed to be unique, unlike user names.  Default system role bindings Verrazzano creates role bindings for system users during installation. The default role bindings are listed as follows:\n   Role Default Binding Subject     verrazzano-admin group: verrazzano-admins   verrazzano-monitor group: verrazzano-monitors    Default project role bindings Verrazzano creates role bindings for project users at project creation or update. The default role bindings are listed as follows:\n   Role Default Binding Subject     verrazzano-project-admin group: verrazzano-project-\u003cproj_name\u003e-admins   verrazzano-project-monitor group: verrazzano-project-\u003cproj_name\u003e-monitors    NOTE The role bindings for project roles are created automatically, but the project-specific groups that they refer to are not automatically created. You must create those groups using the Keycloak console or API, or specify different binding subjects for the project.  Override default role bindings You can override the default role bindings that are created for system and project roles.\nOverride system role bindings To override the set of subjects that are bound to Verrazzano (and Kubernetes) roles during installation, add the Subjects to the Verrazzano CR you use to install Verrazzano, as shown in the following example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: ... security: adminSubjects: - name: admin-group kind: Group monitorSubjects: - name: view-group kind: Group ...    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  You can specify multiple subjects for both admin and monitor roles. You can also specify a subject or subjects for one role, but not the other. If no subjects are specified for a role, then the default binding subjects will be used.\nOverride project role bindings To override the set of subjects that are bound to Verrazzano (and Kubernetes) roles for a project, add the Subjects to the VerrazzanoProject CR for the project, as shown in the following example.\nNote that the generated role bindings will be updated if you update the VerrazzanoProject CR and change the subjects specified for either role. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: clusters.verrazzano.io/v1beta1 kind: VerrazzanoProject metadata: name: my-project spec: ... security: projectAdminSubjects: - name: my-project-admin-group kind: Group projectMonitorSubjects: - name: my-project-view-group kind: Group ...    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  As with the system role bindings, you can specify multiple subjects for both project-admin and project-monitor roles. You can also specify a subject or subjects for one role, but not the other. If no subjects are specified for a role, then the default binding subjects will be used.\n","categories":"","description":"Learn about role-based access control in Verrazzano","excerpt":"Learn about role-based access control in Verrazzano","ref":"/docs/security/rbac/rbac/","tags":"","title":"Kubernetes RBAC"},{"body":"This guide describes how to move (“Lift-and-Shift”) an on-premises WebLogic Server domain to a cloud environment running Kubernetes using Verrazzano.\nOverview The Initial steps create a very simple on-premises domain that you will move to Kubernetes. The sample domain is the starting point for the lift and shift process; it contains one application (ToDo List) and one data source. First, you’ll configure the database and the WebLogic Server domain. Then, in Lift and Shift, you will move the domain to Kubernetes with Verrazzano. This guide does not include the setup of the networking that would be needed to access an on-premises database, nor does it document how to migrate a database to the cloud.\nWhat you need   The Git command-line tool and access to GitHub\n  MySQL Database 8.x - a database server\n  WebLogic Server 12.2.1.4.0 - an application server; Note that all WebLogic Server installers are supported except the Quick Installer.\n  Maven - to build the application\n  WebLogic Deploy Tooling (WDT) - v1.9.15 or later, to convert the WebLogic Server domain to and from metadata\n  WebLogic Image Tool (WIT) - v1.9.13 or later, to build the Docker image\n  Initial steps In the initial steps, you create a sample domain that represents your on-premises WebLogic Server domain.\nCreate a database using MySQL called tododb   Download the MySQL image from Docker Hub. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ docker pull mysql:latest    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Start the container database (and optionally mount a volume for data). code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ export MYSQL_USER=\u003cyour-mysql-username\u003e $ export MYSQL_PASSWORD=\u003cyour-mysql-password\u003e $ export MYSQL_ROOT_PASSWORD=\u003cyour-mysql-rootpassword\u003e $ docker run --name tododb \\ -p 3306:3306 \\ -e MYSQL_USER=$MYSQL_USER \\ -e MYSQL_PASSWORD=$MYSQL_PASSWORD \\ -e MYSQL_DATABASE=tododb \\ -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD \\ -d mysql:latest    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Start a MySQL client to change the password algorithm to mysql_native_password.\n Assuming the database server is running, start a database CLI client. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ docker exec \\ -it tododb mysql \\ -uroot \\ -p    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  When prompted for the password, enter the password for the root user. After being connected, run the ALTER command at the MySQL prompt. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ ALTER USER '\u003cyour-mysql-username\u003e'@'%' identified with mysql_native_password by '\u003cyour-mysql-password\u003e';    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));     Create a WebLogic Server domain   If you do not have WebLogic Server 12.2.1.4.0 installed, install it now.\n  Choose the GENERIC installer from WebLogic Server Downloads and follow the documented installation instructions.\n  Be aware of these domain limitations:\n There are two supported domain types, single server and single cluster. Domains must use:  The default value AdminServer for AdminServerName. WebLogic Server listen port for the Administration Server: 7001. WebLogic Server listen port for the Managed Server: 8001. Note that these are all standard WebLogic Server default values.      Save the installer after you have finished; you will need it to build the Docker image.\n  To make copying commands easier, define an environment variable for ORACLE_HOME that points to the directory where you installed WebLogic Server 12.2.1.4.0. For example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ export ORACLE_HOME=$HOME/Oracle/Middleware/Oracle_Home    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n    Use the Oracle WebLogic Server Configuration Wizard to create a domain called tododomain.\nNOTE: This example assumes that the on-premises WebLogic Server domain is on Linux.\n Launch $ORACLE_HOME/oracle_common/common/bin/config.sh. Select Create a new domain. Specify a Domain Location of \u003coracle home\u003e/user_projects/domains/tododomain and click Next. Select the Basic WebLogic Server Domain [wlserver] template and click Next. Enter the password for the administrative user and click Next. Accept the defaults for Domain Mode and JDK, and click Next. Select Administration Server and click Next. Ensure that the server name is AdminServer and click Next. Click Create. After it has completed, click Next, then Finish.    To start the newly created domain, run the domain’s start script. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ $ORACLE_HOME/user_projects/domains/tododomain/bin/startWebLogic.sh    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access the WebLogic Server Administration Console of the newly started domain with your browser, for example, http://localhost:7001/console, and log in using the administrator credentials you specified.\n  Add a data source configuration to access the database Using the WebLogic Server Administration Console, log in and add a data source configuration to access the MySQL database. During the data source configuration, you can accept the default values for most fields, but the following fields are required to match the application and database settings you used when you created the MySQL database.\n  In the left pane in the Console, expand Services and select Data Sources.\n  On the Summary of JDBC Data Sources page, click New and select Generic Data Source.\n  On the JDBC Data Sources page, enter or select the following information:\n Name: tododb JNDI Name: jdbc/ToDoDB Database Type: MySQL    Click Next and then click Next two more times.\n  On the Create a New JDBC Data Source page, enter the following information:\n Database Name: tododb Host name: localhost Database Port: 3306 Database User Name: \u003cyour-mysql-username\u003e Password: \u003cyour-mysql-password\u003e Confirm Password: \u003cyour-mysql-password\u003e    Click Next.\n  Select Test Configuration, and make sure you see “Connection Test Succeeded” in the Messages field of the Console.\n  Click Next.\n  On the Select Targets page, select AdminServer.\n  Click Finish to complete the configuration.\n  Build and deploy the application   Using Maven, build this project to produce todo.war.\nNOTE: You should clone this repo outside of $ORACLE_HOME or copy the WAR file to another location, as WDT may ignore it during the model creation phase. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ git clone https://github.com/verrazzano/examples.git $ cd examples/todo-list/ $ mvn clean package    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Using the WebLogic Server Administration Console, deploy the ToDo List application.\n In the left pane in the Console, select Deployments and click Install. Use the navigation links or provide the file path to todo.war, typically \u003crepo\u003e/todo-list/target. For example, if you cloned the examples repository in your $HOME directory, the location should be $HOME/examples/examples/todo-list/target/todo.war. Click Next twice, then Finish.  NOTE: The remaining steps assume that the application context is todo.\n  Initialize the database After the application is deployed and running in WebLogic Server, access the http://localhost:7001/todo/rest/items/init REST service to create the database table used by the application. In addition to creating the application table, the init service also will load four sample items into the table.\nIf you get an error here, go back to the Select Targets page in the WebLogic Server Administration Console and make sure that you selected AdminServer as the data source target.\nAccess the application  Access the application at http://localhost:7001/todo/index.html.   Add a few entries or delete some. After verifying the application and database, you may shut down the local WebLogic Server domain.  Lift and Shift steps The following steps will move the sample domain to Kubernetes with Verrazzano.\nCreate a WDT Model  If you have not already done so, download v1.9.15 or later of WebLogic Deploy Tooling (WDT) from GitHub. Unzip the installer weblogic-deploy.zip file so that you can access bin/discoverDomain.sh. To make copying commands easier, define an environment variable for WDT_HOME that points to the directory where you installed WebLogic Deploy Tooling. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ export WDT_HOME=/install/directory    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   For example, to get the latest version: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -OL https://github.com/oracle/weblogic-deploy-tooling/releases/latest/download/weblogic-deploy.zip $ unzip weblogic-deploy.zip $ cd weblogic-deploy $ export WDT_HOME=$(pwd)    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nTo create a reusable model of the application and domain, use WDT to create a metadata model of the domain.\n First, create an output directory to hold the generated scripts and models. Then, run WDT discoverDomain. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ mkdir v8o $ $WDT_HOME/bin/discoverDomain.sh \\ -oracle_home $ORACLE_HOME \\ -domain_home /path/to/domain/dir \\ -model_file ./v8o/wdt-model.yaml \\ -archive_file ./v8o/wdt-archive.zip \\ -target vz \\ -output_dir v8o    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   You will find the following files in ./v8o:\n create_k8s_secrets.sh - A helper script with kubectl commands to apply the Kubernetes secrets needed for this domain vz-application.yaml - Verrazzano application configuration and component file vz_variable.properties - A set of properties extracted from the WDT domain model wdt-archive.zip - The WDT archive file containing the ToDo List application WAR file wdt-model.yaml - The WDT model of the WebLogic Server domain  If you chose to skip the Access the application step and did not verify that the ToDo List application was deployed, then you should verify that you see the todo.war file inside the wdt-archive.zip file. If you do not see the WAR file, there was something wrong in your deployment of the application on WebLogic Server that will require additional troubleshooting in your domain.\nCreate a Docker image At this point, the Verrazzano model is just a template for the real model. The WebLogic Image Tool will fill in the placeholders for you, or you can edit the model manually to set the image name and domain home directory.\n If you have not already done so, download WebLogic Image Tool (WIT) from GitHub. Unzip the installer imagetool.zip file so that you can access bin/imagetool.sh. To make copying commands easier, define an environment variable for WIT_HOME that points to the directory where you installed WebLogic Image Tool. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ export WIT_HOME=/install/directory    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   For example, to get the latest WIT tool: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -OL https://github.com/oracle/weblogic-image-tool/releases/latest/download/imagetool.zip $ unzip imagetool.zip $ cd imagetool $ export WIT_HOME=$(pwd)    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nYou will need a Docker image to run your WebLogic Server domain in Kubernetes. To use WIT to create the Docker image, run imagetool create. Although WIT will download patches and PSUs for you, it does not yet download installers. Until then, you must download the WebLogic Server and Java Development Kit installer manually and provide their location to the imagetool cache addInstaller command. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # The directory created previously to hold the generated scripts and models. $ cd v8o $ $WIT_HOME/bin/imagetool.sh cache addInstaller \\ --path /path/to/installer/jdk-8u231-linux-x64.tar.gz \\ --type jdk \\ --version 8u231 # The installer file name may be slightly different depending on # which version of the 12.2.1.4.0 installer that you downloaded, slim or generic. $ $WIT_HOME/bin/imagetool.sh cache addInstaller \\ --path /path/to/installer/fmw_12.2.1.4.0_wls_Disk1_1of1.zip \\ --type wls \\ --version 12.2.1.4.0 $ $WIT_HOME/bin/imagetool.sh cache addInstaller \\ --path /path/to/installer/weblogic-deploy.zip \\ --type wdt \\ --version latest # Paths for the files in this command assume that you are running it from the # v8o directory created during the `discoverDomain` step. $ $WIT_HOME/bin/imagetool.sh create \\ --tag your/repo/todo:1 \\ --version 12.2.1.4.0 \\ --jdkVersion 8u231 \\ --wdtModel ./wdt-model.yaml \\ --wdtArchive ./wdt-archive.zip \\ --wdtVariables ./vz_variable.properties \\ --resourceTemplates=./vz-application.yaml \\ --wdtModelOnly    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe imagetool create command will have created a local Docker image and updated the Verrazzano model with the domain home and image name. Check your Docker images for the tag that you used in the create command using docker images from the Docker CLI.\nIf everything worked correctly, it is time to push that image to the container registry that Verrazzano will use to access the image from Kubernetes. You can use the Oracle Cloud Infrastructure Registry (OCIR) as your repository for this example, but most Docker compliant registries should work.\nThe variables in the vz-application.yaml resource template should be resolved with information from the image tool build.\nVerify this by looking in the v8o/vz-application.yaml file to make sure that the image: {{{imageName}}} value has been set with the given --tag value.\nPush the image to your repo.\nNOTE: The image name must be the same as what is in the vz-application.yaml file under spec \u003e workload \u003e spec \u003e image for the tododomain-domain component. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ docker push your/repo/todo:1    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nDeploy to Verrazzano After the application image has been created, there are several steps required to deploy the application into a Verrazzano environment.\nThese include:\n Creating and labeling the tododomain namespace. Creating the necessary secrets required by the ToDo List application. Creating the Verrazzano components such as Service, Deployment, and ConfigMap required by the MySQL instance in the tododomain namespace. Updating the vz-application.yaml file to enable the Verrazzano MySQL components in the ToDo List ApplicationConfiguration to deploy as Kubernetes objects. Updating the vz-application.yaml file to use the Verrazzano MySQL deployment and (optionally) expose the WebLogic Server Administration Console. Applying the vz-application.yaml file.  The following steps assume that you have a Kubernetes cluster and that Verrazzano is already installed in that cluster.\nLabel the namespace Create the tododomain namespace, and add labels to allow the WebLogic Server Kubernetes Operator to manage it and enabled for Istio. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create namespace tododomain $ kubectl label namespace tododomain verrazzano-managed=true istio-injection=enabled    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nCreate the required secrets If you haven’t already done so, edit and run the create_k8s_secrets.sh script to generate the Kubernetes secrets. WDT does not discover passwords from your existing domain. Before running the create secrets script, you will need to edit create_k8s_secrets.sh to set the passwords for the WebLogic Server domain and the data source. In this domain, there are a few passwords that you need to enter:\n Administrator credentials ToDo database credentials  For example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # Update \u003cadmin-user\u003e and \u003cadmin-password\u003e for weblogic-credentials $ create_paired_k8s_secret weblogic-credentials \u003cyour-WLS-username\u003e \u003cyour-WLS-password\u003e # Update \u003cuser\u003e and \u003cpassword\u003e for tododomain-jdbc-tododb $ create_paired_k8s_secret jdbc-tododb \u003cyour-mysql-username\u003e \u003cyour-mysql-password\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThen run the script: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ sh ./create_k8s_secrets.sh    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nVerrazzano will need a credential to pull the image that you just created, so you need to create one more secret. The name for this credential can be changed in the vz-application.yaml file to anything you like, but it defaults to tododomain-registry-credentials.\nAssuming that you leave the name tododomain-registry-credentials, you will need to run a kubectl create secret command similar to the following: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create secret docker-registry tododomain-registry-credentials \\ --docker-server=phx.ocir.io \\ --docker-email=your.name@example.com \\ --docker-username=tenancy/username \\ --docker-password='passwordForUsername' \\ --namespace=tododomain    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUpdate the application configuration Update the generated vz-application.yaml file for the todo application to:\n  Update the tododomain-configmap component to use the in-cluster MySQL service URL jdbc:mysql://mysql.tododomain.svc.cluster.local:3306/tododb to access the database. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  wdt_jdbc.yaml:|resources: JDBCSystemResource: 'todo-ds': JdbcResource: JDBCDriverParams: # This is the URL of the database used by the WebLogic Server application URL: \"jdbc:mysql://mysql.tododomain.svc.cluster.local:3306/tododb\"   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Update the tododomain-appconf ApplicationConfiguration to enable Verrazzano MySQL components to be deployed as Kubernetes objects. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:core.oam.dev/v1alpha2kind:ApplicationConfigurationmetadata:name:tododomain-appconfnamespace:tododomainannotations:version:v1.0.0description:\"tododomain application configuration\"spec:components:- componentName:tododomain-domaintraits:- trait:apiVersion:oam.verrazzano.io/v1alpha1kind:IngressTraitspec:rules:- paths:# application todo- path:\"/todo\"pathType:Prefix- componentName:tododomain-configmap- componentName:todo-mysql-service- componentName:todo-mysql-deployment- componentName:todo-mysql-configmap   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The file vz-application-modified.yaml is an example of a modified vz-application.yaml file. A diff of these two sample files is shown: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ diff vz-application.yaml vz-application-modified.yaml 30a31,33 \u003e - componentName: todo-mysql-service \u003e - componentName: todo-mysql-deployment \u003e - componentName: todo-mysql-configmap 102c105 \u003c URL: \"jdbc:mysql://localhost:3306/tododb\" --- \u003e URL: \"jdbc:mysql://mysql.tododomain.svc.cluster.local:3306/tododb\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Create Verrazzano components for MySQL As noted previously, moving a production environment to Verrazzano would require migrating the data as well. While data migration is beyond the scope of this guide, we will still need to include a MySQL instance to be deployed with the application in the Verrazzano environment.\nTo do so, first, we need to create the Verrazzano components for MySQL by applying the mysql-oam.yaml file in the tododomain namespace. The components will be deployed as Kubernetes objects when the ToDo List application is deployed by applying the vz-application.yaml file in the next step.\n  Download the mysql-oam.yaml file.\n  Then, apply the YAML file: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f mysql-oam.yaml # Expected response component.core.oam.dev/todo-mysql-service created component.core.oam.dev/todo-mysql-deployment created component.core.oam.dev/todo-mysql-configmap created    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get components -ntododomain # Expected response todo-mysql-configmap ConfigMap 26s todo-mysql-deployment Deployment 26s todo-mysql-service Service 26s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Deploy the ToDo List application and MySQL instance Finally, run kubectl apply to apply the Verrazzano components and Verrazzano application configuration files to start your domain. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f vz-application.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThis will:\n Create the application Component resources for the ToDo List application. Deploy the Verrazzano component resources as Kubernetes objects and create the MySQL instance. Create the application configuration resources that create the instance of the ToDo List application in the Verrazzano cluster.  Wait for the ToDo List example application to be ready. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl wait pod \\ --for=condition=Ready tododomain-adminserver \\ -n tododomain # Expected response pod/tododomain-adminserver condition met    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nVerify that the pods are in the Running state. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pod -n tododomain # Sample output NAME READY STATUS RESTARTS AGE mysql-55bb4c4565-c8zf5 1/1 Running 0 8m tododomain-adminserver 4/4 Running 0 5m    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAccess the application from your browser   Get the generated host name for the application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get gateways.networking.istio.io tododomain-tododomain-appconf-gw \\ -n tododomain \\ -o jsonpath={.spec.servers[0].hosts[0]} # Sample output tododomain-appconf.tododomain.11.22.33.44.nip.io    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Initialize the database by accessing the init URL. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  https://tododomain-appconf.tododomain.11.22.33.44.nip.io/todo/rest/items/init    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access the application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  https://tododomain-appconf.tododomain.11.22.33.44.nip.io/todo    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access the WebLogic Server Administration Console   Set up port forwarding. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl port-forward pods/tododomain-adminserver 7001:7001 -n tododomain    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: If you are using the Oracle Cloud Infrastructure Cloud Shell to run kubectl, in order to access the WebLogic Server Administration Console using port forwarding, you will need to run kubectl on another machine.\n  Access the WebLogic Server Administration Console from your browser. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  http://localhost:7001/console    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  NOTE It is recommended that the WebLogic Server Administration Console not be exposed publicly.  ","categories":"","description":"A guide for moving WebLogic Server domains to Verrazzano","excerpt":"A guide for moving WebLogic Server domains to Verrazzano","ref":"/docs/guides/lift-and-shift/lift-and-shift/","tags":"","title":"Lift-and-Shift Guide"},{"body":"The LoggingTrait custom resource contains the configuration for an additional logging sidecar with a custom image and Fluentd configuration file. Here is a sample ApplicationConfiguration that includes a LoggingTrait. To deploy an example application with this LoggingTrait, replace the ApplicationConfiguration of the ToDo-List example application with the following sample.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: core.oam.dev/v1alpha2 kind: ApplicationConfiguration metadata: name: todo-appconf namespace: todo-list annotations: version: v1.0.0 description: \"ToDo List example application\" spec: components: - componentName: todo-domain traits: - trait: apiVersion: oam.verrazzano.io/v1alpha1 kind: LoggingTrait metadata: name: logging-trait-example namespace: todo-list spec: loggingImage: fluent/fleuntd-example-image # Replace with custom Fluentd Image loggingConfig: |- # Replace with Fluentd config file \u003cmatch **\u003e @type stdout \u003c/match\u003e - componentName: todo-jdbc-configmap - componentName: todo-mysql-configmap - componentName: todo-mysql-service - componentName: todo-mysql-deployment     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  In this sample configuration, the LoggingTrait logging-trait-example is set on the todo-domain application component and defines a logging sidecar with the given Fluentd image and configuration file. This sidecar will be attached to the component’s pod and will gather logs according to the given Fluentd configuration file. In order for the Fluentd DaemonSet to collect the custom logs, the Fluentd configuration file needs to direct the logs to STDOUT, as demonstrated in the previous example.\nFor example, when the ToDo-List example ApplicationConfiguration is successfully deployed with a LoggingTrait, the tododomain-adminserver pod will have a container named logging-stdout. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods tododomain-adminserver -n todo-list -o jsonpath='{.spec.containers[*].name}' ... logging-stdout ...     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIn this example, the logging-stdout container will run the image given in the LoggingTrait and a ConfigMap named logging-stdout-todo-domain-domain will be created with the custom Fluentd configuration file.\n","categories":"","description":"A trait supporting the definition of application logging parameters","excerpt":"A trait supporting the definition of application logging parameters","ref":"/docs/applications/oam/traits/logging/logging/","tags":"","title":"LoggingTrait"},{"body":"The MetricsTrait custom resource contains the configuration information needed to enable metrics for an application component. Component workloads configured with a MetricsTrait are set up to emit metrics through an endpoint that are scraped by a given Prometheus deployment. Here is a sample ApplicationConfiguration that specifies a MetricsTrait. To deploy an example application that demonstrates a MetricsTrait, see Hello World Helidon.\nNote that if an ApplicationConfiguration does not specify a MetricsTrait, then a default MetricsTrait will be generated with values appropriate for the workload type.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: core.oam.dev/v1alpha2 kind: ApplicationConfiguration metadata: name: hello-helidon-appconf namespace: hello-helidon annotations: version: v1.0.0 description: \"Hello Helidon application\" spec: components: - componentName: hello-helidon-component traits: - trait: apiVersion: oam.verrazzano.io/v1alpha1 kind: MetricsTrait - trait: apiVersion: oam.verrazzano.io/v1alpha1 kind: IngressTrait metadata: name: hello-helidon-ingress spec: rules: - paths: - path: \"/greet\" pathType: Prefix     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  In the sample configuration, a MetricsTrait is specified for the hello-helidon-component application component.\nWith the sample application configuration successfully deployed, you can query for metrics from the application component. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ HOST=$(kubectl get ingress \\ -n verrazzano-system vmi-system-prometheus \\ -o jsonpath={.spec.rules[0].host}) $ echo $HOST prometheus.vmi.system.default.\u003cip\u003e.nip.io $ VZPASS=$(kubectl get secret \\ --namespace verrazzano-system verrazzano \\ -o jsonpath={.data.password} | base64 \\ --decode; echo) $ curl -sk \\ --user verrazzano:${VZPASS} \\ -X GET https://${HOST}/api/v1/query?query=vendor_requests_count_total {\"status\":\"success\",\"data\":{\"resultType\":\"vector\",\"result\":[{\"metric\":{\"__name__\":\"vendor_requests_count_total\",\"app\":\"hello-helidon\",\"app_oam_dev_component\":\"hello-helidon-component\",\"app_oam_dev_name\":\"hello-helidon-appconf\",\"app_oam_dev_resourceType\":\"WORKLOAD\",\"app_oam_dev_revision\":\"hello-helidon-component-v1\",\"containerizedworkload_oam_crossplane_io\":\"496df78f-ef8b-4753-97fd-d9218d2f38f1\",\"job\":\"hello-helidon-appconf_default_helidon-logging_hello-helidon-component\",\"namespace\":\"helidon-logging\",\"pod_name\":\"hello-helidon-workload-b7d9d95d8-ht7gb\",\"pod_template_hash\":\"b7d9d95d8\"},\"value\":[1616535232.487,\"4800\"]}]}}     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"A trait supporting the publication of application metrics","excerpt":"A trait supporting the publication of application metrics","ref":"/docs/applications/oam/traits/metrics/metrics/","tags":"","title":"MetricsTrait"},{"body":"Review the following key concepts to understand multicluster Verrazzano.\n Admin cluster - A Kubernetes cluster that serves as the central management point for deploying and monitoring applications in managed clusters. Managed clusters - A Kubernetes cluster that has the following characteristics:  It is registered with an admin cluster with a unique name. Verrazzano multicluster applications may be deployed to the managed cluster from the admin cluster. Logs and metrics for Verrazzano system components and Verrazzano multicluster applications deployed on the managed cluster are viewable from the admin cluster.   Verrazzano multicluster resources - Custom Kubernetes resources defined by Verrazzano.  Each multicluster resource serves as a wrapper for an underlying resource type. A multicluster resource allows the placement of the underlying resource to be specified as a list of names of the clusters in which the resource must be placed.    For more details, see here.\n","categories":"","description":"","excerpt":"Review the following key concepts to understand multicluster Verrazzano.\n Admin cluster - A Kubernetes cluster that serves as the central management point for deploying and monitoring applications in …","ref":"/docs/introduction/verrazzanomulticluster/","tags":"","title":"Verrazzano in a Multicluster Environment"},{"body":"The MultiClusterApplicationConfiguration custom resource is an envelope used to distribute core.oam.dev/v1alpha2/ApplicationConfiguration resources in a multicluster environment.\nHere is a sample MultiClusterApplicationConfiguration that specifies an ApplicationConfiguration resource to create on the cluster named managed1. To deploy an example application that demonstrates a MultiClusterApplicationConfiguration, see Multicluster ToDo List.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: clusters.verrazzano.io/v1alpha1 kind: MultiClusterApplicationConfiguration metadata: name: todo-appconf namespace: mc-todo-list spec: template: metadata: annotations: version: v1.0.0 description: \"ToDo List example application\" spec: components: - componentName: todo-domain traits: - trait: apiVersion: oam.verrazzano.io/v1alpha1 kind: MetricsTrait - trait: apiVersion: oam.verrazzano.io/v1alpha1 kind: IngressTrait spec: rules: - paths: - path: \"/todo\" pathType: Prefix - componentName: todo-jdbc-config - componentName: mysql-initdb-config - componentName: todo-mysql-service - componentName: todo-mysql-deployment placement: clusters: - name: managed1 secrets: - tododomain-repo-credentials - tododomain-jdbc-tododb - tododomain-weblogic-credentials     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"Defines the resources associated with a multicluster application","excerpt":"Defines the resources associated with a multicluster application","ref":"/docs/applications/multicluster/mcresources/multiclusterapplicationconfiguration/multiclusterapplicationconfiguration/","tags":"","title":"MultiClusterApplicationConfiguration"},{"body":"The MultiClusterResourceStatus subresource is shared by multicluster custom resources.\n","categories":"","description":"Presents the status for multicluster resources","excerpt":"Presents the status for multicluster resources","ref":"/docs/applications/multicluster/mcresources/multiclusterresourcestatus/multiclusterresourcestatus/","tags":"","title":"MultiClusterResourceStatus"},{"body":"There are known issues that can occur with MySQL. The Verrazzano platform operator will automatically detect each of the described issues and perform actions to repair them. The operator initiates a repair within a few minutes of detecting an issue.\nThe following sections are provided in the event that a manual repair of an issue is required.\nMySQL pod stuck Terminating A MySQL pod may get stuck in a terminating state. This may occur while upgrading the nodes of a Kubernetes cluster.\nHere is an example of what this condition looks like. All the pod containers are terminated, but the pod never finishes terminating. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n keycloak -l component=mysqld NAME READY STATUS RESTARTS AGE mysql-0 0/3 Terminating 0 60m    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n You can repair this issue by restarting the mysql-operator pod. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete pod -l name=mysql-operator -n mysql-operator    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n MySQL pod waiting for readiness gates The mysql StatefulSet may get stuck while waiting to reach the ready state. This will occur when one or more MySQL pods not meeting its set of ReadinessGates.\nHere is an example of what this condition looks like. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl describe pods -n keycloak -l component=mysqld # Excerpt from the command output Readiness Gates: Type Status mysql.oracle.com/configured False mysql.oracle.com/ready True    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n You can repair this issue by restarting the mysql-operator pod. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete pod -l name=mysql-operator -n mysql-operator    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n MySQL router pod in CrashLoopBackOff state Here is an example of what this condition looks like. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n keycloak -l component=mysqlrouter NAME READY STATUS RESTARTS AGE mysql-router-757595f6c5-pdgxj 1/2 CrashLoopBackOff 0 109m    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n You can repair this issue by deleting the pod that is in the CrashLoopBackOff state. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete pod -n keycloak mysql-router-757595f6c5-pdgxj    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n InnoDBCluster object stuck Terminating This condition has been observed to occur on an uninstallation of Verrazzano.\nHere is an example of what this condition looks like. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get InnoDBCluster -n keycloak NAME STATUS ONLINE INSTANCES ROUTERS AGE mysql OFFLINE 0 1 1 7m51s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n You can repair this issue by restarting the mysql-operator pod. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete pod -l name=mysql-operator -n mysql-operator    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n ","categories":"","description":"Troubleshoot MySQL issues","excerpt":"Troubleshoot MySQL issues","ref":"/docs/troubleshooting/troubleshooting-mysql/","tags":"","title":"MySQL Issues"},{"body":"The Oracle Cloud Infrastructure Logging service is a highly scalable and fully managed single view for all the logs in your tenancy. You can configure Verrazzano to send logs to Oracle Cloud Infrastructure Logging instead of OpenSearch. For general information, see Oracle Cloud Infrastructure Logging Overview.\nSet up custom logs Verrazzano can send its logs to Oracle Cloud Infrastructure custom logs. You will need to provide two Oracle Cloud Infrastructure Log identifiers in your Verrazzano installation resource: one for Verrazzano system logs and one for application logs. Follow the steps in Creating Custom Logs to create two custom logs. Do not create an agent configuration when creating a custom log, otherwise the log records will be duplicated.\nConfigure credentials The Fluentd plug-in included with Verrazzano will use Oracle Cloud Infrastructure instance principal authentication by default. Optionally, you can configure Verrazzano with a user API signing key. API signing key authentication is required to send logs to Oracle Cloud Infrastructure Logging if the cluster is running outside of Oracle Cloud Infrastructure.\n Instance principal authentication User API signing key  Instance principal authentication Create a dynamic group that includes the compute instances in your cluster’s node pools and assign the appropriate policy, so that the dynamic group is allowed to send log entries to the custom logs you created earlier. Pay close attention to the required permissions.\nIf the dynamic group and policy are configured incorrectly, then Fluentd will fail to send logs to Oracle Cloud Infrastructure Logging.\nUser API signing key If you do not already have an API signing key, then see Required Keys and OCIDs in the Oracle Cloud Infrastructure documentation. You need to create an Oracle Cloud Infrastructure configuration file with the credential details and then use that configuration file to create a secret.\nThe following requirements must be met for Fluentd Oracle Cloud Infrastructure Logging to work:\n The profile name in the Oracle Cloud Infrastructure configuration file must be DEFAULT. The key_file path in the Oracle Cloud Infrastructure configuration file must be /root/.oci/key. The actual key file does not need to be in that location, because you will be providing the actual key file location in a secret. The user associated with the API key must have the appropriate Oracle Cloud Infrastructure Identity and Access Management (IAM) policy in place to allow the Fluentd plug-in to send logs to Oracle Cloud Infrastructure. See Details for Logging in the Oracle Cloud Infrastructure documentation for the IAM policies used by the Oracle Cloud Infrastructure Logging service.  After the Verrazzano platform operator has been installed, create an opaque secret in the verrazzano-install namespace from the Oracle Cloud Infrastructure configuration and private key files. The key for the configuration file must be config and the key for the private key file data must be key.\nHere is an example kubectl command that will create the secret. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create secret generic oci-fluentd -n verrazzano-install \\ --from-file=config=/home/myuser/oci_config --from-file=key=/home/myuser/keys/oci_api.pem    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe secret should look something like this.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: v1 data: config: W0RFRkFVTFRdCnVzZXI9b2NpZDEudXN... key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS... kind: Secret metadata: name: oci-fluentd namespace: verrazzano-install type: Opaque    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  For convenience, there is a helper script available here that you can point at an existing Oracle Cloud Infrastructure configuration file and it will create the secret for you. The script allows you to override the default configuration file location, profile name, and the name of the secret.\nSpecify custom logs Oracle Cloud Infrastructure Logging is enabled in your cluster when installing Verrazzano. The Verrazzano installation custom resource has fields for specifying two custom logs: one for system logs and one for application logs. Here is an example Verrazzano installation YAML file for each type of credential.\n Instance principal credentials User API credentials  Instance principal credentials code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: vz-oci-logging spec: profile: dev components: fluentd: enabled: true oci: systemLogId: ocid1.log.oc1.iad.system.example defaultAppLogId: ocid1.log.oc1.iad.app.example opensearch: enabled: false opensearchDashboards: enabled: false    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  User API credentials When using user API credentials, you need to configure the name of the secret in the Verrazzano custom resource, under the Oracle Cloud Infrastructure section of the Fluentd component settings. Your YAML file should look something like this. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: vz-oci-logging spec: profile: dev components: fluentd: enabled: true oci: systemLogId: ocid1.log.oc1.iad.system.example defaultAppLogId: ocid1.log.oc1.iad.app.example apiSecret: oci-fluentd opensearch: enabled: false opensearchDashboards: enabled: false    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe apiSecret value must match the secret you created earlier when configuring the user API credentials.\nOverride the default log objects You can override the Oracle Cloud Infrastructure Log object on an individual namespace. To specify a log identifier on a namespace, add an annotation named verrazzano.io/oci-log-id to the namespace. The value of the annotation is the Oracle Cloud Infrastructure Log object identifier.\nHere is an example namespace. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: v1 kind: Namespace metadata: annotations: verrazzano.io/oci-log-id: ocid1.log.oc1.iad.ns.app.example creationTimestamp: \"2022-01-14T15:09:19Z\" labels: istio-injection: enabled verrazzano-managed: \"true\" name: example spec: finalizers: - kubernetes status: phase: Active    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNote that if you add and subsequently remove the annotation, then the logs will revert to the default Oracle Cloud Infrastructure Log object specified in the Verrazzano custom resource.\n","categories":"","description":"Send Verrazzano logs to the Oracle Cloud Infrastructure Logging service","excerpt":"Send Verrazzano logs to the Oracle Cloud Infrastructure Logging service","ref":"/docs/observability/logging/oci-logging/","tags":"","title":"Oracle Cloud Infrastructure Logging Service"},{"body":"The Placement subresource is shared by multicluster custom resources.\n","categories":"","description":"Associates multicluster resources with managed clusters","excerpt":"Associates multicluster resources with managed clusters","ref":"/docs/applications/multicluster/mcresources/placement/placement/","tags":"","title":"Placement"},{"body":"Kind is a tool for running local Kubernetes clusters using Docker container “nodes”. Follow these instructions to prepare a Kind cluster for running Verrazzano.\nNOTE Kind is not recommended for use on macOS and Windows because the Docker network is not directly exposed to the host.  Prerequisites  Install Docker Install Kind  Prepare the Kind cluster To prepare the Kind cluster for use with Verrazzano, you must create the cluster and then install and configure MetalLB in that cluster.\nYou can create the Kind cluster in two ways: with or without image caching; image caching can speed up your installation time.\nCreate a Kind cluster Kind images are prebuilt for each release. To find images suitable for a given release, check the release notes for your Kind version (check with kind version). There you’ll find a complete listing of images created for a Kind release.\nThe following example references a Kubernetes v1.26-based image built for Kind v0.20.0. Replace that image with one suitable for the Kind release you are using. For the supported Kubernetes versions, see the listing here. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kind create cluster --config - \u003c\u003cEOF kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane image: kindest/node:v1.26@sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6 kubeadmConfigPatches: - | kind: ClusterConfiguration apiServer: extraArgs: \"service-account-issuer\": \"kubernetes.default.svc\" \"service-account-signing-key-file\": \"/etc/kubernetes/pki/sa.key\" EOF     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nCreate a Kind cluster with image caching While developing or experimenting with Verrazzano, you might destroy and re-create your Kind cluster multiple times. To speed up Verrazzano installation, follow these steps to ensure that the image cache used by containerd inside a Kind cluster, is preserved across clusters. Subsequent installations will be faster because they will not need to pull the images again.\n1. Create a named Docker volume that will be used for the image cache and note its mountPoint path. In this example, the volume is named containerd. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ docker volume create containerd $ docker volume inspect containerd # Sample output { \"CreatedAt\": \"2021-01-11T16:27:47Z\", \"Driver\": \"local\", \"Labels\": {}, \"Mountpoint\": \"/var/lib/docker/volumes/containerd/_data\", \"Name\": \"containerd\", \"Options\": {}, \"Scope\": \"local\" }     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n2. Specify the mountPoint path obtained, as the hostPath under extraMounts in your Kind configuration file, with a containerPath of /var/lib/containerd, which is the default containerd image caching location inside the Kind container. An example of the modified Kind configuration is shown in the following create cluster command. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kind create cluster --config - \u003c\u003cEOF kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane image: kindest/node:v1.26@sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6 kubeadmConfigPatches: - | kind: ClusterConfiguration apiServer: extraArgs: \"service-account-issuer\": \"kubernetes.default.svc\" \"service-account-signing-key-file\": \"/etc/kubernetes/pki/sa.key\" extraMounts: - hostPath: /var/lib/docker/volumes/containerd/_data containerPath: /var/lib/containerd #This is the location of the image cache inside the Kind container EOF     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: When using a private container registry or experiencing rate-limiting of container image pulls, refer to the Kind documentation.\nInstall and configure MetalLB By default, Kind does not provide an implementation of network load balancers (Services of type LoadBalancer). MetalLB offers a network load balancer implementation.\nTo install MetalLB: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.11.0/manifests/namespace.yaml $ kubectl create secret generic \\ -n metallb-system memberlist \\ --from-literal=secretkey=\"$(openssl rand -base64 128)\" $ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.11.0/manifests/metallb.yaml     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: When using MetalLB on Kubernetes v1.26, install MetalLB v0.11.0, which you can do with manifest files or a Helm chart.\nWait for MetalLB to be ready, as shown: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n metallb-system -L app=metallb NAME READY STATUS RESTARTS AGE APP=METALLB controller-d9d8c78b6-hhplg 1/1 Running 1 (3d4h ago) 9d speaker-4lqpg 1/1 Running 1 (3d4h ago) 9d     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor further details, see the MetalLB installation guide.\nMetalLB is idle until configured. Configure MetalLB in Layer 2 mode and give it control over a range of IP addresses in the kind Docker network. In versions v0.7.0 and earlier, Kind uses Docker’s default bridge network; in versions v0.8.0 and later, it creates its own bridge network in Kind.\nTo determine the subnet of the kind Docker network in Kind v0.8.0 and later: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ docker inspect kind | jq '.[0].IPAM.Config[0].Subnet' -r # Sample output 172.18.0.0/16     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nTo determine the subnet of the kind Docker network in Kind v0.7.0 and earlier: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ docker inspect bridge | jq '.[0].IPAM.Config[0].Subnet' -r # Sample output 172.17.0.0/16     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor use by MetalLB, assign a range of IP addresses at the end of the kind network’s subnet CIDR range.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003c-EOF apiVersion: v1 kind: ConfigMap metadata: namespace: metallb-system name: config data: config: | address-pools: - name: my-ip-space protocol: layer2 addresses: - 172.18.0.230-172.18.0.250 EOF     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Next steps To continue, see the Installation Guide.\n","categories":"","description":"Set up a Kind cluster for Verrazzano","excerpt":"Set up a Kind cluster for Verrazzano","ref":"/docs/setup/install/prepare/platforms/kind/kind/","tags":"","title":"Prepare a Kind Cluster"},{"body":"","categories":"","description":"Supported Kubernetes platforms and Verrazzano installation guides","excerpt":"Supported Kubernetes platforms and Verrazzano installation guides","ref":"/docs/setup/","tags":"","title":"Setup and Installation"},{"body":"Before you begin Install Verrazzano by following the installation instructions.\nNOTE: The Sock Shop example application deployment files are contained in the Verrazzano project located at \u003cVERRAZZANO_HOME\u003e/examples/sockshop, where \u003cVERRAZZANO_HOME\u003e is the root of the Verrazzano project.\nDeploy the application This example application provides various implementations of the Sock Shop Microservices Demo Application. It uses OAM resources to define the application deployment:\n Coherence and Helidon in the helidon subdirectory. Coherence and Micronaut in the micronaut subdirectory. Coherence and Spring in the spring subdirectory.  NOTE To run this application in the default namespace:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl label namespace default verrazzano-managed=true    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If you chose the default namespace, you can skip Step 1 and ignore the -n option in the rest of the commands.\n   Create a namespace for the Sock Shop application and add a label identifying the namespace as managed by Verrazzano. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create namespace sockshop $ kubectl label namespace sockshop verrazzano-managed=true    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  To deploy the application, apply the Sock Shop OAM resources. Choose to deploy either the helidon, micronaut, or spring variant:\nFor helidon: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/sock-shop/helidon/sock-shop-comp.yaml -n sockshop $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/sock-shop/helidon/sock-shop-app.yaml -n sockshop    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor micronaut: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/sock-shop/micronaut/sock-shop-comp.yaml -n sockshop $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/sock-shop/micronaut/sock-shop-app.yaml -n sockshop    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor spring: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/sock-shop/spring/sock-shop-comp.yaml -n sockshop $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/sock-shop/spring/sock-shop-app.yaml -n sockshop    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the Sock Shop application to be ready. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl wait \\ --for=condition=Ready pods \\ --all -n sockshop \\ --timeout=300s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Explore the application The Sock Shop microservices application implements REST API endpoints including:\n /catalogue - Returns the Sock Shop catalog. This endpoint accepts the GET HTTP request method. /register - POST { \"username\":\"xxx\", \"password\":\"***\", \"email\":\"foo@example.com\", \"firstName\":\"foo\", \"lastName\":\"bar\" } to create a user. This endpoint accepts the POST HTTP request method.  NOTE: The following instructions assume that you are using a Kubernetes environment, such as OKE. Other environments or deployments may require alternative mechanisms for retrieving addresses, ports, and such.\nFollow these steps to test the endpoints.\n  Get the generated host name for the application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ HOST=$(kubectl get gateways.networking.istio.io \\ -n sockshop \\ -o jsonpath='{.items[0].spec.servers[0].hosts[0]}') $ echo $HOST # Sample output sockshop-appconf.sockshop.11.22.33.44.nip.io    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the EXTERNAL_IP address of the istio-ingressgateway service. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ADDRESS=$(kubectl get service \\ -n istio-system istio-ingressgateway \\ -o jsonpath='{.status.loadBalancer.ingress[0].ip}') $ echo $ADDRESS # Sample output 11.22.33.44    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access the Sock Shop example application.\n  Using the command line a. Get catalogue. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -sk \\ -X GET \\ https://${HOST}/catalogue \\ --resolve ${HOST}:443:${ADDRESS} # Sample output [{\"count\":115,\"description\":\"For all those leg lovers out there....\", ...}]     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  b. Add a new user (replace values of username and password). code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -i \\ --header \"Content-Type: application/json\" --request POST \\ --data '{\"username\":\"foo\",\"password\":\"****\",\"email\":\"foo@example.com\",\"firstName\":\"foo\",\"lastName\":\"foo\"}' \\ -k https://${HOST}/register \\ --resolve ${HOST}:443:${ADDRESS}     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  c. Add an item to the user’s cart. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -i \\ --header \"Content-Type: application/json\" --request POST \\ --data '{\"itemId\": \"a0a4f044-b040-410d-8ead-4de0446aec7e\",\"unitPrice\": \"7.99\"}' \\ -k https://${HOST}/carts/{username}/items \\ --resolve ${HOST}:443:${ADDRESS} # Sample output {\"itemId\":\"a0a4f044-b040-410d-8ead-4de0446aec7e\",\"quantity\":1,\"unitPrice\":7.99}     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  d. Get cart items. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -i \\ -k https://${HOST}/carts/{username}/items \\ --resolve ${HOST}:443:${ADDRESS} # Sample output [{\"itemId\":\"a0a4f044-b040-410d-8ead-4de0446aec7e\",\"quantity\":1,\"unitPrice\":7.99}]     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf you are using nip.io, then you do not need to include --resolve.\n  Local testing with a browser\nTemporarily, modify the /etc/hosts file (on Mac or Linux) or c:\\Windows\\System32\\Drivers\\etc\\hosts file (on Windows 10), to add an entry mapping the host name to the ingress gateway’s EXTERNAL-IP address. For example:\n11.22.33.44 sockshop.example.com Then, you can access the application in a browser at https://sockshop.example.com/catalogue.\n If you are using nip.io, then you can access the application in a browser using the HOST variable (for example, https://${HOST}/catalogue). If you are going through a proxy, you may need to add *.nip.io to the NO_PROXY list.    Using your own DNS name\nPoint your own DNS name to the ingress gateway’s EXTERNAL-IP address.\n In this case, you would need to edit the sock-shop-app.yaml file to use the appropriate value under the hosts section (such as yourhost.your.domain), before deploying the Sock Shop application. Then, you can use a browser to access the application at https://\u003cyourhost.your.domain\u003e/catalogue.      A variety of endpoints associated with the deployed application are available to further explore the logs, metrics, and such. You can access them according to the directions here.\n  Verify the deployed application   Verify that the application configuration, component, workload, and ingress trait all exist. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get ApplicationConfiguration -n sockshop $ kubectl get Component -n sockshop $ kubectl get VerrazzanoCoherenceWorkload -n sockshop $ kubectl get IngressTrait -n sockshop    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Verify that the Sock Shop service pods are successfully created and transition to the READY state. Note that this may take a few minutes and that you may see some of the services terminate and restart. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n sockshop # Sample output NAME READY STATUS RESTARTS AGE carts-coh-0 1/1 Running 0 41s catalog-coh-0 1/1 Running 0 40s orders-coh-0 1/1 Running 0 39s payment-coh-0 1/1 Running 0 37s shipping-coh-0 1/1 Running 0 36s users-coh-0 1/1 Running 0 35s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Undeploy the application   To undeploy the application, delete the Sock Shop OAM resources. Choose to undeploy either the helidon, micronaut, or spring variant.\nFor helidon: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/sock-shop/helidon/sock-shop-comp.yaml -n sockshop $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/sock-shop/helidon/sock-shop-app.yaml -n sockshop    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor micronaut: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/sock-shop/micronaut/sock-shop-comp.yaml -n sockshop $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/sock-shop/micronaut/sock-shop-app.yaml -n sockshop    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor spring: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/sock-shop/spring/sock-shop-comp.yaml -n sockshop $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/sock-shop/spring/sock-shop-app.yaml -n sockshop    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the namespace sockshop after the application pods are terminated. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete namespace sockshop    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"Implementations of the Sock Shop Microservices Demo Application","excerpt":"Implementations of the Sock Shop Microservices Demo Application","ref":"/docs/examples/microservices/sock-shop/","tags":"","title":"Sock Shop"},{"body":"In Verrazzano 1.3 and later, upgrade will continue to run until it succeeds or until you delete the Verrazzano CR. In previous versions, upgrade could fail and transition to the UpgradeFailed state. If that happens, and you updated the Verrazzano platform operator to 1.3+, then the Verrazzano CR will transition to UpgradePaused. To continue with the upgrade, you must change the CR version to the current version of the Verrazzano platform operator. The following steps illustrate this scenario:\n You install Verrazzano 1.1.2. You upgrade to 1.2.0 by changing the Verrazzano CR version field to v1.2.0.  For some reason, the upgrade failed and the Verrazzano CR state transitions to UpgradeFailed.   You update the Verrazzano platform operator to 1.3.0.  The Verrazzano CR state transitions to UpgradePaused.   You change the Verrazzano CR version field to v1.3.0.  The Verrazzano CR state transitions to Upgrading and stays in that state until it completes, then it transitions to UpgradeComplete.    To see detailed progress of the upgrade, view the logs with the following command. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs -n verrazzano-install \\ -f $(kubectl get pod \\ -n verrazzano-install \\ -l app=verrazzano-platform-operator \\ -o jsonpath=\"{.items[0].metadata.name}\") | grep '^{.*}$' \\ | jq -r '.\"@timestamp\" as $timestamp | \"\\($timestamp) \\(.level) \\(.message)\"'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor additional troubleshooting help, see Analysis Advice.\n","categories":"","description":"Solve some common upgrade issues","excerpt":"Solve some common upgrade issues","ref":"/docs/setup/upgrade/troubleshoot/","tags":"","title":"Troubleshoot Upgrade Issues"},{"body":"","categories":"","description":"Learn about Verrazzano multicluster resources","excerpt":"Learn about Verrazzano multicluster resources","ref":"/docs/applications/multicluster/mcresources/","tags":"","title":"Verrazzano Multicluster Resources"},{"body":"A Verrazzano project provides a way to group application namespaces that are owned or administered by the same user or group of users. When creating a project, you can specify the subjects: users, groups, or service accounts, that are to be granted access to the namespaces governed by the project. Two types of subjects may be specified:\n Project admins, who have both read and write access to the project’s namespaces. Project monitors, who have read-only access to the project’s namespaces.  The VerrazzanoProject resource A VerrazzanoProject resource is created by a Verrazzano admin user, and specifies the following:\n A list of namespaces that the project governs. One or more users, groups, or service accounts that will be granted the verrazzano-project-admin role for the VerrazzanoProject. Project admins may deploy or delete applications and related resources in the namespaces in the project. One or more users, groups, or service accounts that will be granted the verrazzano-project-monitor role for the VerrazzanoProject. Project monitors may view the resources in the namespaces in the project, but not modify or delete them. A list of network policies to apply to the namespaces in the project.  The creation of a VerrazzanoProject results in:\n The creation of the specified namespaces in the project, if those do not already exist. The creation of a Kubernetes RoleBindings in each of the namespaces, to set up the appropriate permissions for the project admins and project monitors of the project. The creation of the specified network policies for each of the namespaces.  ","categories":"","description":"","excerpt":"A Verrazzano project provides a way to group application namespaces that are owned or administered by the same user or group of users. When creating a project, you can specify the subjects: users, …","ref":"/docs/applications/oam/verrazzanoproject/","tags":"","title":"Verrazzano Projects"},{"body":"Packages:\n  install.verrazzano.io/v1beta1   install.verrazzano.io/v1beta1   Resource Types:  Verrazzano  Verrazzano   Verrazzano specifies the Verrazzano API.\n    Field Description      apiVersion string   install.verrazzano.io/v1beta1      kind string  Verrazzano    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  VerrazzanoSpec          components  ComponentSpec     (Optional) The Verrazzano components.\n    defaultVolumeSource  Kubernetes core/v1.VolumeSource     (Optional) Defines the type of volume to be used for persistence for all components unless overridden, and can be one of either EmptyDirVolumeSource or PersistentVolumeClaimVolumeSource. If PersistentVolumeClaimVolumeSource is declared, then the claimName must reference the name of an existing VolumeClaimSpecTemplate declared in the volumeClaimSpecTemplates section.\n    environmentName  string    (Optional) Name of the installation. This name is part of the endpoint access URLs that are generated. The default value is default.\n    profile  ProfileType     (Optional) The installation profile to select. Valid values are prod (production), dev (development), and managed-cluster. The default is prod.\n    security  SecuritySpec     (Optional) Security specifies Verrazzano security configuration.\n    version  string    (Optional) The version to install. Valid versions can be found here. Defaults to the current version supported by the Verrazzano platform operator.\n    volumeClaimSpecTemplates  []VolumeClaimSpecTemplate     (Optional) Defines a named set of PVC configurations that can be referenced from components to configure persistent volumes.\n       status  VerrazzanoStatus         Acme   (Appears on:Certificate)  Deprecated. Acme identifies the LetsEncrypt cert issuer.\n    Field Description      emailAddress  string    (Optional) Email address of the user.\n    environment  string    (Optional) Environment.\n    provider  ProviderType     Name of the Acme provider.\n    ApplicationOperatorComponent   (Appears on:ComponentSpec)  ApplicationOperatorComponent specifies the Application Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then the Application Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    ArgoCDComponent   (Appears on:ComponentSpec)  ArgoCDComponent specifies the Argo CD configuration.\n    Field Description      enabled  bool    (Optional) If true, then Argo CD will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    AuthProxyComponent   (Appears on:ComponentSpec)  AuthProxyComponent specifies the AuthProxy configuration.\n    Field Description      enabled  bool    (Optional) If true, then AuthProxy will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    CA   (Appears on:Certificate)  CA - Deprecated. Identifies the Certificate Authority cert issuer.\n    Field Description      clusterResourceNamespace  string    The secret namespace.\n    secretName  string    The secret name.\n    CAIssuer   (Appears on:ClusterIssuerComponent, IssuerConfig)  CAIssuer Identifies the configuration used for the Certificate Authority issuer\n    Field Description      secretName  string    The secret name.\n    CertManagerComponent   (Appears on:ComponentSpec)  CertManagerComponent specifies the cert-manager configuration.\n    Field Description      certificate  Certificate     (Optional) Deprecated. Use the ClusterIssuerComponent to configure the Verrazzano ClusterIssuer instead\n    enabled  bool    (Optional) If true, then cert-manager will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    CertManagerWebhookOCIComponent   (Appears on:ComponentSpec)  CertManagerWebhookOCIComponent configures the CertManager OCI DNS solver webhook; the webhook is required for LetsEncrypt Certificates using OCI DNS\n    Field Description      enabled  bool    (Optional) Enabled will deploy the webhook if true, or if the LetsEncrypt issuer is configured with OCI DNS\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    Certificate   (Appears on:CertManagerComponent)  Certificate - Deprecated. Represents the type of cert issuer for an installation.\n    Field Description      acme  Acme     (Optional) The LetsEncrypt configuration. Either acme or ca must be specified.\n    ca  CA     (Optional) The LetsEncrypt configuration. Either acme or ca must be specified.\n    ClusterAPIComponent   (Appears on:ComponentSpec)  ClusterAPIComponent specifies the Cluster API configuration.\n    Field Description      enabled  bool    (Optional) If true, then Cluster API Providers will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    ClusterAgentComponent   (Appears on:ComponentSpec)  ClusterAgentComponent configures the Cluster Agent\n    Field Description      enabled  bool    (Optional) If true, then Cluster Agent will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    ClusterIssuerComponent   (Appears on:ComponentSpec)  ClusterIssuerComponent configures the Verrazzano ClusterIssuer\n    Field Description      enabled  bool    (Optional) Enabled indicates that Verrazzano ClusterIssuer shall be configured\n    clusterResourceNamespace  string    The clusterResourceNamespace configured for the Verrazzano Cert-Manager instance; if an externally-managed Cert-Manager is being used with a non-default location, this should point to the clusterResourceNamespace used by that installation. See the Cert-Manager documentation details on this namespace.\n    letsEncrypt  LetsEncryptACMEIssuer      (Inlined from IssuerConfig.) (Optional) The LetsEncrypt issuer configuration.\n    ca  CAIssuer      (Inlined from IssuerConfig.) (Optional) The certificate configuration.\n    ClusterOperatorComponent   (Appears on:ComponentSpec)  ClusterOperatorComponent specifies the Cluster Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then the Cluster Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    CoherenceOperatorComponent   (Appears on:ComponentSpec)  CoherenceOperatorComponent specifies the Coherence Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then the Coherence Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    CompStateType (string alias)  (Appears on:ComponentStatusDetails)  CompStateType identifies the state of a component.\n    Value Description   \"Disabled\"\n CompStateDisabled is the state for when a component is not currently installed\n \"Error\"\n CompStateError is the state when a Verrazzano resource has experienced an error that may leave it in an unstable state\n \"Failed\"\n CompStateFailed is the state when an install/uninstall/upgrade has failed\n \"Installing\"\n CompStateInstalling is the state when an install is in progress\n \"PreInstalling\"\n CompStatePreInstalling is the state when an install is about to be started\n \"Ready\"\n CompStateReady is the state when a Verrazzano resource can perform an uninstall or upgrade\n \"Uninstalled\"\n CompStateUninstalled is the state when a component has been uninstalled\n \"Uninstalling\"\n CompStateUninstalling is the state when an uninstall is in progress\n \"Upgrading\"\n CompStateUpgrading is the state when an upgrade is in progress\n   ComponentAvailability (string alias)  (Appears on:ComponentStatusDetails)  ComponentAvailability identifies the availability of a Verrazzano Component.\n ComponentSpec   (Appears on:VerrazzanoSpec)  ComponentSpec contains a set of components used by Verrazzano.\n    Field Description      applicationOperator  ApplicationOperatorComponent     (Optional) The Application Operator component configuration.\n    argoCD  ArgoCDComponent     (Optional) The Argo CD component configuration.\n    authProxy  AuthProxyComponent     (Optional) The AuthProxy component configuration.\n    clusterAPI  ClusterAPIComponent     (Optional) The ClusterAPI component configuration.\n    clusterAgent  ClusterAgentComponent     (Optional) The ClusterAgent configuration.\n    clusterIssuer  ClusterIssuerComponent     (Optional) ClusterIssuer defines the Cert-Manager ClusterIssuer configuration for Verrazzano\n    certManager  CertManagerComponent     (Optional) The Verrazzano-managed Cert-Manager component configuration; note that this is mutually exclusive of the ExternalCertManager component\n    certManagerWebhookOCI  CertManagerWebhookOCIComponent     (Optional) CertManagerWebhookOCI configures the Verrazzano OCI DNS webhook plugin for Cert-Manager\n    clusterOperator  ClusterOperatorComponent     (Optional) The Cluster Operator component configuration.\n    coherenceOperator  CoherenceOperatorComponent     (Optional) The Coherence Operator component configuration.\n    console  ConsoleComponent     (Optional) The Verrazzano Console component configuration.\n    dns  DNSComponent     (Optional) The DNS component configuration.\n    fluentd  FluentdComponent     (Optional) The Fluentd component configuration.\n    fluentOperator  FluentOperatorComponent     (Optional) The FluentOperator component configuration.\n    fluentbitOpensearchOutput  FluentbitOpensearchOutputComponent     (Optional) The FluentbitOpensearchOutput component configuration.\n    grafana  GrafanaComponent     (Optional) The Grafana component configuration.\n    ingressNGINX  IngressNginxComponent     (Optional) The ingress NGINX component configuration.\n    istio  IstioComponent     (Optional) The Istio component configuration.\n    jaegerOperator  JaegerOperatorComponent     (Optional) The Jaeger Operator component configuration.\n    keycloak  KeycloakComponent     (Optional) The Keycloak component configuration.\n    kiali  KialiComponent     (Optional) The Kiali component configuration.\n    kubeStateMetrics  KubeStateMetricsComponent     (Optional) The kube-state-metrics component configuration.\n    mySQLOperator  MySQLOperatorComponent     (Optional) The MySQL Operator component configuration.\n    oam  OAMComponent     (Optional) The OAM component configuration.\n    opensearch  OpenSearchComponent     (Optional) The OpenSearch component configuration.\n    opensearchDashboards  OpenSearchDashboardsComponent     (Optional) The OpenSearch Dashboards component configuration.\n    prometheus  PrometheusComponent     (Optional) The Prometheus component configuration.\n    prometheusAdapter  PrometheusAdapterComponent     (Optional) The Prometheus Adapter component configuration.\n    prometheusNodeExporter  PrometheusNodeExporterComponent     (Optional) The Prometheus Node Exporter component configuration.\n    prometheusOperator  PrometheusOperatorComponent     (Optional) The Prometheus Operator component configuration.\n    prometheusPushgateway  PrometheusPushgatewayComponent     (Optional) The Prometheus Pushgateway component configuration.\n    rancher  RancherComponent     (Optional) The Rancher component configuration.\n    rancherBackup  RancherBackupComponent     (Optional) The rancherBackup component configuration.\n    thanos  ThanosComponent     (Optional) The Thanos component configuration.\n    velero  VeleroComponent     (Optional) The Velero component configuration.\n    verrazzano  VerrazzanoComponent     (Optional) The Verrazzano component configuration.\n    weblogicOperator  WebLogicOperatorComponent     (Optional) The WebLogic Kubernetes Operator component configuration.\n    ComponentStatusDetails   ComponentStatusDetails defines the observed state of a component.\n    Field Description      available  ComponentAvailability     Whether a component is available for use.\n    conditions  []Condition     Information about the current state of a component.\n    lastReconciledGeneration  int64    The generation of the last Verrazzano resource the Component was successfully reconciled against.\n    name  string    Name of the component.\n    reconcilingGeneration  int64    The generation of the Verrazzano resource the Component is currently being reconciled against.\n    state  CompStateType     The state of a component.\n    version  string    The version of a component.\n    ComponentStatusMap (map[string]*github.com/verrazzano/verrazzano/platform-operator/apis/verrazzano/v1beta1.ComponentStatusDetails alias)  (Appears on:VerrazzanoStatus)  ComponentStatusMap is a map of components status details.\n ComponentValidator    Condition   (Appears on:ComponentStatusDetails, VerrazzanoStatus)  Condition describes the current state of an installation.\n    Field Description      lastTransitionTime  string    Last time the condition transitioned from one status to another.\n    message  string    Human readable message indicating details about the last transition.\n    status  Kubernetes core/v1.ConditionStatus     Status of the condition: one of True, False, or Unknown.\n    type  ConditionType     Type of condition.\n    ConditionType (string alias)  (Appears on:Condition)  ConditionType identifies the condition of the install, uninstall, or upgrade, which can be checked with kubectl wait.\n    Value Description   \"InstallComplete\"\n CondInstallComplete means the install job has completed its execution successfully\n \"InstallFailed\"\n CondInstallFailed means the install job has failed during execution.\n \"InstallStarted\"\n CondInstallStarted means an install is in progress.\n \"PreInstall\"\n CondPreInstall means an install about to start.\n \"UninstallComplete\"\n CondUninstallComplete means the uninstall job has completed its execution successfully\n \"UninstallFailed\"\n CondUninstallFailed means the uninstall job has failed during execution.\n \"UninstallStarted\"\n CondUninstallStarted means an uninstall is in progress.\n \"UpgradeComplete\"\n CondUpgradeComplete means the upgrade has completed successfully\n \"UpgradeFailed\"\n CondUpgradeFailed means the upgrade has failed during execution.\n \"UpgradePaused\"\n CondUpgradePaused means that an upgrade has been paused awaiting a VZ version update.\n \"UpgradeStarted\"\n CondUpgradeStarted means that an upgrade has been started.\n   ConsoleComponent   (Appears on:ComponentSpec)  ConsoleComponent specifies the Verrazzano Console configuration.\n    Field Description      enabled  bool    (Optional) If true, then Verrazzano Console will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    DNSComponent   (Appears on:ComponentSpec)  DNSComponent specifies the DNS configuration.\n    Field Description      external  External     (Optional) External DNS configuration.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    oci  OCI     (Optional) Oracle Cloud Infrastructure DNS configuration.\n    wildcard  Wildcard     (Optional) Wildcard DNS configuration. This is the default with a domain of nip.io.\n    DNSConfig       Field Description      external  External     (Optional) External DNS configuration.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    oci  OCI     (Optional) Oracle Cloud Infrastructure DNS configuration.\n    wildcard  Wildcard     (Optional) Wildcard DNS configuration. This is the default with a domain of nip.io.\n    DatabaseInfo   (Appears on:GrafanaComponent)  DatabaseInfo specifies the database connection information for the Grafana DB instance.\n    Field Description      host  string    The host of the database.\n    name  string    The name of the database.\n    External   (Appears on:DNSComponent, DNSConfig)  External DNS type.\n    Field Description      suffix  string    The suffix for DNS names.\n    FluentOperatorComponent   (Appears on:ComponentSpec)  FluentOperatorComponent specifies the Fluent Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then the Fluent Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    FluentbitOpensearchOutputComponent   (Appears on:ComponentSpec)      Field Description      enabled  bool    (Optional) If true, then the FluentbitOpensearchOutput will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    FluentdComponent   (Appears on:ComponentSpec)  FluentdComponent specifies the Fluentd configuration.\n    Field Description      enabled  bool    (Optional) If true, then Fluentd will be installed.\n    extraVolumeMounts  []VolumeMount     (Optional) A list of host path volume mounts, in addition to /var/log, into the Fluentd DaemonSet. The Fluentd component collects log files in the /var/log/containers directory of Kubernetes worker nodes. The /var/log/containers directory may contain symbolic links to files located outside the /var/log directory. If the host path directory containing the log files is located outside /var/log, the Fluentd DaemonSet must have the volume mount of that directory to collect the logs.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    oci  OciLoggingConfiguration     (Optional) The Oracle Cloud Infrastructure Logging configuration.\n    opensearchSecret  string    (Optional) The secret containing the credentials for connecting to OpenSearch. This secret needs to be created in the verrazzano-install namespace prior to creating the Verrazzano custom resource. Specify the OpenSearch login credentials in the username and password fields in this secret. Specify the CA for verifying the OpenSearch certificate in the ca-bundle field, if applicable. The default verrazzano is the secret for connecting to the VMI OpenSearch.\n    opensearchURL  string    (Optional) The target OpenSearch URLs. Specify this option in this format. The default http://vmi-system-es-ingest-oidc:8775 is the VMI OpenSearch URL.\n    GrafanaComponent   (Appears on:ComponentSpec)  GrafanaComponent specifies the Grafana configuration.\n    Field Description      database  DatabaseInfo     (Optional) The information to configure a connection to an external Grafana database.\n    enabled  bool    (Optional) If true, then Grafana will be installed.\n    replicas  int32    (Optional) The number of pods to replicate. The default is 1.\n    smtp  VMO /vmcontroller/v1.SMTPInfo     (Optional) The SMTP notification settings.\n    IngressNginxComponent   (Appears on:ComponentSpec)  IngressNginxComponent specifies the ingress NGINX configuration.\n    Field Description      enabled  bool    (Optional) If true, then ingress NGINX will be installed.\n    ingressClassName  string    (Optional) Name of the ingress class used by the ingress controller. Defaults to verrazzano-nginx.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    ports  []Kubernetes core/v1.ServicePort     (Optional) The list of port configurations used by the ingress.\n    type  IngressType     (Optional) The ingress type. Valid values are LoadBalancer and NodePort. The default value is LoadBalancer. If the ingress type is NodePort, then a valid and accessible IP address must be specified using the controller.service.externalIPs key in the InstallOverrides. For sample usage, see External Load Balancers.\n    IngressType (string alias)  (Appears on:IngressNginxComponent)  IngressType is the type of ingress.\n    Value Description   \"LoadBalancer\"\n LoadBalancer is an ingress type of LoadBalancer. This is the default value.\n \"NodePort\"\n NodePort is an ingress type of NodePort.\n   InstallOverrides   InstallOverrides are used to pass installation overrides to components.\n    Field Description      monitorChanges  bool    (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides     (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    InstanceInfo   (Appears on:VerrazzanoStatus)  InstanceInfo details of the installed Verrazzano instance maintained in status field.\n    Field Description      argoCDUrl  string    The Argo CD UI URL for this Verrazzano installation.\n    consoleUrl  string    The Console URL for this Verrazzano installation.\n    grafanaUrl  string    The Grafana URL for this Verrazzano installation.\n    jaegerUrl  string    The Jaeger UI URL for this Verrazzano installation.\n    keyCloakUrl  string    The KeyCloak URL for this Verrazzano installation.\n    kialiUrl  string    The Kiali URL for this Verrazzano installation.\n    openSearchDashboardsUrl  string    The OpenSearch Dashboards URL for this Verrazzano installation.\n    openSearchUrl  string    The OpenSearch URL for this Verrazzano installation.\n    prometheusUrl  string    The Prometheus URL for this Verrazzano installation.\n    rancherUrl  string    The Rancher URL for this Verrazzano installation.\n    thanosQueryUrl  string    The Thanos Query URL for this Verrazzano installation. The Thanos Query ingress gets forwarded to the Thanos Query Frontend service.\n    IssuerConfig   IssuerConfig identifies the configuration for the Verrazzano ClusterIssuer. Only one value may be set.\n    Field Description      letsEncrypt  LetsEncryptACMEIssuer     (Optional) The LetsEncrypt issuer configuration.\n    ca  CAIssuer     (Optional) The certificate configuration.\n    IstioComponent   (Appears on:ComponentSpec)  IstioComponent specifies the Istio configuration.\n    Field Description      enabled  bool    (Optional) If true, then Istio will be installed.\n    injectionEnabled  bool    (Optional) Istio sidecar injection enabled for installed components. Default is true.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    JaegerOperatorComponent   (Appears on:ComponentSpec)  JaegerOperatorComponent specifies the Jaeger Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then Jaeger Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    KeycloakComponent   (Appears on:ComponentSpec)  KeycloakComponent specifies the Keycloak configuration.\n    Field Description      enabled  bool    (Optional) If true, then Keycloak will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    mysql  MySQLComponent     (Optional) Contains the MySQL component configuration needed for Keycloak.\n    KialiComponent   (Appears on:ComponentSpec)  KialiComponent specifies the Kiali configuration.\n    Field Description      enabled  bool    (Optional) If true, then Kiali will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    KubeStateMetricsComponent   (Appears on:ComponentSpec)  KubeStateMetricsComponent specifies the kube-state-metrics configuration.\n    Field Description      enabled  bool    (Optional) If true, then kube-state-metrics will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    LetsEncryptACMEIssuer   (Appears on:ClusterIssuerComponent, IssuerConfig)  LetsEncryptAcmeIssuer identifies the configuration used for the LetsEncrypt cert issuer\n    Field Description      emailAddress  string    (Optional) Email address of the user.\n    environment  string    (Optional) Environment can be “staging” or “production”\n    MySQLComponent   (Appears on:KeycloakComponent)  MySQLComponent specifies the MySQL configuration.\n    Field Description      monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    volumeSource  Kubernetes core/v1.VolumeSource     (Optional) Defines the type of volume to be used for persistence for Keycloak/MySQL, and can be one of either EmptyDirVolumeSource or PersistentVolumeClaimVolumeSource. If PersistentVolumeClaimVolumeSource is declared, then the claimName must reference the name of a VolumeClaimSpecTemplate declared in the volumeClaimSpecTemplates section.\n    MySQLOperatorComponent   (Appears on:ComponentSpec)  MySQLOperatorComponent specifies the MySQL Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then MySQL Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    OAMComponent   (Appears on:ComponentSpec)  OAMComponent specifies the OAM configuration.\n    Field Description      enabled  bool    (Optional) If true, then OAM will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    OCI   (Appears on:DNSComponent, DNSConfig)  OCI DNS type.\n    Field Description      dnsScope  string    (Optional) Scope of the Oracle Cloud Infrastructure DNS zone (PRIVATE, GLOBAL). If not specified, then defaults to GLOBAL.\n    dnsZoneCompartmentOCID  string    The Oracle Cloud Infrastructure DNS compartment OCID.\n    dnsZoneOCID  string    The Oracle Cloud Infrastructure DNS zone OCID.\n    dnsZoneName  string    Name of Oracle Cloud Infrastructure DNS zone.\n    ociConfigSecret  string    Name of the Oracle Cloud Infrastructure configuration secret. Generate a secret based on the Oracle Cloud Infrastructure configuration profile you want to use. You can specify a profile other than DEFAULT and specify the secret name. See instructions by running ./install/create_oci_config_secret.sh.\n    OciLoggingConfiguration   (Appears on:FluentdComponent)  OciLoggingConfiguration is the Oracle Cloud Infrastructure logging configuration for Fluentd.\n    Field Description      apiSecret  string    (Optional) The name of the secret containing the Oracle Cloud Infrastructure API configuration and private key.\n    defaultAppLogId  string    The OCID of the Oracle Cloud Infrastructure Log that will collect application logs.\n    systemLogId  string    The OCID of the Oracle Cloud Infrastructure Log that will collect system logs.\n    OpenSearchComponent   (Appears on:ComponentSpec)  OpenSearchComponent specifies the OpenSearch configuration.\n    Field Description      enabled  bool    (Optional) If true, then OpenSearch will be installed.\n    nodes  []OpenSearchNode     (Optional) A list of OpenSearch node groups. For sample usage, see Customize OpenSearch.\n    policies  []VMO /vmcontroller/v1.IndexManagementPolicy     (Optional) A list of Index State Management policies to enable on OpenSearch.\n    plugins  VMO /vmcontroller/v1.OpenSearchPlugins     (Optional) Enable to add 3rd Party / Custom plugins not offered in the default OpenSearch image.\n    disableDefaultPolicy  bool    To disable the default ISM policies.\n    OpenSearchDashboardsComponent   (Appears on:ComponentSpec)  OpenSearchDashboardsComponent specifies the OpenSearch Dashboards configuration.\n    Field Description      enabled  bool    (Optional) If true, then OpenSearch Dashboards will be installed.\n    replicas  int32    The number of pods to replicate. The default is 1.\n    plugins  VMO /vmcontroller/v1.OpenSearchDashboardsPlugins     (Optional) Enable to add 3rd Party / Custom plugins not offered in the default OpenSearch-Dashboard image\n    OpenSearchNode   (Appears on:OpenSearchComponent)  OpenSearchNode specifies a node group in the OpenSearch cluster.\n    Field Description      name  string    Name of the node group.\n    replicas  int32    (Optional) Node group replica count.\n    resources  Kubernetes core/v1.ResourceRequirements     (Optional) Kubernetes container resources for nodes in the node group.\n    roles  []VMO /vmcontroller/v1.NodeRole     Role or roles that nodes in the group will assume: may be master, data, and/or ingest.\n    storage  OpenSearchNodeStorage     (Optional) Storage settings for the node group.\n    javaOpts  string    (Optional) JavaOpts settings for the OpenSearch JVM.\n    OpenSearchNodeStorage   (Appears on:OpenSearchNode)      Field Description      size  string    Node group storage size expressed as a Quantity.\n    Overrides   (Appears on:ApplicationOperatorComponent, ArgoCDComponent, AuthProxyComponent, CertManagerComponent, CertManagerWebhookOCIComponent, ClusterAPIComponent, ClusterAgentComponent, ClusterOperatorComponent, CoherenceOperatorComponent, ConsoleComponent, DNSComponent, DNSConfig, FluentOperatorComponent, FluentbitOpensearchOutputComponent, FluentdComponent, IngressNginxComponent, InstallOverrides, IstioComponent, JaegerOperatorComponent, KeycloakComponent, KialiComponent, KubeStateMetricsComponent, MySQLComponent, MySQLOperatorComponent, OAMComponent, PrometheusAdapterComponent, PrometheusNodeExporterComponent, PrometheusOperatorComponent, PrometheusPushgatewayComponent, RancherBackupComponent, RancherComponent, ThanosComponent, VeleroComponent, VerrazzanoComponent, WebLogicOperatorComponent)  Overrides identifies overrides for a component.\n    Field Description      configMapRef  Kubernetes core/v1.ConfigMapKeySelector     (Optional) Selector for ConfigMap containing override data. For sample usage, see ConfigMapRef.\n    secretRef  Kubernetes core/v1.SecretKeySelector     (Optional) Selector for Secret containing override data. For sample usage, see SecretRef.\n    values  Kubernetes apiextensions/v1.JSON     (Optional) Configure overrides using inline YAML. For sample usage, see Values.\n    ProfileType (string alias)  (Appears on:VerrazzanoSpec)  ProfileType is the type of installation profile.\n    Value Description   \"dev\"\n Dev identifies the development install profile\n \"managed-cluster\"\n ManagedCluster identifies the production managed-cluster install profile\n \"none\"\n None identifies a profile with all components disabled\n \"prod\"\n Prod identifies the production install profile\n   PrometheusAdapterComponent   (Appears on:ComponentSpec)  PrometheusAdapterComponent specifies the Prometheus Adapter configuration.\n    Field Description      enabled  bool    (Optional) If true, then Prometheus Adaptor will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    PrometheusComponent   (Appears on:ComponentSpec)  PrometheusComponent specifies the Prometheus configuration.\n    Field Description      enabled  bool    (Optional) If true, then Prometheus will be installed. This is a legacy setting; the preferred way to configure Prometheus is using the PrometheusOperatorComponent.\n    PrometheusNodeExporterComponent   (Appears on:ComponentSpec)  PrometheusNodeExporterComponent specifies the Prometheus Node Exporter configuration.\n    Field Description      enabled  bool    (Optional) If true, then Prometheus Node Exporter will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    PrometheusOperatorComponent   (Appears on:ComponentSpec)  PrometheusOperatorComponent specifies the Prometheus Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then Prometheus Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    PrometheusPushgatewayComponent   (Appears on:ComponentSpec)  PrometheusPushgatewayComponent specifies the Prometheus Pushgateway configuration.\n    Field Description      enabled  bool    (Optional) If true, then Prometheus Pushgateway will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    ProviderType (string alias)  (Appears on:Acme)  ProviderType identifies Acme provider type.\n    Value Description   \"LetsEncrypt\"\n LetsEncrypt is a Let’s Encrypt provider\n   RancherBackupComponent   (Appears on:ComponentSpec)  RancherBackupComponent specifies the rancherBackup configuration.\n    Field Description      enabled  bool    (Optional) If true, then rancherBackup will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    RancherComponent   (Appears on:ComponentSpec)  RancherComponent specifies the Rancher configuration.\n    Field Description      enabled  bool    (Optional) If true, then Rancher will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    keycloakAuthEnabled  bool    (Optional) KeycloakAuthEnabled specifies whether the Keycloak Auth provider is enabled. Default is false.\n    SecuritySpec   (Appears on:VerrazzanoSpec)  SecuritySpec defines the security configuration for Verrazzano.\n    Field Description      adminSubjects  []Kubernetes rbac/v1.Subject     (Optional) Specifies subjects that should be bound to the verrazzano-admin role.\n    monitorSubjects  []Kubernetes rbac/v1.Subject     (Optional) Specifies subjects that should be bound to the verrazzano-monitor role.\n    ThanosComponent   (Appears on:ComponentSpec)  ThanosComponent specifies the Thanos configuration.\n    Field Description      enabled  bool    (Optional) If true, then Thanos will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    VeleroComponent   (Appears on:ComponentSpec)  VeleroComponent specifies the Velero configuration.\n    Field Description      enabled  bool    (Optional) If true, then Velero will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    VerrazzanoComponent   (Appears on:ComponentSpec)  VerrazzanoComponent specifies the Verrazzano configuration.\n    Field Description      enabled  bool    (Optional) If true, then Verrazzano will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    VerrazzanoSpec   (Appears on:Verrazzano)  VerrazzanoSpec defines the desired state of Verrazzano resource.\n    Field Description      components  ComponentSpec     (Optional) The Verrazzano components.\n    defaultVolumeSource  Kubernetes core/v1.VolumeSource     (Optional) Defines the type of volume to be used for persistence for all components unless overridden, and can be one of either EmptyDirVolumeSource or PersistentVolumeClaimVolumeSource. If PersistentVolumeClaimVolumeSource is declared, then the claimName must reference the name of an existing VolumeClaimSpecTemplate declared in the volumeClaimSpecTemplates section.\n    environmentName  string    (Optional) Name of the installation. This name is part of the endpoint access URLs that are generated. The default value is default.\n    profile  ProfileType     (Optional) The installation profile to select. Valid values are prod (production), dev (development), and managed-cluster. The default is prod.\n    security  SecuritySpec     (Optional) Security specifies Verrazzano security configuration.\n    version  string    (Optional) The version to install. Valid versions can be found here. Defaults to the current version supported by the Verrazzano platform operator.\n    volumeClaimSpecTemplates  []VolumeClaimSpecTemplate     (Optional) Defines a named set of PVC configurations that can be referenced from components to configure persistent volumes.\n    VerrazzanoStatus   (Appears on:Verrazzano)  VerrazzanoStatus defines the observed state of a Verrazzano resource.\n    Field Description      available  string    The summary of Verrazzano component availability.\n    components  ComponentStatusMap     States of the individual installed components.\n    conditions  []Condition     The latest available observations of an object’s current state.\n    state  VzStateType     State of the Verrazzano custom resource.\n    instance  InstanceInfo     The Verrazzano instance info.\n    version  string    The version of Verrazzano that is installed.\n    VolumeClaimSpecTemplate   (Appears on:VerrazzanoSpec)  VolumeClaimSpecTemplate Contains common PVC configuration that can be referenced from Components; these do not actually result in generated PVCs, but can be used to provide common configuration to components that declare a PersistentVolumeClaimVolumeSource.\n    Field Description      metadata  Kubernetes meta/v1.ObjectMeta     Metadata about the PersistentVolumeClaimSpec template.\nRefer to the Kubernetes API documentation for the fields of the metadata field.     spec  Kubernetes core/v1.PersistentVolumeClaimSpec     A PersistentVolumeClaimSpec template that can be referenced by a Component to override its default storage settings for a profile. At present, only a subset of the resources.requests object are honored depending on the component.\n     accessModes  []Kubernetes core/v1.PersistentVolumeAccessMode     (Optional) accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n    selector  Kubernetes meta/v1.LabelSelector     (Optional) selector is a label query over volumes to consider for binding.\n    resources  Kubernetes core/v1.ResourceRequirements     (Optional) resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n    volumeName  string    (Optional) volumeName is the binding reference to the PersistentVolume backing this claim.\n    storageClassName  string    (Optional) storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\n    volumeMode  Kubernetes core/v1.PersistentVolumeMode     (Optional) volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.\n    dataSource  Kubernetes core/v1.TypedLocalObjectReference     (Optional) dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.\n    dataSourceRef  Kubernetes core/v1.TypedLocalObjectReference     (Optional) dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n       VolumeMount   (Appears on:FluentdComponent)  VolumeMount defines a hostPath type Volume mount.\n    Field Description      destination  string    (Optional) The destination path on the Fluentd Container, defaults to the source host path.\n    readOnly  bool    (Optional) Specifies if the volume mount is read-only, defaults to true.\n    source  string    The source host path.\n    VzStateType (string alias)  (Appears on:VerrazzanoStatus)  VzStateType identifies the state of a Verrazzano installation.\n    Value Description   \"Failed\"\n VzStateFailed is the state when an install/uninstall/upgrade has failed\n \"Paused\"\n VzStatePaused is the state when an upgrade is paused due to version mismatch\n \"Ready\"\n VzStateReady is the state when a Verrazzano resource can perform an uninstall or upgrade\n \"Reconciling\"\n VzStateReconciling is the state when a resource is in progress reconciling\n \"Uninstalling\"\n VzStateUninstalling is the state when an uninstall is in progress\n \"Upgrading\"\n VzStateUpgrading is the state when an upgrade is in progress\n   WebLogicOperatorComponent   (Appears on:ComponentSpec)  WebLogicOperatorComponent specifies the WebLogic Kubernetes Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then the WebLogic Kubernetes Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    Wildcard   (Appears on:DNSComponent, DNSConfig)  Wildcard DNS type.\n    Field Description      domain  string    The type of wildcard DNS domain. For example, nip.io, sslip.io, and such.\n      Generated with gen-crd-api-reference-docs on git commit 238db2c3e. \n","categories":"","description":"","excerpt":"Packages:\n  install.verrazzano.io/v1beta1   install.verrazzano.io/v1beta1   Resource Types:  Verrazzano  Verrazzano   Verrazzano specifies the Verrazzano API.\n    Field Description      apiVersion …","ref":"/docs/reference/vpo-verrazzano-v1beta1/","tags":"","title":"Verrazzano v1beta1 APIs"},{"body":"The VerrazzanoManagedCluster custom resource is used to register a managed cluster with an admin cluster. Here is a sample VerrazzanoManagedCluster that registers the cluster named managed1. To deploy an example application that demonstrates a VerrazzanoManagedCluster, see Multicluster Hello World Helidon. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: clusters.verrazzano.io/v1alpha1 kind: VerrazzanoManagedCluster metadata: name: managed1 namespace: verrazzano-mc spec: description: \"Managed Cluster 1\" caSecret: ca-secret-managed1     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"Registers a managed cluster with an administrative cluster","excerpt":"Registers a managed cluster with an administrative cluster","ref":"/docs/applications/multicluster/mcresources/managedcluster/verrazzanomanagedcluster/","tags":"","title":"VerrazzanoManagedCluster"},{"body":"The VerrazzanoProject custom resource is used to create the application namespaces and their associated security settings on one or more clusters. The namespaces are always created on the admin cluster. Here is a sample VerrazzanoProject that specifies a namespace to create on the cluster named managed1.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: clusters.verrazzano.io/v1alpha1 kind: VerrazzanoProject metadata: name: hello-helidon namespace: verrazzano-mc spec: template: namespaces: - metadata: name: hello-helidon placement: clusters: - name: managed1     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"Defines the namespaces and security resources for a set of multicluster applications","excerpt":"Defines the namespaces and security resources for a set of multicluster applications","ref":"/docs/applications/multicluster/mcresources/project/verrazzanoproject/","tags":"","title":"VerrazzanoProject"},{"body":"Summary Analysis detected that one or more Cluster API (CAPI) resources are in a failure state. See the following sections for details:\n Cluster Resource Sets Clusters Machine Deployments Machines Machine Sets OCI Clusters OCI Machines OCNE Configs OCNE Control Planes  Cluster Resource Sets clusterresourceset.addons.cluster.x-k8s.io Analysis detected an issue applying one or more resources specified with the ClusterResourceSet resource.\nClusters cluster.cluster.x-k8s.io Analysis detected an issue creating or updating a Cluster API cluster.\nMachine Deployments machinedeployment.cluster.x-k8s.io Analysis detected an issue with a MachineDeployment resource for a specific cluster. A MachineDeployment orchestrates deployments over a fleet of MachineSets.\nMachines machine.cluster.x-k8s.io Analysis detected an issue with a Machine resource for a specific cluster. A Machine represents one node in the workload cluster created.\nMachine Sets machineset.cluster.x-k8s.io Analysis detected an issue with a MachineSet resource for a specific cluster. A MachineSet is an abstraction over Machines.\nOCI Clusters ocicluster.infrastructure.cluster.x-k8s.io Analysis detected an issue with an OCICluster resource for a specific cluster. An OCICluster resource represents a workload cluster created in Oracle Cloud Infrastructure.\nOCI Machines ocimachine.infrastructure.cluster.x-k8s.io Analysis detected an issue with an OCIMachine resource for a specific cluster. An OCIMachine resource represents one node in the workload cluster created in Oracle Cloud Infrastructure.\nOCNE Configs ocneconfig.bootstrap.cluster.x-k8s.io Analysis detected an issue with an OCNEConfig resource for a specific cluster.\nOCNE Control Planes ocnecontrolplane.controlplane.cluster.x-k8s.io Analysis detected an issue with an OCNEControlPlane resource for a specific cluster. An OCNEControlPlane resource represents the configuration for the OCNE Control Plane.\nRelated information  Cluster API Troubleshooting  ","categories":"","description":"Analysis detected a Cluster API issue","excerpt":"Analysis detected a Cluster API issue","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/clusterapiclusterissues/","tags":"","title":"Cluster API (CAPI) Issues"},{"body":"When running Verrazzano on clusters where the nodes have SELinux enforcing mode enabled, there are a few considerations to keep in mind. SELinux provides an extra layer of security by enforcing mandatory access controls on processes and files.\nUpdate the SELinux context type for Fluentd By default, Fluentd is deployed with the SELinux context type container_t, which grants only read access to host directories (/var/log/). However, Fluentd may require additional permissions to function properly on SELinux enforcing nodes.\nTo grant Fluentd the required permissions, override the default SELinux context type in the Verrazzano Custom Resource and provide the SELinux type spc_t, which designates the Fluentd container as a super privileged container. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  spec:components:fluentd:overrides:- values:seLinuxOptions:type:spc_t   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  NOTE The spc_t SELinux context is very permissive because it grants the pod full access to the node on which it is running.  Alternatively, if you don’t want the Fluentd pod to have the spc_t context, consider creating a custom SELinux context type with only the required privileges on all the worker nodes.\nTo create a custom SELinux context type, consider the following permissions required by the Fluentd container to work smoothly:\n Permission to read the log files in the directory /var/log/containers/ on the host. Permission to write the .pos file in the directory /var/log on the host, using the tail plug-in. Permission to read the journal logs in the directory /var/run/journal on the host, using the systemd plug-in. Permission to write the .pos file in the directory /tmp/, using the systemd plug-in.  Update the custom SELinux context type in the Verrazzano Custom Resource. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  spec:components:fluentd:overrides:- values:seLinuxOptions:type:\u003ccustom selinux type\u003e   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"Configure the Fluentd SELinux context type","excerpt":"Configure the Fluentd SELinux context type","ref":"/docs/observability/logging/fluentd/fluentd/","tags":"","title":"Customize Fluentd"},{"body":"Configure a Grafana database By default, Verrazzano automatically installs and configures a Grafana database. However, you can use your own external database.\nIf you prefer to use your own Grafana database, complete the following steps:\n  Create a secret named grafana-db in the verrazzano-install namespace which contains the login credentials. For example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ROOT_SECRET=$(echo \u003cdatabase root user secret\u003e | base64) $ USER=$(echo \u003cdatabase user\u003e | base64) $ USER_SECRET=$(echo \u003cdatabase user secret\u003e | base64) $ kubectl apply -f - \u003c\u003c-EOF apiVersion: v1 kind: Secret metadata: name: grafana-db namespace: verrazzano-install type: Opaque data: root-password: $ROOT_SECRET username: $USER password: $USER_SECRET EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Configure the Grafana component of the Verrazzano custom resource. For example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: grafana-db-example spec: profile: dev components: grafana: database: host: mysql.verrazzano-install.svc.cluster.local name: grafana    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Configure an SMTP server To configure Grafana to send SMTP notifications, complete the following steps:\n  Create a secret named smtp-secret in the verrazzano-system namespace which contains the SMTP server credentials. For example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl -n verrazzano-system create secret generic smtp-secret \\ --from-literal=username=\"\u003csmtp server username\u003e\" \\ --from-literal=password=\"\u003csmtp server password\u003e\" \\ --from-file=cert=\u003cpath to file containing certificate\u003e \\ --from-file=key=\u003cpath to file containing certificate key\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Configure the Grafana component of the Verrazzano custom resource. For example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: grafana-smtp-example spec: profile: dev components: grafana: smtp: certFileKey: \"cert\" ehloIdentity: \"\u003cName to be used as client identity for EHLO in SMTP dialog\u003e\" enabled: true existingSecret: \"smtp-secret\" fromAddress: \"\u003cAddress used when sending out emails\u003e\" fromName: \"\u003cName to be used when sending out emails\u003e\" host: \"\u003chost or host:port for the smtp server\u003e\" passwordKey: \"password\" skipVerify: true startTLSPolicy: \"\" userKey: \"username\" keyFileKey: \"key\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  For more information about Grafana SMTP configurations, see the Grafana Documentation.\nFor more information about the component definition, see Grafana component in the Verrazzano custom resource.\n","categories":"","description":"Customize Verrazzano Grafana settings","excerpt":"Customize Verrazzano Grafana settings","ref":"/docs/observability/monitoring/configure/grafana/grafana/","tags":"","title":"Customize Grafana"},{"body":"Verrazzano sets up the following load balancers on Kubernetes at installation:\n Load balancer for NGINX ingress Load balancer for Istio ingress  Verrazzano allows customizing the load balancers allocated by Oracle Cloud Infrastructure (OCI) using annotations defined by the OCI Cloud Controller Manager (OCI-CCM). For a detailed description of different load balancer customization annotations, see the documentation here.\nThis document describes how to use these annotations to customize the following settings for Verrazzano load balancers:\n Load balancer shape Load balancer min/max bandwidth Private IP address and subnet placement  Customize the load balancer shape At installation, Verrazzano lets you customize the shape and size of the load balancers created. The shape of an OCI load balancer specifies its maximum total bandwidth. By default, load balancers are created with a shape of 100Mbps. Other shapes are available, including 400Mbps and 8000Mbps.\nFor more details on service limits and shape, see here.\nFor example, you can set up a flexible NGINX load balancer with a min and max bandwidth as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:example-verrazzanospec:profile:devcomponents:ingressNGINX:type:LoadBalanceroverrides:- values:controller:service:annotations:service.beta.kubernetes.io/oci-load-balancer-shape:flexibleservice.beta.kubernetes.io/oci-load-balancer-shape-flex-max:\"100\"service.beta.kubernetes.io/oci-load-balancer-shape-flex-min:\"100\"   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor example, you can set up a flexible Istio load balancer with a min and max bandwidth as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:example-verrazzanospec:profile:devcomponents:istio:overrides:- values:apiVersion:install.istio.io/v1alpha1kind:IstioOperatorspec:components:ingressGateways:- enabled:truename:istio-ingressgatewayk8s:serviceAnnotations:service.beta.kubernetes.io/oci-load-balancer-shape:flexibleservice.beta.kubernetes.io/oci-load-balancer-shape-flex-max:\"100\"service.beta.kubernetes.io/oci-load-balancer-shape-flex-min:\"100\"   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUse private IP addresses with a load balancer At installation, Verrazzano lets you customize the IP address and subnet of the load balancers created. This is achieved using OCI-CCM annotations on the NGINX and Istio load balancer services, as documented here.\nThe following example configures the NGINX load balancer service to have a private load balancer IP address on the private subnet identified by the OCID ocid1.subnet.oc1.phx.aaaa..sdjxa, and uses the default (public) load balancer configuration for Istio. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:example-verrazzanospec:profile:devcomponents:ingressNGINX:type:LoadBalanceroverrides:- values:controller:service:annotations:service.beta.kubernetes.io/oci-load-balancer-internal:\"true\"service.beta.kubernetes.io/oci-load-balancer-subnet1:\"ocid1.subnet.oc1.phx.aaaa..sdjxa\"   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The following example configures the Istio ingress gateway service to have a private load balancer IP address on the private subnet identified by the OCID ocid1.subnet.oc1.phx.aaaa..sdjxa, and uses the default (public) load balancer configuration for NGINX. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:example-verrazzanospec:profile:devcomponents:istio:overrides:- values:apiVersion:install.istio.io/v1alpha1kind:IstioOperatorspec:components:ingressGateways:- enabled:truename:istio-ingressgatewayk8s:serviceAnnotations:service.beta.kubernetes.io/oci-load-balancer-internal:\"true\"service.beta.kubernetes.io/oci-load-balancer-subnet1:\"ocid1.subnet.oc1.phx.aaaa..sdjxa\"   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe following example configures both NGINX and Istio to have a private load balancer IP address on the private subnet identified by the OCID ocid1.subnet.oc1.phx.aaaa..sdjxa. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:example-verrazzanospec:profile:devcomponents:ingressNGINX:type:LoadBalanceroverrides:- values:controller:service:annotations:service.beta.kubernetes.io/oci-load-balancer-internal:\"true\"service.beta.kubernetes.io/oci-load-balancer-subnet1:\"ocid1.subnet.oc1.phx.aaaa..sdjxa\"istio:overrides:- values:apiVersion:install.istio.io/v1alpha1kind:IstioOperatorspec:components:ingressGateways:- enabled:truename:istio-ingressgatewayk8s:serviceAnnotations:service.beta.kubernetes.io/oci-load-balancer-internal:\"true\"service.beta.kubernetes.io/oci-load-balancer-subnet1:\"ocid1.subnet.oc1.phx.aaaa..sdjxa\"   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"Customize load balancers on OCI for Verrazzano system and application endpoints","excerpt":"Customize load balancers on OCI for Verrazzano system and application endpoints","ref":"/docs/networking/traffic/ociloadbalancerips/","tags":"","title":"Customize Load Balancers on OCI"},{"body":"Enable Argo CD  Install Verrazzano and set up a multicluster environment by following these instructions. a. Because Argo CD is not enabled by default, you must first enable argoCD on the admin cluster. b. When you register managed clusters, they are automatically registered in Argo CD. Access the Argo CD console using the instructions at Access Verrazzano. After you set up your application in the Argo CD console, those registered clusters will be available for you to select, deploy, and manage applications.  Configure repositories In the Argo CD console, configure repositories that will contain the Kubernetes resources for deploying an application.\nThe following is a sample procedure to configure a private Git repository through HTTPS.\n Log in to the Argo CD console. In the left navigation, click Settings. Click Repositories. Click Connect Repo. Select VIA HTTPS as the connection method. For Project, specify default. NOTE: Unless they are grouped together, all the projects are defined in the default level. For Repository URL, provide the required URL. If it is a private repository and a user name and password is required to connect to the repository, enter the required credentials. NOTE: The other fields are optional and based on how the Git repository is configured. Click Connect and verify that the connection status displayed is Successful.  ","categories":"","description":"Enable and configure Argo CD to work with your Git repositories","excerpt":"Enable and configure Argo CD to work with your Git repositories","ref":"/docs/applications/delivery/enable/","tags":"","title":"Enable and Configure Argo CD"},{"body":"Summary Analysis detected that there was an issue with the DNS configuration that is related to credentials. It could be an authorization issue or incorrectly supplied credentials.\nSteps  Review the OCI credentials provided during DNS configuration. Check the permission for OCI credentials or instance_principal.  Related information  OCI DNS  ","categories":"","description":"Analysis detected an external DNS configuration issue","excerpt":"Analysis detected an external DNS configuration issue","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/externaldnsconfiguration/","tags":"","title":"External DNS Configuration"},{"body":"Summary Analysis detected that there were pods that had issues due to failures to pull an image or images.\nThe analysis was not able to identify a specific root cause, however, it might have supplied data that is related to the failures.\nSteps  Review the analysis data. At a minimum, it will indicate which pods are being impacted and might give other clues on the root cause. If the service is experiencing an outage, then consult the specific service status page. For common service status pages, see Related information.  Related information  GitHub Status Oracle Cloud Infrastructure Status Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected an image pull back off issue","excerpt":"Analysis detected an image pull back off issue","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/imagepullbackoff/","tags":"","title":"Image Pull Back Off"},{"body":"Summary Analysis detected that there were pods which had issues due to failures to pull an image or images where the root cause was that the image was not found.\nSteps  Review the analysis data; it enumerates the pods and related messages regarding which images had this issue. Confirm that the image name, digest, and tag are correctly specified.  Related information  Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected an image pull not found issue","excerpt":"Analysis detected an image pull not found issue","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/imagepullnotfound/","tags":"","title":"Image Pull Not Found"},{"body":"Summary Analysis detected that there were pods which had issues due to failures to pull an image or images.\nThe root cause was rate limit exceeded errors while pulling images.\nSteps  Review the analysis data; it enumerates the pods and related messages regarding which images had this issue. The detailed messages might provide specific instructions for the registry that is involved. For example, it might provide a link to instructions on how to increase the limit.  Related information  Increase Rate Limits  ","categories":"","description":"Analysis detected an image pull rate limit issue","excerpt":"Analysis detected an image pull rate limit issue","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/imagepullratelimit/","tags":"","title":"Image Pull Rate Limit"},{"body":"Summary Analysis detected that there were pods which had issues due to failures to pull an image or images where the root cause was that the service was not available.\nThe service might be unreachable or might be incorrect.\nSteps  Review the analysis data; it enumerates the pods and related messages about which images had this issue. Confirm that the registry for the image is correct. The messages might identify a connectivity issue. If the service is experiencing an outage, then consult the specific service status page. For common service status pages, see Related information.  Related information  GitHub Status Oracle Cloud Infrastructure Status Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected an image pull service issue","excerpt":"Analysis detected an image pull service issue","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/imagepullservice/","tags":"","title":"Image Pull Service Issue"},{"body":"Summary Analysis detected that the Verrazzano installation failed while installing the NGINX Ingress Controller.\nThe root cause appears to be that Verrazzano custom resource provided an invalid shape for Oracle Cloud Infrastructure load balancer.\nSteps  Review the messages from the supporting details for the allowed shape for Oracle Cloud Infrastructure load balancer. Refer to the Oracle Cloud Infrastructure documentation, Load Balancer Management.  Related information  Customize Load Balancers on OKE  ","categories":"","description":"Analysis detected an invalid shape for Oracle Cloud Infrastructure load balancer","excerpt":"Analysis detected an invalid shape for Oracle Cloud Infrastructure load balancer","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/ingressinvalidshape/","tags":"","title":"Ingress Controller Invalid Shape"},{"body":"Summary Analysis detected that the Verrazzano installation failed while installing the NGINX Ingress Controller.\nThe root cause appears to be that the load balancer service limit has been reached.\nSteps  Review the messages from the supporting details for the exact limits, and delete unused load balancers. If available, use a different load balancer shape. See Customizing Ingress. Refer to the Oracle Cloud Infrastructure documentation on Service Limits.  Related information  Platform Setup Kubernetes Troubleshooting More information on load balancers  ","categories":"","description":"Analysis detected that the load balancer service limit was exceeded","excerpt":"Analysis detected that the load balancer service limit was exceeded","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/ingresslblimitexceeded/","tags":"","title":"Ingress Controller Load Balancer Service Limit Reached"},{"body":"Summary Analysis detected that the Verrazzano installation failed while installing the NGINX Ingress Controller.\nThe root cause appears to be that the load balancer is either missing or unable to set the ingress IP address on the NGINX Ingress service.\nSteps Refer to the platform-specific environment setup for your platform here.\nRelated information  Platform Setup Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected load balancer missing ingress IP address","excerpt":"Analysis detected load balancer missing ingress IP address","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/ingressnoloadbalancerip/","tags":"","title":"Ingress Controller No Load Balancer IP"},{"body":"Summary Analysis detected that the Verrazzano installation failed while installing the NGINX Ingress Controller.\nThe root cause appears to be that an Oracle Cloud Infrastructure IP non-ephemeral address limit has been reached.\nSteps  Review the messages from the supporting details for the exact limit. Refer to the Oracle Cloud Infrastructure documentation related to managing IP Addresses.  Related information  Public IP Addresses  ","categories":"","description":"Analysis detected ingress controller Oracle Cloud Infrastructure IP limit exceeded","excerpt":"Analysis detected ingress controller Oracle Cloud Infrastructure IP limit exceeded","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/ingressociiplimitexceeded/","tags":"","title":"Ingress Controller Oracle Cloud Infrastructure IP Limit Exceeded"},{"body":"Summary Analysis detected that the Verrazzano installation has failed related to the NGINX Ingress Controller, however, it was unable to isolate the specific root cause.\nSteps Review the analysis data, which might help identify the issue.\nRelated information  Installation Guide Platform Setup Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected an install ingress controller failure","excerpt":"Analysis detected an install ingress controller failure","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/ingressinstallfailure/","tags":"","title":"Install Ingress Controller Failure"},{"body":"If you are running in a disconnected environment (without access to the Internet), then you will need to install Verrazzano using a private container registry. However, you may choose to install Verrazzano using a private registry even if you are not running in a disconnected environment.\nPrerequisites  You will need to connect to the Internet to download the Verrazzano images and Verrazzano distribution. You will need a way to transfer the images to your private registry and the distribution to the disconnected environment. Your workstation must have at least 20 GB of disk space. You must have the following software installed:  Docker kubectl jq    Installing Verrazzano using a private Docker-compliant container registry requires the following:\n Loading all the required Verrazzano container images into your own registry and repositories. Installing Verrazzano with the private registry and a common prefix for all the repositories used to load the images.  Get Verrazzano You can download Verrazzano from the Verrazzano GitHub releases page. Oracle customers also can get Verrazzano from the Oracle Software Delivery Cloud. Follow the respective download instructions:\nNOTE: You will need to connect to the Internet to download the Verrazzano images and Verrazzano distribution.\n From GitHub From the Oracle Software Delivery Cloud  From GitHub   Download the desired Verrazzano distribution from the GitHub releases page.\na. In your browser, go to Verrazzano releases.\nb. Download the distribution TAR file, verrazzano-\u003cmajor\u003e.\u003cminor\u003e.\u003cpatch\u003e-\u003coperating system\u003e-\u003carchitecture\u003e.tar.gz, and the corresponding checksum file.\nc. In the downloaded directory, validate that the checksum and TAR files match. For example, if you have downloaded verrazzano-2.0.0-linux-amd64.tar.gz: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ sha256sum -c verrazzano-2.0.0-linux-amd64.tar.gz.sha256 # Sample output verrazzano-2.0.0-linux-amd64.tar.gz: OK    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: Use the sha256sum command on Linux and shasum on MacOS.\nd. Expand the TAR file to access the release artifacts.\nThe following example, extracts the distribution archive verrazzano-2.0.0-linux-amd64.tar.gz into the current directory. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ tar xvf verrazzano-2.0.0-linux-amd64.tar.gz    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  After a successful extraction, the release artifacts will be under the verrazzano-2.0.0 directory.\ne. Define an environment variable DISTRIBUTION_DIR. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ DISTRIBUTION_DIR=\u003cpath to the current directory\u003e/verrazzano-2.0.0    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Download the Verrazzano images defined in the BOM, ${DISTRIBUTION_DIR}/manifests/verrazzano-bom.json, using the script, ${DISTRIBUTION_DIR}/bin/vz-registry-image-helper.sh. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ sh ${DISTRIBUTION_DIR}/bin/vz-registry-image-helper.sh \\ -b ${DISTRIBUTION_DIR}/manifests/verrazzano-bom.json \\ -f ${DISTRIBUTION_DIR}/images    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe previous command downloads all the images to the ${DISTRIBUTION_DIR}/images directory.\n  From the Oracle Software Delivery Cloud   Download the Verrazzano ZIP file.\n  Download the Verrazzano ZIP file from the Oracle Software Delivery Cloud for major or minor releases.\na. In your browser, go to the Oracle Software Delivery Cloud and log in with your credentials.\nb. In the drop-down menu preceding the search bar, select All Categories.\nc. In the search bar, enter Verrazzano Enterprise Container Platform and click Search.\nd. Select the REL: Verrazzano Enterprise Container Platform 1.6.0.0.0 link. This will add it to your download queue.\ne. At the top of the page, select the Continue link.\nf. Review the Download Queue, then click Continue.\ng. Accept the license agreement and click Continue.\nh. Download the file:\n To download the ZIP file directly, select the file link in the list. To download the ZIP file using Oracle Download Manager, click Download and run the Oracle Download Manager executable.    Download the Verrazzano ZIP file from My Oracle Support for cumulative patches.\na. In your browser, go to My Oracle Support and log in with your credentials.\nb. Select the Patches \u0026 Updates tab.\nc. In the Patch Search panel, select the link Product or Family (Advanced).\nd. In the search bar for Product is, enter Oracle Verrazzano Enterprise Container Platform.\ne. The previous step populates the available releases for Verrazzano in the drop-down menu Release is. Select the desired release(s) and click Search.\nf. A new panel with Patch Advanced Search Results will open listing all the patches for the release. Select the link for the desired patch, under the Patch Name.\ng. From the page providing details about the patch, click Download.\nh. Download the ZIP file by selecting the file link.\n    Prepare to do the private registry installation.\na. Extract the ZIP archive to a desired directory location. There will be two files: a compressed TAR file containing the product files and a checksum file.\nb. Define an environment variable DISTRIBUTION_DIR.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ DISTRIBUTION_DIR=\u003cpath to the current directory\u003e/verrazzano-2.0.0     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  c. In the expanded archive directory, validate that the checksum and TAR files match. For example, code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ sha256sum -c verrazzano-2.0.0.tar.gz.sha256 # Sample output verrazzano-2.0.0.tar.gz: OK     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: Use the sha256sum command on Linux and shasum on MacOS.\n  Load the images Load the product images into your private registry.\nNOTE: You will need a way to transfer the images to your private registry and the distribution to the disconnected environment.\n  To log in to the Docker registry, run docker login \u003cSERVER\u003e with your credentials.\n  For use with the examples in this document, define the following variables with respect to your target registry and image prefix: MYREG, MYPREFIX.\nThese identify the target Docker registry and image prefix. For example, using a target registry of myreg.io and a target image prefix of myrepo/v8o: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ MYREG=myreg.io $ MYPREFIX=myrepo/v8o    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Run the ${DISTRIBUTION_DIR}/bin/vz-registry-image-helper.sh script to push the images to the registry: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ sh ${DISTRIBUTION_DIR}/bin/vz-registry-image-helper.sh \\ -t $MYREG -r $MYPREFIX -l ${DISTRIBUTION_DIR}/images    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Although most images can be protected using credentials stored in an image pull secret, some images must be public. Use the following commands to get the list of public images:\n  The Rancher Agent image. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ cat ${DISTRIBUTION_DIR}/manifests/verrazzano-bom.json \\ | jq -r '.components[].subcomponents[] | select(.name == \"rancher\") | .images[] | select(.image == \"rancher-agent\") | \"\\(.image):\\(.tag)\"'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  All the Rancher images in the rancher/additional-rancher subcomponent. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ cat ${DISTRIBUTION_DIR}/manifests/verrazzano-bom.json \\ | jq -r '.components[].subcomponents[] | select(.name == \"additional-rancher\") | .images[] | \"\\(.image):\\(.tag)\"'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  All the Cluster API (CAPI) images. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ cat ${DISTRIBUTION_DIR}/manifests/verrazzano-bom.json \\ | jq -r '.components[].subcomponents[] | select(.name | startswith(\"capi-\")) | .images[] | \"\\(.image):\\(.tag)\"'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  For all the Verrazzano Docker images in the private registry that are not explicitly marked public, you will need to create the secret verrazzano-container-registry in the verrazzano-install namespace, with the appropriate credentials for the registry, identified by $MYREG. For example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create namespace verrazzano-install $ kubectl create secret docker-registry verrazzano-container-registry -n verrazzano-install \\ --docker-server=$MYREG --docker-username=myreguser \\ --docker-password=xxxxxxxx --docker-email=me@example.com    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n    Install Verrazzano Use the Verrazzano CLI to install Verrazzano from your private registry.\nNOTE  You must copy the downloaded Verrazzano distribution to the disconnected environment. To ensure that the host names used for the system consoles are resolvable, you must configure one of the following:  If running within a public cloud, use the cloud provider’s DNS, for example, OCI DNS. If running within a disconnected environment, use a custom DNS server that can resolve the host names. See Customize DNS for more information.       To install Verrazzano, you will need the Verrazzano platform operator manifests file. This file is in the distribution at ${DISTRIBUTION_DIR}/manifests/k8s/verrazzano-platform-operator.yaml.\n  Install Verrazzano using the Verrazzano CLI.\n If you downloaded Verrazzano from the Verrazzano GitHub releases page, then you can find the CLI in the distribution archive at ${DISTRIBUTION_DIR}/bin/vz. If you downloaded Verrazzano from the Oracle Software Delivery Cloud, then you can find the CLI in the distribution archive at ${DISTRIBUTION_DIR}/bin/\u003cplatform\u003e/vz. For example, for the Linux operating system on AMD architecture, the path to the CLI is ${DISTRIBUTION_DIR}/bin/linux-amd64/vz. This path is used in all the sample commands.  code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ${DISTRIBUTION_DIR}/bin/linux-amd64/vz install \\ --image-registry \"${MYREG}\" \\ --image-prefix \"${MYPREFIX}\" \\ --manifests ${DISTRIBUTION_DIR}/manifests/k8s/verrazzano-platform-operator.yaml     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    NOTE:\n The --manifests flag is used in this example to provide the location of the Verrazzano platform operator manifests file. If you omit this flag, the vz CLI will attempt to download the manifests file, which requires access to the Internet. The --filename flag is used to specify a Verrazzano custom resource. See Edit the Verrazzano resource.  For the complete list of flags supported by vz install command, run ${DISTRIBUTION_DIR}/bin/linux-amd64/vz/install -h.\nVerrazzano supports customizing installation configurations. See Modify Verrazzano Installations.\nFor example, to install Verrazzano using the prod profile, run the following command: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ${DISTRIBUTION_DIR}/bin/linux-amd64/vz install \\ --set profile=prod \\ --image-registry \"${MYREG}\" \\ --image-prefix \"${MYPREFIX}\" \\ --manifests ${DISTRIBUTION_DIR}/manifests/k8s/verrazzano-platform-operator.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"Set up Verrazzano in environments without direct connection to the Internet","excerpt":"Set up Verrazzano in environments without direct connection to the Internet","ref":"/docs/setup/private-registry/private-registry/","tags":"","title":"Install Verrazzano in a Disconnected Environment"},{"body":"Summary Analysis detected a failure while installing, upgrading, or uninstalling Verrazzano; however, it did not isolate the exact reason for the failure.\nSteps Review the analysis data, which can help identify the issue. Upon failure, a bug-report archive file will be generated automatically and the filepath will be printed to the console.\nRelated information  Installation Guide Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected a failure while installing, upgrading, or uninstalling Verrazzano","excerpt":"Analysis detected a failure while installing, upgrading, or uninstalling Verrazzano","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/installfailure/","tags":"","title":"Install, Upgrade, or Uninstall Failure"},{"body":"Summary Analysis detected that there were nodes reporting insufficient CPU.\nSteps   Review the detailed analysis data to identify the specific nodes involved.\n  Review the nodes to determine why they do not have sufficient CPU.\na. Are the nodes sized correctly for the workload?\n For the minimum resources required for installing Verrazzano, see the Prerequisites. Make sure to take into account the resource guidelines of all the applications that you are deploying.  b. Is something unexpected running on the nodes or consuming more CPU than expected?\n  Related information  Prerequisites Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected nodes reporting insufficient CPU","excerpt":"Analysis detected nodes reporting insufficient CPU","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/insufficientcpu/","tags":"","title":"Insufficient CPU"},{"body":"Summary Analysis detected that there were nodes reporting insufficient memory.\nSteps   Review the detailed analysis data to identify the specific nodes involved.\n  Review the nodes to determine why they do not have sufficient memory.\na. Are the nodes sized correctly for the workload?\n For the minimum resources required for installing Verrazzano, see the Prerequisites. Make sure to take into account the resource guidelines of all the applications that you are deploying.  b. Is something unexpected running on the nodes or consuming more memory than expected?\n  Related information  Prerequisites Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected nodes reporting insufficient memory","excerpt":"Analysis detected nodes reporting insufficient memory","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/insufficientmemory/","tags":"","title":"Insufficient Memory"},{"body":"Summary Analysis detected that the Verrazzano installation failed while installing the Istio ingress gateway.\nThe root cause appears to be that the load balancer is either missing or unable to set the external IP address on the Istio ingress gateway service.\nSteps Refer to the platform-specific environment setup for your platform here.\nRelated information  Platform Setup Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected Istio ingress gateway is missing an external IP address","excerpt":"Analysis detected Istio ingress gateway is missing an external IP address","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/istioingressgatewaynoloadbalancerip/","tags":"","title":"Istio Ingress Gateway No External IP"},{"body":"Summary Analysis detected that the Verrazzano installation failed while creating the load balancer for the Istio ingress gateway.\nThe root cause was that, while creating the public load balancer, there were no public subnets available.\nSteps Refer to the platform-specific environment setup for your platform here.\nRelated information  Platform Setup Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected Istio ingress load balancer was not created successfully","excerpt":"Analysis detected Istio ingress load balancer was not created successfully","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/istioloadbalancercreationissue/","tags":"","title":"Istio Ingress Load Balancer Creation Issue"},{"body":"Summary Analysis detected that the Verrazzano upgrade failed when migrating Keycloak data from the existing legacyDB to the new InnoDB.\nSteps   Verify whether the dump-claim PVC exists and is bound to the PV. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ k get pvc -n keycloak dump-claim # Sample Output NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE dump-claim Bound pvc-c246d7c4-3041-4164-8c1e-744dda805686 2Gi RWO standard 12m    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pv # Sample Output NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE pvc-c246d7c4-3041-4164-8c1e-744dda805686 2Gi RWO Retain Bound keycloak/dump-claim standard 49m    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the mysql-root password from the mysql or mysql-cluster-secret secret in the keycloak namespace. The password is required to access the MySQL server as a root user in the following steps. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get secret -n keycloak mysql -o jsonpath='{.data.mysql-root-password}' | base64 --decode # Sample Output lvYwPJjwFB    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Create a load-dump pod to help in migrating the previous Keycloak database data into the new database instance.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f - \u003c\u003cEOF apiVersion: v1 kind: Pod metadata: name: my-load-dump namespace: keycloak labels: job-name: load-dump spec: containers: - name: mysqlsh-load-dump image: ghcr.io/verrazzano/mysql-server:8.0.32 volumeMounts: - mountPath: /var/lib/dump name: keycloak-dump volumes: - name: keycloak-dump persistentVolumeClaim: claimName: dump-claim EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Start a shell session inside the pod, and then run these commands: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl exec -n keycloak my-load-dump -it -- /bin/bash    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  a. Fix the dump directory permission. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ chown -R 27:27 /var/lib/dump    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  b. Check if the MySQL server is running. If it is not running, check if the MySQL pods in the keycloak namespace are ready, and then check again. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ mysqladmin ping -h\"mysql.keycloak.svc.cluster.local\" -p{{ .RootPassword }} # Sample Output mysqld is alive    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  c. Migrate the Keycloak data. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ mysqlsh -u root -p{{ .RootPassword }} -h mysql.keycloak.svc.cluster.local -e 'util.loadDump(\"/var/lib/dump/dump\", {includeSchemas: [\"keycloak\"], includeUsers: [\"keycloak\"], loadUsers: true})'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n# Sample Output Loading DDL, Data and Users from '/var/lib/dump/dump' using 4 threads. Opening dump... Target is MySQL 8.0.32. Dump was produced from MySQL 8.0.29 Scanning metadata - done Checking for pre-existing objects... Executing common preamble SQL Executing DDL - done Executing user accounts SQL... NOTE: Skipping CREATE/ALTER USER statements for user 'root'@'%' NOTE: Skipping CREATE/ALTER USER statements for user 'root'@'localhost' NOTE: Skipping GRANT statements for user 'root'@'%' NOTE: Skipping GRANT statements for user 'root'@'localhost' Executing view DDL - done Starting data load 4 thds loading \\ 100% (159.79 KB / 159.79 KB), 0.00 B/s, 33 / 93 tables done Recreating indexes - done Executing common postamble SQL 93 chunks (1.31K rows, 159.79 KB) for 93 tables in 1 schemas were loaded in 3 sec (avg throughput 159.79 KB/s) 0 warnings were reported during the load.   In the db-migration secret, add a db-migrated field and set its value to true (base64 encoded). This will notify the Verrazzano platform operator that the Keycloak data was migrated manually. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ k edit secret -n keycloak db-migration # Sample Output data: db-migrated: dHJ1ZQ== # true base64 encoded is dHJ1ZQ== database-dumped: dHJ1ZQ== deployment-found: dHJ1ZQ== ...    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the load-dump pod. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete pod -n keycloak my-load-dump    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Related information  Platform Setup Kubernetes Troubleshooting MySQL Troubleshooting  ","categories":"","description":"Analysis detected a failure when migrating Keycloak data","excerpt":"Analysis detected a failure when migrating Keycloak data","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/keycloakdatamigrationfailure/","tags":"","title":"Keycloak Data Migration Failure"},{"body":"This document shows how you can modify Verrazzano to customize your installation.\nVerrazzano resource The Verrazzano resource controls the installation of Verrazzano in a cluster. The life cycle of this custom resource controls the life cycle of Verrazzano. You can apply customizations to Verrazzano by modifying the specification of this resource. The following is an example of a Verrazzano resource without extra configurations.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Edit the Verrazzano resource The following sections show you how to modify the Verrazzano resource.\nPre-Installation Before you install Verrazzano, you can define a Verrazzano resource manifest file that can be supplied at installation time. The following is an example of a Verrazzano manifest file that enables two Verrazzano components, argoCD and velero, that are disabled by default.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev components: argoCD: enabled: true velero: enabled: true    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  You can save this manifest file and supply it to the Verrazzano CLI at installation time.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz install -f verrazzano.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  For detailed installation instructions, see the Install Guide.\nPost-Installation Also, you can modify the Verrazzano resource after it has been installed. Updates to the Verrazzano resource will be reflected in the cluster. You must get the name of the Verrazzano resource to be able to edit it in the cluster. Verrazzano allows only one custom resource to exist per cluster.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get vz -A # Sample output NAMESPACE NAME AVAILABLE STATUS VERSION default example-verrazzano 24/24 InstallComplete 1.5.0    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  After you have the name of the Verrazzano resource, you can edit its manifest file. The kubectl edit command lets you directly edit any API resource on the cluster. For more information on kubectl edit, see the kubectl edit documentation.\nThe following example edits the Verrazzano resource found in the previous sample output.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl edit vz example-verrazzano    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  NOTE Enabling components post-installation is supported, whereas disabling components post-installation is not supported.  Customization options Verrazzano supplies a variety of customization options.\nThe following section illustrates a generic overview of the customization options available using the Verrazzano API.\nComponent features Each component has two main fields, enabled and overrides.\n The enabled field lets you selectively install components with the Verrazzano installation. The overrides field lets you supply custom value overrides to the underlying Helm charts for that component.  The format of these fields is as follows.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev components: argoCD: enabled: true overrides: - values: global: podLabels: example: label    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"Modify and customize Verrazzano installations","excerpt":"Modify and customize Verrazzano installations","ref":"/docs/setup/modify-installation/","tags":"","title":"Modify Verrazzano Installations"},{"body":"Summary Analysis detected that the Verrazzano installation failed while creating the load balancer for the NGINX Ingress Controller.\nThe root cause was that, while creating the public load balancer, there were no public subnets available.\nSteps Refer to the platform-specific environment setup for your platform here.\nRelated information  Platform Setup Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected NGINX Ingress Controller load balancer was not created successfully","excerpt":"Analysis detected NGINX Ingress Controller load balancer was not created successfully","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/nginxloadbalancercreationissue/","tags":"","title":"NGINX Ingress Controller Load Balancer Creation Issue"},{"body":"If you encounter a problem with the OCNE clusters created in the console (using the clusterAPI component), here are some techniques you can use to diagnose and solve the issue.\nAnalyze the cluster Use the vz analyze command-line tool to analyze the cluster or cluster snapshot and receive reports on any issues. For more information on vz analyze, see Analyze Verrazzano Clusters.\nIssues related to the clusterAPI component will appear in these reports:\n Cluster API (CAPI) Issues Rancher Issues (some Rancher issues are not clusterAPI related)  Assess the condition of the clusterAPI component You can gather information about the clusterAPI component by reviewing its log files and by checking the status of clusterAPI custom resources on the admin cluster. In the console, the admin cluster is the local cluster.\nReview clusterAPI log files\nThe clusterAPI component creates four clusterAPI pods within the verrazzano-capi namespace and each pod generates a separate log file. Review the log files to determine the cause of the issue.\nTo view the clusterAPI controller log file, use the following command:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs -n verrazzano-capi -l cluster.x-k8s.io/provider=cluster-api    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   To view the clusterAPI OCI provider log file, use the following command:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs -n verrazzano-capi -l cluster.x-k8s.io/provider=infrastructure-oci    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   To view the clusterAPI control plane provider log file, use the following command:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs -n verrazzano-capi -l cluster.x-k8s.io/provider=control-plane-ocne    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   To view the clusterAPI bootstrap provider log file, use the following command:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs -n verrazzano-capi -l cluster.x-k8s.io/provider=bootstrap-ocne    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   Review clusterAPI Kubernetes custom resources\nOn the admin cluster, use kubectl to check the status of the clusterAPI custom resource.\nTo see the status of the clusterAPI Kubernetes custom resource cluster, use the following command:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get clusters.cluster.x-k8s.io -A    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The cluster status should be Provisioned.\nTo see the status of the clusterAPI Kubernetes custom resource machine, use the following command:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get machines -A    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The status of each machine should be Running.\nVerify the status of OCI resources When creating clusters, Verrazzano creates the following resources in the associated OCI compartment:\n A network load balancer Compute instances for each control plane node and worker node  If one of these resources was not created, or was created but is now experiencing issues, it can affect the rest of the cluster.\nYou can check the status of the required OCI resources in the OCI console or by reviewing the log files for the clusterAPI controller.\nCauses may include:\n  OCI resource limits were reached: Cluster creation will fail if it needs to create more resources than allowed by your OCI tenancy. Check your OCI service limits to see if you exceeded its limits. If you need to request a service limit increase, see Requesting a Service Limit Increase.\n  Connectivity issues: Make sure your virtual cloud network is configured properly. See Configure a VCN for OCNE for recommendations.\n  The network load balancer is in a critical state: The network load balancer may temporarily enter a critical state during initial cluster creation until the Kubernetes API server is up. If it remains in a critical state, then one of the following issues may have occurred:\n  Traffic between the network load balancer and the OCNE control plane node is blocked over port 6443.\n  The OCNE API server did not start, possibly because OCNE dependencies failed to install.\n    Node creation failed:\n  The OCI credentials are invalid: Check for errors under Kubernetes events in the namespace where cluster objects are present or in the OCI provider log file.\n  The Image ID used to deploy templates is invalid.\n  Worker nodes only: Worker nodes began provisioning after the control node plane entered the Running state.\n If OCNE dependencies failed to install on the control plane node, worker nodes remain in the Pending state and do not get created. Check the cloud-init log files on the control plane nodes to determine the cause.      Also, you should confirm that pods are running on the workload cluster. From the console, download the kubeconfig file for the workload cluster and run the following command:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl --kubeconfig \u003cworkload-cluster-kubeconfig\u003e get pods -A    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   If the status of any of the pods is not Running, run the following command to identify the error:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl describe pod \u003cpod-name\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   NOTE You can also refer to the Cluster API documentation for generic information on troubleshooting and known issues. Be aware that because the clusterAPI component is specific to Verrazzano, certain issues or solutions may not apply.  ","categories":"","description":"Troubleshoot issues when creating OCNE clusters","excerpt":"Troubleshoot issues when creating OCNE clusters","ref":"/docs/troubleshooting/troubleshooting-clusterapi/","tags":"","title":"OCNE Cluster Creation Issues"},{"body":"Summary Analysis detected that there were pods which were in a pending state without detecting other specific issues related to them.\nSteps Review the analysis data. At a minimum, this should indicate which pods are being impacted and it might give other clues on the root cause.\nRelated information  Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected pods in a pending state","excerpt":"Analysis detected pods in a pending state","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/pendingpods/","tags":"","title":"Pending Pods"},{"body":"Summary Analysis detected that there were pods which were not in a running, succeeded, or pending state.\nThe analysis was not able to determine a specific root cause, however, it might have supplied data that is related to the pods in question. The root cause might be obvious from the supporting data, but the analysis tool isn’t isolating the specific scenario yet.\nSteps Review the analysis data. At a minimum, it should indicate which pods are being impacted and it might give other clues on the root cause.\nRelated information  Kubernetes Troubleshooting  ","categories":"","description":"Analysis detected pods with potential issues","excerpt":"Analysis detected pods with potential issues","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/podproblemsnotreported/","tags":"","title":"Problem Pods"},{"body":"Summary Analysis detected that one or more Rancher resources are in a failure state. See the following sections for details:\n Applications Catalogs Cluster Drivers Fleet Bundle Fleet Bundled Deployment Fleet Clusters Fleet Cluster Groups Fleet Cluster Registration Fleet Git Repository Git Jobs Helm Repositories Managed Charts Managed Clusters Nodes Provisioning Clusters  Applications app.catalog.cattle.io Analysis detected an issue with the deployment of a Helm chart.\nCatalogs catalog.management.cattle.io Analysis detected an issue with the configuration of a catalog of application templates.\nCluster Drivers kontainerdriver.management.cattle.io Analysis detected that a KontainerDriver resource was not in a ready state. A ready KontainerDriver resource will have a status with condition types Active, Downloaded, and Installed set to True.\nFleet Bundle bundle.fleet.cattle.io Analysis detected an issue with the status of a Fleet bundle. The Fleet bundle resources are automatically created when a Fleet Git repository resource is created.\nFleet Bundled Deployment bundledeployment.fleet.cattle.io Analysis detected an issue with the status of a Fleet bundled deployment.\nFleet Clusters cluster.fleet.cattle.io Analysis detected an issue with the status of a cluster managed with Fleet.\nFleet Cluster Groups clustergroup.fleet.cattle.io Analysis detected an issue with the status of a cluster group managed with Fleet.\nFleet Cluster Registration clusterregistration.fleet.cattle.io Analysis detected an issue with the registration status of a cluster managed with Fleet.\nFleet Git Repository gitrepo.fleet.cattle.io Analysis detected an issue with the configuration of a Git repository for continuous delivery.\nGit Jobs gitjob.gitjob.cattle.io Analysis detected an issue with the status of a Kubernetes job that is configured to be launched based on a Git event.\nHelm Repositories clusterrepo.catalog.cattle.io Analysis detected that a Helm repository has not successfully downloaded.\nManaged Charts managedchart.management.cattle.io Analysis detected an issue with the status of a managed chart.\nManaged Clusters cluster.management.cattle.io Analysis detected that a cluster managed by Rancher is not ready. The state of the cluster will display Active on the home screen when it is available to be managed with Rancher.\nThere are interim states, such as Provisioning and Waiting, that may be displayed before a cluster becomes Active. The interim states typically show additional information, such as Waiting for cluster to be ready.\nNodes node.management.cattle.io Analysis detected that a node within the cluster is not ready.\nThere are interim states, such as Provisioning and Updating, that may be displayed before a node becomes Active.\nProvisioning Clusters cluster.provisioning.cattle.io Analysis detected that a cluster being provisioned by Rancher is not ready. Clusters are provisioned by cluster drivers. The state of the cluster will display Active on the home screen when it is available to be managed with Rancher.\nThere are interim states, such as Provisioning and Waiting, that may be displayed before a cluster becomes Active. The interim states typically show additional information, such as Waiting for cluster to be ready.\nSteps Review the Rancher logs in the cattle-system namespace for additional details about why there is a Rancher issue.\nRelated information  Rancher Troubleshooting Rancher Fleet Troubleshooting  ","categories":"","description":"Analysis detected a Rancher issue","excerpt":"Analysis detected a Rancher issue","ref":"/docs/troubleshooting/diagnostictools/analysisadvice/rancherissues/","tags":"","title":"Rancher Issues"},{"body":"To search Verrazzano logs, you can use the Oracle Cloud Infrastructure Console, Oracle Cloud Infrastructure CLI, or Oracle Cloud Infrastructure SDK.\nFor example, use the Oracle Cloud Infrastructure CLI to search the system logs for records emitted by the verrazzano-application-operator container: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ oci logging-search search-logs --search-query=\\ \"search \\\"ocid1.compartment.oc1..example/ocid1.loggroup.oc1.iad.example/ocid1.log.oc1.iad.example\\\" | \\ where \\\"data\\\".\\\"kubernetes.container_name\\\" = 'verrazzano-application-operator' | sort by datetime desc\" \\ --time-start 2021-12-07 --time-end 2021-12-17    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nSearch for all application log records in the springboot namespace: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ oci logging-search search-logs --search-query=\\ \"search \\\"ocid1.compartment.oc1..example/ocid1.loggroup.oc1.iad.example/ocid1.log.oc1.iad.example\\\" | \\ where \\\"data\\\".\\\"kubernetes.namespace_name\\\" = 'springboot' | sort by datetime desc\" \\ --time-start 2021-12-07 --time-end 2021-12-17    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor more information on searching logs, see the Logging Query Language Specification.\n","categories":"","description":"Explore ways to search log records","excerpt":"Explore ways to search log records","ref":"/docs/observability/logging/search/","tags":"","title":"Search Log Records"},{"body":"Before you begin Install Verrazzano by following the installation instructions.\nNOTE: The Spring Boot example application deployment files are contained in the Verrazzano project located at \u003cVERRAZZANO_HOME\u003e/examples/springboot-app, where VERRAZZANO_HOME is the root of the Verrazzano project.\nDeploy the application This example provides a simple web application developed using Spring Boot. For more information and the source code of this application, see the Verrazzano Examples.\nNOTE To run this application in the default namespace:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl label namespace default verrazzano-managed=true istio-injection=enabled    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If you chose the default namespace, you can skip Step 1 and ignore the -n option in the rest of the commands.\n   Create a namespace for the Spring Boot application and add a label identifying the namespace as managed by Verrazzano. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create namespace springboot $ kubectl label namespace springboot verrazzano-managed=true istio-injection=enabled    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  To deploy the application, apply the Spring Boot OAM resources. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/springboot-app/springboot-comp.yaml -n springboot $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/springboot-app/springboot-app.yaml -n springboot    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the Spring Boot application to be ready. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl wait \\ --for=condition=Ready pods \\ --all \\ -n springboot \\ --timeout=300s    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Explore the application   Get the generated host name for the application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ HOST=$(kubectl get gateways.networking.istio.io \\ -n springboot \\ -o jsonpath='{.items[0].spec.servers[0].hosts[0]}') $ echo $HOST # Sample output springboot-appconf.springboot.11.22.33.44.nip.io    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the EXTERNAL_IP address of the istio-ingressgateway service. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ADDRESS=$(kubectl get service \\ -n istio-system istio-ingressgateway \\ -o jsonpath='{.status.loadBalancer.ingress[0].ip}') $ echo $ADDRESS # Sample output 11.22.33.44    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access the application.\n  Using the command line code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # The expected response of this query is the HTML of a web page $ curl -sk \\ https://${HOST} \\ --resolve ${HOST}:443:${ADDRESS} $ curl -sk \\ https://${HOST}/facts \\ --resolve ${HOST}:443:${ADDRESS} # Sample output In 1524, Verrazzano became the first European to enter the New York Harbor and the Hudson River.    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf you are using nip.io, then you do not need to include --resolve.\n  Local testing with a browser\nTemporarily, modify the /etc/hosts file (on Mac or Linux) or c:\\Windows\\System32\\Drivers\\etc\\hosts file (on Windows 10), to add an entry mapping the host name to the ingress gateway’s EXTERNAL-IP address. For example:\n11.22.33.44 springboot.example.com Then, you can access the application in a browser at https://springboot.example.com/ and https://springboot.example.com/facts.\n If you are using nip.io, then you can access the application in a browser using the HOST variable (for example, https://${HOST}/facts). If you are going through a proxy, you may need to add *.nip.io to the NO_PROXY list.    Using your own DNS name\nPoint your own DNS name to the ingress gateway’s EXTERNAL-IP address.\n  In this case, you would need to have edited the springboot-app.yaml file to use the appropriate value under the hosts section (such as yourhost.your.domain), before deploying the Spring Boot application.\n  Then, you can use a browser to access the application at https://\u003cyourhost.your.domain\u003e/ and https://\u003cyourhost.your.domain\u003e/facts.\nThe actuator endpoint is accessible under the path /actuator and the Prometheus endpoint exposing metrics data in a format that can be scraped by a Prometheus server is accessible under the path /actuator/prometheus.\n      A variety of endpoints associated with the deployed application are available to further explore the logs, metrics, and such. You can access them according to the directions here.\n  Undeploy the application   To undeploy the application, delete the Spring Boot OAM resources. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/springboot-app/springboot-app.yaml -n springboot $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/springboot-app/springboot-comp.yaml -n springboot    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the namespace springboot after the application pod is terminated. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete namespace springboot    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"A Spring Boot-based simple web application","excerpt":"A Spring Boot-based simple web application","ref":"/docs/examples/microservices/spring-boot/","tags":"","title":"Spring Boot"},{"body":"Kubernetes cluster monitors are in a DOWN state When viewing targets in the Prometheus console, some Kubernetes cluster monitors may be down (kube-etcd, kube-proxy, and such). This is likely caused by the configuration of the Kubernetes cluster itself. Depending on the type of cluster, certain metrics may be disabled by default. Enabling metrics is cluster dependent; for details, refer to the documentation for your cluster type.\nFor example, to enable kube-proxy metrics on Kind clusters, edit the kube-proxy ConfigMap. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl edit cm/kube-proxy -n kube-system    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nReplace the metricsBindAddress value with the following and save the ConfigMap. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  metricsBindAddress: 0.0.0.0:10249    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThen, restart the kube-proxy pods. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete pod -l k8s-app=kube-proxy -n kube-system    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nFor more information, see this GitHub issue.\nMetrics Trait Service Monitor not discovered Metrics Traits use Service Monitors which require a Service to collect metrics. If your OAM workload is created with a Metrics Trait and no Ingress Trait, a Service might not be generated for your workload and will need to be created manually.\nThis troubleshooting example uses the hello-helidon application.\nVerify a Service Monitor exists for your application workload. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get servicemonitors -n hello-helidon    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nVerify a Service exists for your application workload. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get services -n hello-helidon    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf no Service exists, create one manually. This example uses the default Prometheus port. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: v1 kind: Service metadata: name: hello-helidon-service namespace: hello-helidon spec: selector: app: hello-helidon ports: - name: tcp-hello-helidon port: 8080 protocol: TCP targetPort: 8080    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAfter you’ve completed these steps, you can verify metrics collection has succeeded.\nMetrics queries no longer return metrics If Prometheus storage reaches capacity, then metrics queries will no longer return results. Check the Prometheus logs.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs -l app.kubernetes.io/instance=prometheus-operator-kube-p-prometheus -n verrazzano-monitoring    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If there are messages indicating that the disk is full, then it will be necessary to either expand the storage or free disk space. If the default storage class supports volume expansion, then you can attempt to expand the volume.\nCheck if the default storage class allows volume expansion.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get storageclass    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If the default storage class allows expansion, then modify the persistent volume claim and the Prometheus resource storage request to use the larger size.\nFor example, to increase the storage to 100 Gi:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl patch pvc prometheus-prometheus-operator-kube-p-prometheus-db-prometheus-prometheus-operator-kube-p-prometheus-0 -n verrazzano-monitoring \\ --type=merge -p '{\"spec\":{\"resources\":{\"requests\":{\"storage\":\"100Gi\"}}}}' $ kubectl patch prometheus prometheus-operator-kube-p-prometheus -n verrazzano-monitoring \\ --type=merge -p '{\"spec\":{\"storage\":{\"volumeClaimTemplate\":{\"spec\":{\"resources\":{\"requests\":{\"storage\":\"100Gi\"}}}}}}}'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Alternatively, delete existing metrics data in the Prometheus pods to free space.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl exec statefulset.apps/prometheus-prometheus-operator-kube-p-prometheus -n verrazzano-monitoring -- rm -fr /prometheus/wal $ kubectl rollout restart statefulset.apps/prometheus-prometheus-operator-kube-p-prometheus -n verrazzano-monitoring    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  For information on how to configure Prometheus data retention settings to avoid filling up persistent storage in the Prometheus pods, see Configure data retention settings.\n","categories":"","description":"Troubleshoot Prometheus issues","excerpt":"Troubleshoot Prometheus issues","ref":"/docs/observability/monitoring/troubleshooting-prometheus/","tags":"","title":"Troubleshoot Prometheus Issues"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/applications/oam/traits/","tags":"","title":"Verrazzano Application Traits"},{"body":"Verrazzano provides a proxy that enables authentication and authorization for Keycloak users accessing Verrazzano resources. This proxy is automatically configured and deployed.\nKubernetes API The Verrazzano authentication proxy is used to authenticate and authorize Keycloak users, then impersonate them to the Kubernetes API, so that Keycloak users can access Kubernetes resources.\nThis capability is used primarily by the Verrazzano Console. The Console authenticates users against Keycloak, using the PKCE flow, obtains a bearer token, and then sends the token to the API along with the Kubernetes API request. The API proxy validates the token and, if valid, impersonates the user to the Kubernetes API server. This allows the Console to run Kubernetes API calls on behalf of Keycloak users, with Kubernetes enforcing role-based access control (RBAC) based on the impersonated identity.\nIn multicluster scenarios, the Console directs all Kubernetes API requests to the admin cluster’s authentication proxy. If a request refers to a resource in a different cluster, the authentication proxy forwards the request, along with the user’s authentication token, to the authentication proxy running in the remote cluster.\nSingle Sign-On (SSO) The Verrazzano authentication proxy provides SSO across the Verrazzano Console and the Verrazzano Monitoring Instance (VMI) logging and metrics consoles. When an unauthenticated request is received by the proxy, it runs the OIDC PKCE authentication flow to obtain tokens for the user. If the user is already authenticated to Keycloak (because they have already accessed either the Verrazzano Console or another VMI component), Keycloak returns tokens based on the existing user session, and the process is transparent to the user. If not, Keycloak will authenticate the user, establishing a session, before returning tokens.\n","categories":"","description":"Learn about the Verrazzano authentication proxy","excerpt":"Learn about the Verrazzano authentication proxy","ref":"/docs/security/proxies/","tags":"","title":"Verrazzano Authentication Proxy"},{"body":"Packages:\n  install.verrazzano.io/v1alpha1   install.verrazzano.io/v1alpha1   Resource Types:  Verrazzano  Verrazzano   Verrazzano specifies the Verrazzano API.\n    Field Description      apiVersion string   install.verrazzano.io/v1alpha1      kind string  Verrazzano    metadata  Kubernetes meta/v1.ObjectMeta     Refer to the Kubernetes API documentation for the fields of the metadata field.     spec  VerrazzanoSpec          components  ComponentSpec     (Optional) The Verrazzano components.\n    defaultVolumeSource  Kubernetes core/v1.VolumeSource     (Optional) Defines the type of volume to be used for persistence for all components unless overridden, and can be one of either EmptyDirVolumeSource or PersistentVolumeClaimVolumeSource. If PersistentVolumeClaimVolumeSource is declared, then the claimName must reference the name of an existing VolumeClaimSpecTemplate declared in the volumeClaimSpecTemplates section.\n    environmentName  string    (Optional) Name of the installation. This name is part of the endpoint access URLs that are generated. The default value is default.\n    profile  ProfileType     (Optional) The installation profile to select. Valid values are prod (production), dev (development), and managed-cluster. The default is prod.\n    security  SecuritySpec     (Optional) Security specifies Verrazzano security configuration.\n    version  string    (Optional) The version to install. Valid versions can be found here. Defaults to the current version supported by the Verrazzano platform operator.\n    volumeClaimSpecTemplates  []VolumeClaimSpecTemplate     (Optional) Defines a named set of PVC configurations that can be referenced from components to configure persistent volumes.\n       status  VerrazzanoStatus         Acme   (Appears on:Certificate)  Deprecated. Acme identifies the LetsEncrypt cert issuer.\n    Field Description      emailAddress  string    (Optional) Email address of the user.\n    environment  string    (Optional) Environment.\n    provider  ProviderType     Name of the Acme provider.\n    ApplicationOperatorComponent   (Appears on:ComponentSpec)  ApplicationOperatorComponent specifies the Application Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then Application Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    ArgoCDComponent   (Appears on:ComponentSpec)  ArgoCDComponent specifies the Argo CD configuration.\n    Field Description      enabled  bool    (Optional) If true, then Argo CD will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    AuthProxyComponent   (Appears on:ComponentSpec)  AuthProxyComponent specifies the AuthProxy configuration.\n    Field Description      enabled  bool    (Optional) If true, then AuthProxy will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    kubernetes  AuthProxyKubernetesSection     (Optional) The Kubernetes resources that can be configured for AuthProxy.\n    AuthProxyKubernetesSection   (Appears on:AuthProxyComponent)  AuthProxyKubernetesSection specifies the Kubernetes resources that can be customized for AuthProxy.\n    Field Description      replicas  uint32     (Inlined from CommonKubernetesSpec.) (Optional) Specifies the number of pod instances to run.\n    affinity  Kubernetes core/v1.Affinity      (Inlined from CommonKubernetesSpec.) (Optional) Specifies the group of affinity scheduling rules.\n    CA   (Appears on:Certificate)  CA - Deprecated. Identifies the Certificate Authority cert issuer.\n    Field Description      clusterResourceNamespace  string    The secret namespace.\n    secretName  string    The secret name.\n    CAIssuer   (Appears on:ClusterIssuerComponent, IssuerConfig)  CAIssuer Identifies the configuration used for the Certificate Authority issuer\n    Field Description      secretName  string    The secret name.\n    CertManagerComponent   (Appears on:ComponentSpec)  CertManagerComponent specifies the cert-manager configuration.\n    Field Description      certificate  Certificate     (Optional) Deprecated. Use the ClusterIssuerComponent to configure the Verrazzano ClusterIssuer instead\n    enabled  bool    (Optional) If true, then cert-manager will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    CertManagerOCIDNSWebhookSolver   CertManagerOCIDNSWebhookSolver specifies installation overrides for the CertManager OCI DNS solver webhook; the webhook is automatically installed when OCI DNS is configured for the Verrazzano installation\n    Field Description      monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    CertManagerWebhookOCIComponent   (Appears on:ComponentSpec)  CertManagerWebhookOCIComponent configures the CertManager OCI DNS solver webhook; the webhook is required for LetsEncrypt Certificates using OCI DNS\n    Field Description      enabled  bool    (Optional) Enabled will deploy the webhook if true, or if the LetsEncrypt issuer is configured with OCI DNS\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    Certificate   (Appears on:CertManagerComponent)  Certificate - Deprecated. Represents the type of cert issuer for an installation.\n    Field Description      acme  Acme     (Optional) The LetsEncrypt configuration. Either acme or ca must be specified.\n    ca  CA     (Optional) The LetsEncrypt configuration. Either acme or ca must be specified.\n    ClusterAPIComponent   (Appears on:ComponentSpec)  ClusterAPIComponent specifies the Cluster API configuration.\n    Field Description      enabled  bool    (Optional) If true, then Cluster API Providers will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    ClusterAgentComponent   (Appears on:ComponentSpec)  ClusterAgentComponent configures the Cluster Agent\n    Field Description      enabled  bool    (Optional) If true, then Cluster Agent will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    ClusterIssuerComponent   (Appears on:ComponentSpec)  ClusterIssuerComponent configures the Verrazzano ClusterIssuer\n    Field Description      enabled  bool    (Optional) Enabled indicates that Verrazzano ClusterIssuer shall be configured\n    clusterResourceNamespace  string    The clusterResourceNamespace configured for the Verrazzano Cert-Manager instance; if an externally-managed Cert-Manager is being used with a non-default location, this should point to the clusterResourceNamespace used by that installation. See the Cert-Manager documentation details on this namespace.\n    letsEncrypt  LetsEncryptACMEIssuer      (Inlined from IssuerConfig.) (Optional) The certificate configuration.\n    ca  CAIssuer      (Inlined from IssuerConfig.) (Optional) The certificate configuration.\n    ClusterOperatorComponent   (Appears on:ComponentSpec)  ClusterOperatorComponent specifies the Cluster Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then the Cluster Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    CoherenceOperatorComponent   (Appears on:ComponentSpec)  CoherenceOperatorComponent specifies the Coherence Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then Coherence Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    CommonKubernetesSpec   Kubernetes resources that are common to a subgroup of components.\n    Field Description      replicas  uint32    (Optional) Specifies the number of pod instances to run.\n    affinity  Kubernetes core/v1.Affinity     (Optional) Specifies the group of affinity scheduling rules.\n    CompStateType (string alias)  (Appears on:ComponentStatusDetails)  CompStateType identifies the state of a component.\n    Value Description   \"Disabled\"\n CompStateDisabled is the state for when a component is not currently installed\n \"Error\"\n CompStateError is the state when a Verrazzano resource has experienced an error that may leave it in an unstable state\n \"Failed\"\n CompStateFailed is the state when an install/uninstall/upgrade has failed\n \"Installing\"\n CompStateInstalling is the state when an install is in progress\n \"PreInstalling\"\n CompStatePreInstalling is the state when an install is about to be started\n \"Ready\"\n CompStateReady is the state when a Verrazzano resource can perform an uninstall or upgrade\n \"Uninstalled\"\n CompStateUninstalled is the state when a component has been uninstalled\n \"Uninstalling\"\n CompStateUninstalling is the state when an uninstall is in progress\n \"Upgrading\"\n CompStateUpgrading is the state when an upgrade is in progress\n   ComponentAvailability (string alias)  (Appears on:ComponentStatusDetails)  ComponentAvailability identifies the availability of a Verrazzano Component.\n ComponentSpec   (Appears on:VerrazzanoSpec)  ComponentSpec contains a set of components used by Verrazzano.\n    Field Description      applicationOperator  ApplicationOperatorComponent     (Optional) The Application Operator component configuration.\n    argoCD  ArgoCDComponent     (Optional) The Argo CD component configuration.\n    authProxy  AuthProxyComponent     (Optional) The AuthProxy component configuration.\n    clusterAPI  ClusterAPIComponent     (Optional) The ClusterAPI component configuration.\n    clusterAgent  ClusterAgentComponent     (Optional) The ClusterAgent configuration.\n    clusterIssuer  ClusterIssuerComponent     (Optional) ClusterIssuer defines the Cert-Manager ClusterIssuer configuration for Verrazzano\n    certManager  CertManagerComponent     (Optional) The Verrazzano-managed Cert-Manager component configuration; note that this is mutually exclusive of the ExternalCertManager component\n    certManagerWebhookOCI  CertManagerWebhookOCIComponent     (Optional) CertManagerWebhookOCI configures the Verrazzano OCI DNS webhook plugin for Cert-Manager\n    clusterOperator  ClusterOperatorComponent     (Optional) The Cluster Operator component configuration.\n    coherenceOperator  CoherenceOperatorComponent     (Optional) The Coherence Operator component configuration.\n    console  ConsoleComponent     (Optional) The Verrazzano Console component configuration.\n    dns  DNSComponent     (Optional) The DNS component configuration.\n    elasticsearch  ElasticsearchComponent     (Optional) The Elasticsearch component configuration.\n    fluentd  FluentdComponent     (Optional) The Fluentd component configuration.\n    fluentOperator  FluentOperatorComponent     (Optional) The FluentOperator component configuration.\n    fluentbitOpensearchOutput  FluentbitOpensearchOutputComponent     (Optional) The FluentbitOpensearchOutput component configuration.\n    grafana  GrafanaComponent     (Optional) The Grafana component configuration.\n    ingress  IngressNginxComponent     (Optional) The ingress NGINX component configuration.\n    istio  IstioComponent     (Optional) The Istio component configuration.\n    jaegerOperator  JaegerOperatorComponent     (Optional) The Jaeger Operator component configuration.\n    kiali  KialiComponent     (Optional) The Kiali component configuration.\n    kibana  KibanaComponent     (Optional) The Kibana component configuration.\n    keycloak  KeycloakComponent     (Optional) The Keycloak component configuration.\n    kubeStateMetrics  KubeStateMetricsComponent     (Optional) The kube-state-metrics component configuration.\n    mySQLOperator  MySQLOperatorComponent     (Optional) The MySQL Operator component configuration.\n    oam  OAMComponent     (Optional) The OAM component configuration.\n    prometheus  PrometheusComponent     (Optional) The Prometheus component configuration.\n    prometheusAdapter  PrometheusAdapterComponent     (Optional) The Prometheus Adapter component configuration.\n    prometheusNodeExporter  PrometheusNodeExporterComponent     (Optional) The Prometheus Node Exporter component configuration.\n    prometheusOperator  PrometheusOperatorComponent     (Optional) The Prometheus Operator component configuration.\n    prometheusPushgateway  PrometheusPushgatewayComponent     (Optional) The Prometheus Pushgateway component configuration.\n    rancher  RancherComponent     (Optional) The Rancher component configuration.\n    rancherBackup  RancherBackupComponent     (Optional) The rancherBackup component configuration.\n    thanos  ThanosComponent     (Optional) The Thanos component configuration.\n    velero  VeleroComponent     (Optional) The Velero component configuration.\n    verrazzano  VerrazzanoComponent     (Optional) The Verrazzano component configuration.\n    weblogicOperator  WebLogicOperatorComponent     (Optional) The WebLogic Kubernetes Operator component configuration.\n    ComponentStatusDetails   ComponentStatusDetails defines the observed state of a component.\n    Field Description      available  ComponentAvailability     Whether a component is available for use.\n    conditions  []Condition     Information about the current state of a component.\n    lastReconciledGeneration  int64    The generation of the last Verrazzano resource the Component was successfully reconciled against.\n    name  string    Name of the component.\n    reconcilingGeneration  int64    The generation of the Verrazzano resource the Component is currently being reconciled against.\n    state  CompStateType     The state of a component.\n    version  string    The version of a component.\n    ComponentStatusMap (map[string]*github.com/verrazzano/verrazzano/platform-operator/apis/verrazzano/v1alpha1.ComponentStatusDetails alias)  (Appears on:VerrazzanoStatus)  ComponentStatusMap is a map of components status details.\n ComponentValidator    Condition   (Appears on:ComponentStatusDetails, VerrazzanoStatus)  Condition describes the current state of an installation.\n    Field Description      lastTransitionTime  string    Last time the condition transitioned from one status to another.\n    message  string    Human readable message indicating details about the last transition.\n    status  Kubernetes core/v1.ConditionStatus     Status of the condition: one of True, False, or Unknown.\n    type  ConditionType     Type of condition.\n    ConditionType (string alias)  (Appears on:Condition)  ConditionType identifies the condition of the install, uninstall, or upgrade, which can be checked with kubectl wait.\n    Value Description   \"InstallComplete\"\n CondInstallComplete means the install job has completed its execution successfully\n \"InstallFailed\"\n CondInstallFailed means the install job has failed during execution.\n \"InstallStarted\"\n CondInstallStarted means an install is in progress.\n \"PreInstall\"\n CondPreInstall means an install about to start.\n \"UninstallComplete\"\n CondUninstallComplete means the uninstall job has completed its execution successfully\n \"UninstallFailed\"\n CondUninstallFailed means the uninstall job has failed during execution.\n \"UninstallStarted\"\n CondUninstallStarted means an uninstall is in progress.\n \"UpgradeComplete\"\n CondUpgradeComplete means the upgrade has completed successfully\n \"UpgradeFailed\"\n CondUpgradeFailed means the upgrade has failed during execution.\n \"UpgradePaused\"\n CondUpgradePaused means that an upgrade has been paused awaiting a VZ version update.\n \"UpgradeStarted\"\n CondUpgradeStarted means that an upgrade has been started.\n   ConsoleComponent   (Appears on:ComponentSpec)  ConsoleComponent specifies the Verrazzano Console configuration.\n    Field Description      enabled  bool    (Optional) If true, then the Verrazzano Console will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    DNSComponent   (Appears on:ComponentSpec)  DNSComponent specifies the DNS configuration.\n    Field Description      external  External     (Optional) External DNS configuration.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    oci  OCI     (Optional) Oracle Cloud Infrastructure DNS configuration.\n    wildcard  Wildcard     (Optional) Wildcard DNS configuration. This is the default with a domain of nip.io.\n    DatabaseInfo   (Appears on:GrafanaComponent)  DatabaseInfo specifies the database connection information for the Grafana DB instance.\n    Field Description      host  string    The host of the database.\n    name  string    The name of the database.\n    ElasticsearchComponent   (Appears on:ComponentSpec)  ElasticsearchComponent specifies the Elasticsearch configuration.\n    Field Description      enabled  bool    (Optional) If true, then OpenSearch will be installed.\n    installArgs  []InstallArgs     (Optional) A list of values to use during the OpenSearch installation. Each argument is specified as either a name/value or name/valueList pair. For sample usage, see Customize OpenSearch.\n    nodes  []OpenSearchNode     (Optional) A list of OpenSearch node groups.\n    policies  []VMO /vmcontroller/v1.IndexManagementPolicy     A list of Index State Management policies to enable on OpenSearch.\n    plugins  VMO /vmcontroller/v1.OpenSearchPlugins     (Optional) Enable to add 3rd Party / Custom plugins not offered in the default OpenSearch image\n    disableDefaultPolicy  bool    To disable the default ISM policies.\n    External   (Appears on:DNSComponent)  External DNS type.\n    Field Description      suffix  string    The suffix for DNS names.\n    FluentOperatorComponent   (Appears on:ComponentSpec)  FluentOperatorComponent specifies the Fluent Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then the Fluent Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    FluentbitOpensearchOutputComponent   (Appears on:ComponentSpec)      Field Description      enabled  bool    (Optional) If true, then the FluentbitOpensearchOutput will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    FluentdComponent   (Appears on:ComponentSpec)  FluentdComponent specifies the Fluentd configuration.\n    Field Description      elasticsearchSecret  string    (Optional) The secret containing the credentials for connecting to OpenSearch. This secret needs to be created in the verrazzano-install namespace prior to creating the Verrazzano custom resource. Specify the OpenSearch login credentials in the username and password fields in this secret. Specify the CA for verifying the OpenSearch certificate in the ca-bundle field, if applicable. The default verrazzano is the secret for connecting to the VMI OpenSearch.\n    elasticsearchURL  string    (Optional) The target OpenSearch URLs. Specify this option in this format. The default http://vmi-system-es-ingest-oidc:8775 is the VMI OpenSearch URL.\n    enabled  bool    (Optional) If true, then Fluentd will be installed.\n    extraVolumeMounts  []VolumeMount     (Optional) A list of host path volume mounts, in addition to /var/log, into the Fluentd DaemonSet. The Fluentd component collects log files in the /var/log/containers directory of Kubernetes worker nodes. The /var/log/containers directory may contain symbolic links to files located outside the /var/log directory. If the host path directory containing the log files is located outside /var/log, the Fluentd DaemonSet must have the volume mount of that directory to collect the logs.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    oci  OciLoggingConfiguration     (Optional) The Oracle Cloud Infrastructure Logging configuration.\n    GrafanaComponent   (Appears on:ComponentSpec)  GrafanaComponent specifies the Grafana configuration.\n    Field Description      database  DatabaseInfo     (Optional) The information to configure a connection to an external Grafana database.\n    enabled  bool    (Optional) If true, then Grafana will be installed.\n    replicas  int32    (Optional) The number of pods to replicate. The default is 1.\n    smtp  VMO /vmcontroller/v1.SMTPInfo     (Optional) The SMTP notification settings.\n    IngressNginxComponent   (Appears on:ComponentSpec)  IngressNginxComponent specifies the ingress-nginx configuration.\n    Field Description      enabled  bool    (Optional) If true, then ingress NGINX will be installed.\n    ingressClassName  string    (Optional) Name of the ingress class used by the ingress controller. Defaults to verrazzano-nginx.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    nginxInstallArgs  []InstallArgs     (Optional) Arguments for installing NGINX.\n    ports  []Kubernetes core/v1.ServicePort     (Optional) The list of port configurations used by the ingress.\n    type  IngressType     (Optional) The ingress type. Valid values are LoadBalancer and NodePort. The default value is LoadBalancer. If the ingress type is NodePort, then a valid and accessible IP address must be specified using the controller.service.externalIPs key in NGINXInstallArgs. For sample usage, see External Load Balancers.\n    IngressType (string alias)  (Appears on:IngressNginxComponent, IstioIngressSection)  IngressType is the type of ingress.\n    Value Description   \"LoadBalancer\"\n LoadBalancer is an ingress type of LoadBalancer. This is the default value.\n \"NodePort\"\n NodePort is an ingress type of NodePort.\n   InstallArgs   (Appears on:ElasticsearchComponent, IngressNginxComponent, IstioComponent, KeycloakComponent, MySQLComponent, VerrazzanoComponent)  InstallArgs identifies a name/value or name/value list needed for the install. Value and ValueList cannot both be specified.\n    Field Description      name  string    Name of the install argument.\n    value  string    (Optional) Value for the named install argument.\n    setString  bool    (Optional) If the value is a literal string.\n    valueList  []string    (Optional) List of values for the named install argument.\n    InstallOverrides   InstallOverrides are used to pass installation overrides to components.\n    Field Description      monitorChanges  bool    (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides     (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    InstanceInfo   (Appears on:VerrazzanoStatus)  InstanceInfo details of installed Verrazzano instance maintained in status field.\n    Field Description      argoCDUrl  string    The Argo CD UI URL for this Verrazzano installation.\n    consoleUrl  string    The Console URL for this Verrazzano installation.\n    elasticUrl  string    The OpenSearch URL for this Verrazzano installation.\n    grafanaUrl  string    The Grafana URL for this Verrazzano installation.\n    jaegerUrl  string    The Jaeger UI URL for this Verrazzano installation.\n    keyCloakUrl  string    The KeyCloak URL for this Verrazzano installation.\n    kialiUrl  string    The Kiali URL for this Verrazzano installation.\n    kibanaUrl  string    The OpenSearch Dashboards URL for this Verrazzano installation.\n    prometheusUrl  string    The Prometheus URL for this Verrazzano installation.\n    rancherUrl  string    The Rancher URL for this Verrazzano installation.\n    thanosQueryUrl  string    The Thanos Query URL for this Verrazzano installation. The Thanos Query ingress gets forwarded to the Thanos Query Frontend service.\n    IssuerConfig   IssuerConfig identifies the configuration for the Verrazzano ClusterIssuer. Only one value may be set.\n    Field Description      letsEncrypt  LetsEncryptACMEIssuer     (Optional) The certificate configuration.\n    ca  CAIssuer     (Optional) The certificate configuration.\n    IstioComponent   (Appears on:ComponentSpec)  IstioComponent specifies the Istio configuration.\n    Field Description      egress  IstioEgressSection     (Optional) The Istio egress gateway configuration.\n    enabled  bool    (Optional) If true, then Istio will be installed.\n    ingress  IstioIngressSection     (Optional) The Istio ingress gateway configuration.\n    injectionEnabled  bool    (Optional) Istio sidecar injection enabled for installed components. Default is true.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    istioInstallArgs  []InstallArgs     (Optional) Arguments for installing Istio.\n    IstioEgressSection   (Appears on:IstioComponent)  IstioEgressSection specifies the specific configuration options available for the Istio egress gateways.\n    Field Description      kubernetes  IstioKubernetesSection     (Optional) The Kubernetes resources that can be configured for an Istio egress gateway.\n    IstioIngressSection   (Appears on:IstioComponent)  IstioIngressSection specifies the specific configuration options available for the Istio ingress gateways.\n    Field Description      type  IngressType     (Optional) The Istio ingress type. Valid values are LoadBalancer and NodePort. The default value is LoadBalancer. If the Istio ingress type is NodePort, then a valid and accessible IP address must be specified using the gateways.istio-ingressgateway.externalIPs key in IstioInstallArgs. For sample usage, see External Load Balancers.\n    ports  []Kubernetes core/v1.ServicePort     (Optional) The list port configurations used by the Istio ingress.\n    kubernetes  IstioKubernetesSection     (Optional) The Kubernetes resources that can be configured for an Istio ingress gateway.\n    IstioKubernetesSection   (Appears on:IstioEgressSection, IstioIngressSection)  IstioKubernetesSection specifies the Kubernetes resources that can be customized for Istio.\n    Field Description      replicas  uint32     (Inlined from CommonKubernetesSpec.) (Optional) Specifies the number of pod instances to run.\n    affinity  Kubernetes core/v1.Affinity      (Inlined from CommonKubernetesSpec.) (Optional) Specifies the group of affinity scheduling rules.\n    JaegerOperatorComponent   (Appears on:ComponentSpec)  JaegerOperatorComponent specifies the Jaeger Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then Jaeger Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    KeycloakComponent   (Appears on:ComponentSpec)  KeycloakComponent specifies the Keycloak configuration.\n    Field Description      enabled  bool    (Optional) If true, then Keycloak will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    keycloakInstallArgs  []InstallArgs     (Optional) Arguments for installing Keycloak.\n    mysql  MySQLComponent     (Optional) Contains the MySQL component configuration needed for Keycloak.\n    KialiComponent   (Appears on:ComponentSpec)  KialiComponent specifies the Kiali configuration.\n    Field Description      enabled  bool    (Optional) If true, then Kiali will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    KibanaComponent   (Appears on:ComponentSpec)  KibanaComponent specifies the Kibana configuration.\n    Field Description      enabled  bool    (Optional) If true, then OpenSearch Dashboards will be installed.\n    replicas  int32    The number of pods to replicate. The default is 1.\n    plugins  VMO /vmcontroller/v1.OpenSearchDashboardsPlugins     (Optional) Enable to add 3rd Party / Custom plugins not offered in the default OpenSearch-Dashboard image\n    KubeStateMetricsComponent   (Appears on:ComponentSpec)  KubeStateMetricsComponent specifies the kube-state-metrics configuration.\n    Field Description      enabled  bool    (Optional) If true, then kube-state-metrics will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    LetsEncryptACMEIssuer   (Appears on:ClusterIssuerComponent, IssuerConfig)  LetsEncryptACMEIssuer identifies the configuration used for the LetsEncrypt cert issuer\n    Field Description      emailAddress  string    (Optional) Email address of the user.\n    environment  string    (Optional) Environment can be “staging” or “production”\n    MySQLComponent   (Appears on:KeycloakComponent)  MySQLComponent specifies the MySQL configuration.\n    Field Description      monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    mysqlInstallArgs  []InstallArgs     (Optional) Arguments for installing MySQL.\n    volumeSource  Kubernetes core/v1.VolumeSource     (Optional) Defines the type of volume to be used for persistence for Keycloak/MySQL, and can be one of either EmptyDirVolumeSource or PersistentVolumeClaimVolumeSource. If PersistentVolumeClaimVolumeSource is declared, then the claimName must reference the name of a VolumeClaimSpecTemplate declared in the volumeClaimSpecTemplates section.\n    MySQLOperatorComponent   (Appears on:ComponentSpec)  MySQLOperatorComponent specifies the MySQL Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then MySQL Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    OAMComponent   (Appears on:ComponentSpec)  OAMComponent specifies the OAM configuration.\n    Field Description      enabled  bool    (Optional) If true, then OAM will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    OCI   (Appears on:DNSComponent)  OCI DNS type.\n    Field Description      dnsScope  string    (Optional) Scope of the Oracle Cloud Infrastructure DNS zone (PRIVATE, GLOBAL). If not specified, then defaults to GLOBAL.\n    dnsZoneCompartmentOCID  string    The Oracle Cloud Infrastructure DNS compartment OCID.\n    dnsZoneOCID  string    The Oracle Cloud Infrastructure DNS zone OCID.\n    dnsZoneName  string    Name of Oracle Cloud Infrastructure DNS zone.\n    ociConfigSecret  string    Name of the Oracle Cloud Infrastructure configuration secret. Generate a secret based on the Oracle Cloud Infrastructure configuration profile you want to use. You can specify a profile other than DEFAULT and specify the secret name. See instructions by running ./install/create_oci_config_secret.sh.\n    OciLoggingConfiguration   (Appears on:FluentdComponent)  OciLoggingConfiguration is the Oracle Cloud Infrastructure logging configuration for Fluentd.\n    Field Description      apiSecret  string    (Optional) The name of the secret containing the Oracle Cloud Infrastructure API configuration and private key.\n    defaultAppLogId  string    The OCID of the Oracle Cloud Infrastructure Log that will collect application logs.\n    systemLogId  string    The OCID of the Oracle Cloud Infrastructure Log that will collect system logs.\n    OpenSearchNode   (Appears on:ElasticsearchComponent)  OpenSearchNode specifies a node group in the OpenSearch cluster.\n    Field Description      name  string    Name of the node group.\n    replicas  int32    (Optional) Node group replica count.\n    resources  Kubernetes core/v1.ResourceRequirements     (Optional) Kubernetes container resources for nodes in the node group.\n    roles  []VMO /vmcontroller/v1.NodeRole     Role or roles that nodes in the group will assume: may be master, data, and/or ingest.\n    storage  OpenSearchNodeStorage     (Optional) Storage settings for the node group.\n    javaOpts  string    (Optional) JavaOpts settings for the OpenSearch JVM.\n    OpenSearchNodeStorage   (Appears on:OpenSearchNode)      Field Description      size  string    Node group storage size expressed as a Quantity.\n    Overrides   (Appears on:ApplicationOperatorComponent, ArgoCDComponent, AuthProxyComponent, CertManagerComponent, CertManagerOCIDNSWebhookSolver, CertManagerWebhookOCIComponent, ClusterAPIComponent, ClusterAgentComponent, ClusterOperatorComponent, CoherenceOperatorComponent, ConsoleComponent, DNSComponent, FluentOperatorComponent, FluentbitOpensearchOutputComponent, FluentdComponent, IngressNginxComponent, InstallOverrides, IstioComponent, JaegerOperatorComponent, KeycloakComponent, KialiComponent, KubeStateMetricsComponent, MySQLComponent, MySQLOperatorComponent, OAMComponent, PrometheusAdapterComponent, PrometheusNodeExporterComponent, PrometheusOperatorComponent, PrometheusPushgatewayComponent, RancherBackupComponent, RancherComponent, ThanosComponent, VeleroComponent, VerrazzanoComponent, WebLogicOperatorComponent)  Overrides identifies overrides for a component.\n    Field Description      configMapRef  Kubernetes core/v1.ConfigMapKeySelector     (Optional) Selector for ConfigMap containing override data. For sample usage, see ConfigMapRef.\n    secretRef  Kubernetes core/v1.SecretKeySelector     (Optional) Selector for Secret containing override data. For sample usage, see SecretRef.\n    values  Kubernetes apiextensions/v1.JSON     (Optional) Configure overrides using inline YAML. For sample usage, see Values.\n    ProfileType (string alias)  (Appears on:VerrazzanoSpec)  ProfileType is the type of installation profile.\n    Value Description   \"dev\"\n Dev identifies the development install profile\n \"managed-cluster\"\n ManagedCluster identifies the production managed-cluster install profile\n \"none\"\n None identifies a profile with all components disabled\n \"prod\"\n Prod identifies the production install profile\n   PrometheusAdapterComponent   (Appears on:ComponentSpec)  PrometheusAdapterComponent specifies the Prometheus Adapter configuration.\n    Field Description      enabled  bool    (Optional) If true, then Prometheus Adaptor will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    PrometheusComponent   (Appears on:ComponentSpec)  PrometheusComponent specifies the Prometheus configuration.\n    Field Description      enabled  bool    (Optional) If true, then Prometheus will be installed. This is a legacy setting; the preferred way to configure Prometheus is using the PrometheusOperatorComponent.\n    PrometheusNodeExporterComponent   (Appears on:ComponentSpec)  PrometheusNodeExporterComponent specifies the Prometheus Node Exporter configuration.\n    Field Description      enabled  bool    (Optional) If true, then Prometheus Node Exporter will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    PrometheusOperatorComponent   (Appears on:ComponentSpec)  PrometheusOperatorComponent specifies the Prometheus Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then Prometheus Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    PrometheusPushgatewayComponent   (Appears on:ComponentSpec)  PrometheusPushgatewayComponent specifies the Prometheus Pushgateway configuration.\n    Field Description      enabled  bool    (Optional) If true, then Prometheus Pushgateway will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    ProviderType (string alias)  (Appears on:Acme)  ProviderType identifies Acme provider type.\n    Value Description   \"LetsEncrypt\"\n LetsEncrypt is a Let’s Encrypt provider\n   RancherBackupComponent   (Appears on:ComponentSpec)  RancherBackupComponent specifies the rancherBackup configuration.\n    Field Description      enabled  bool    (Optional) If true, then rancherBackup will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    RancherComponent   (Appears on:ComponentSpec)  RancherComponent specifies the Rancher configuration.\n    Field Description      enabled  bool    (Optional) If true, then Rancher will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    keycloakAuthEnabled  bool    (Optional) KeycloakAuthEnabled specifies whether the Keycloak Auth provider is enabled. Default is false.\n    SecuritySpec   (Appears on:VerrazzanoSpec)  SecuritySpec defines the security configuration for Verrazzano.\n    Field Description      adminSubjects  []Kubernetes rbac/v1.Subject     (Optional) Specifies subjects that should be bound to the verrazzano-admin role.\n    monitorSubjects  []Kubernetes rbac/v1.Subject     (Optional) Specifies subjects that should be bound to the verrazzano-monitor role.\n    ThanosComponent   (Appears on:ComponentSpec)  ThanosComponent specifies the Thanos configuration.\n    Field Description      enabled  bool    (Optional) If true, then Thanos will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    VeleroComponent   (Appears on:ComponentSpec)  VeleroComponent specifies the Velero configuration.\n    Field Description      enabled  bool    (Optional) If true, then Velero will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    VerrazzanoComponent   (Appears on:ComponentSpec)  VerrazzanoComponent specifies the Verrazzano configuration.\n    Field Description      enabled  bool    (Optional) If true, then Verrazzano will be installed.\n    installArgs  []InstallArgs     (Optional) Arguments for installing Verrazzano.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    VerrazzanoSpec   (Appears on:Verrazzano)  VerrazzanoSpec defines the desired state of a Verrazzano resource.\n    Field Description      components  ComponentSpec     (Optional) The Verrazzano components.\n    defaultVolumeSource  Kubernetes core/v1.VolumeSource     (Optional) Defines the type of volume to be used for persistence for all components unless overridden, and can be one of either EmptyDirVolumeSource or PersistentVolumeClaimVolumeSource. If PersistentVolumeClaimVolumeSource is declared, then the claimName must reference the name of an existing VolumeClaimSpecTemplate declared in the volumeClaimSpecTemplates section.\n    environmentName  string    (Optional) Name of the installation. This name is part of the endpoint access URLs that are generated. The default value is default.\n    profile  ProfileType     (Optional) The installation profile to select. Valid values are prod (production), dev (development), and managed-cluster. The default is prod.\n    security  SecuritySpec     (Optional) Security specifies Verrazzano security configuration.\n    version  string    (Optional) The version to install. Valid versions can be found here. Defaults to the current version supported by the Verrazzano platform operator.\n    volumeClaimSpecTemplates  []VolumeClaimSpecTemplate     (Optional) Defines a named set of PVC configurations that can be referenced from components to configure persistent volumes.\n    VerrazzanoStatus   (Appears on:Verrazzano)  VerrazzanoStatus defines the observed state of a Verrazzano resource.\n    Field Description      available  string    The summary of Verrazzano component availability.\n    components  ComponentStatusMap     States of the individual installed components.\n    conditions  []Condition     The latest available observations of an object’s current state.\n    state  VzStateType     State of the Verrazzano custom resource.\n    instance  InstanceInfo     The Verrazzano instance information.\n    version  string    The version of Verrazzano that is installed.\n    VolumeClaimSpecTemplate   (Appears on:VerrazzanoSpec)  VolumeClaimSpecTemplate Contains common PVC configurations that can be referenced from Components; these do not actually result in generated PVCs, but can be used to provide common configurations to components that declare a PersistentVolumeClaimVolumeSource.\n    Field Description      metadata  Kubernetes meta/v1.ObjectMeta     Metadata about the PersistentVolumeClaimSpec template.\nRefer to the Kubernetes API documentation for the fields of the metadata field.     spec  Kubernetes core/v1.PersistentVolumeClaimSpec     A PersistentVolumeClaimSpec template that can be referenced by a Component to override its default storage settings for a profile. At present, only a subset of the resources.requests object are honored depending on the component.\n     accessModes  []Kubernetes core/v1.PersistentVolumeAccessMode     (Optional) accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n    selector  Kubernetes meta/v1.LabelSelector     (Optional) selector is a label query over volumes to consider for binding.\n    resources  Kubernetes core/v1.ResourceRequirements     (Optional) resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n    volumeName  string    (Optional) volumeName is the binding reference to the PersistentVolume backing this claim.\n    storageClassName  string    (Optional) storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\n    volumeMode  Kubernetes core/v1.PersistentVolumeMode     (Optional) volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.\n    dataSource  Kubernetes core/v1.TypedLocalObjectReference     (Optional) dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.\n    dataSourceRef  Kubernetes core/v1.TypedLocalObjectReference     (Optional) dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n       VolumeMount   (Appears on:FluentdComponent)  VolumeMount defines a hostPath type volume mount.\n    Field Description      destination  string    (Optional) The destination path on the Fluentd container, defaults to the source host path.\n    readOnly  bool    (Optional) Specifies if the volume mount is read-only, defaults to true.\n    source  string    The source host path.\n    VzStateType (string alias)  (Appears on:VerrazzanoStatus)  VzStateType identifies the state of a Verrazzano installation.\n    Value Description   \"Failed\"\n VzStateFailed is the state when an install/uninstall/upgrade has failed\n \"Paused\"\n VzStatePaused is the state when an upgrade is paused due to version mismatch\n \"Ready\"\n VzStateReady is the state when a Verrazzano resource can perform an uninstall or upgrade\n \"Reconciling\"\n VzStateReconciling is the state when a resource is in progress reconciling\n \"Uninstalling\"\n VzStateUninstalling is the state when an uninstall is in progress\n \"Upgrading\"\n VzStateUpgrading is the state when an upgrade is in progress\n   WebLogicOperatorComponent   (Appears on:ComponentSpec)  WebLogicOperatorComponent specifies the WebLogic Kubernetes Operator configuration.\n    Field Description      enabled  bool    (Optional) If true, then WebLogic Kubernetes Operator will be installed.\n    monitorChanges  bool     (Inlined from InstallOverrides.) (Optional) If false, then Verrazzano updates will ignore any configuration changes to this component. Defaults to true.\n    overrides  []Overrides      (Inlined from InstallOverrides.) (Optional) List of overrides for the default values.yaml file for the component Helm chart. Overrides are merged together, but in the event of conflicting fields, the last override in the list takes precedence over any others. Invalid override values will be ignored.\n    Wildcard   (Appears on:DNSComponent)  Wildcard DNS type.\n    Field Description      domain  string    The type of wildcard DNS domain. For example, nip.io, sslip.io, and such.\n      Generated with gen-crd-api-reference-docs on git commit 238db2c3e. \n","categories":"","description":"","excerpt":"Packages:\n  install.verrazzano.io/v1alpha1   install.verrazzano.io/v1alpha1   Resource Types:  Verrazzano  Verrazzano   Verrazzano specifies the Verrazzano API.\n    Field Description      apiVersion …","ref":"/docs/reference/vpo-verrazzano-v1alpha1/","tags":"","title":"Verrazzano v1alpha1 APIs"},{"body":"Use the Verrazzano Jaeger console to view, query, and filter traces. For information on how to get the Verrazzano Jaeger console URL and credentials, see Access Verrazzano.\nView traces in the Jaeger console On the initial page, select the service name to display the traces that you want to evaluate, for example, hello-helidon.\nSelect a trace to see its details.\nTo filter the number of responses, add a filtering option by specifying a tag element to be a part of the search criteria.\nThe Jaeger console shows:\n All the spans that make up the trace. Each span will contain all the tags, events, and timings for that span. Each span can be expanded to see the values of the tags, events, and the start time, end time, and the overall duration of the span.  View managed cluster traces You can see the managed cluster traces from the Jaeger console in the admin cluster only. To find the Jaeger console URL for your admin cluster, follow the instructions for Accessing Verrazzano.\nThe following spans include the Process tag, verrazzano_cluster, which has the name of the managed cluster. To see the traces for the managed cluster only, search based on the tag verrazzano_cluster=\u003cmanaged cluster name\u003e.\nSample output of Jager console screens\nOutput filtered for the managed cluster, managed1 (arrow).\nThe span details for managed1.\nStore traces and log records In Verrazzano, all the Jaeger traces are stored in OpenSearch; OpenSearch must be enabled in Verrazzano for this to work. The logs are also captured and stored in OpenSearch; this is done by Fluentd.\nRead the blog, Jaeger, Fluentd, and OpenSearch with Verrazzano for a detailed look at how Verrazzano components work together to provide a complete observability stack.\n","categories":"","description":"View trace records in the Jaeger console","excerpt":"View trace records in the Jaeger console","ref":"/docs/observability/tracing/view-traces/","tags":"","title":"View Trace Records"},{"body":"The Verrazzano platform comprises a comprehensive set of open source components, linked together to provide a modern, reliable, and secure platform to deploy cloud native applications. These documents will help you back up and restore data and configurations in Argo CD, Keycloak, OpenSearch, and Rancher.\nThe backup procedures are independent and you can invoke them in the order of your choice. For most of the backup functionality, these procedures rely on an object store as the back end, such as an OCI object store.\n","categories":"","description":"Learn how to back up and restore Verrazzano","excerpt":"Learn how to back up and restore Verrazzano","ref":"/docs/backup/","tags":"","title":"Back Up and Restore"},{"body":"The clusterAPI component allows you to quickly create managed clusters and manage them in the Verrazzano console. See Cluster API for more information.\nYou can customize the clusterAPI component using component overrides in the Verrazzano custom resource. Refer to the clusterAPI reference to see which overrides are available.\nUpgrade providers You can upgrade the individual providers that make up the clusterAPI component. This allows you to take advantage of new features in the providers without upgrading your entire Verrazzano installation.\nThis example customizes the clusterAPI component as follows:\n  Sets the version of both the OCNE bootstrap provider and the OCNE control plane provider to 1.6.1\nNOTE: Because the OCNE bootstrap and OCNE control plane providers are bundled together, make sure to set their overrides to the same version or it may lead to unexpected behavior.\n  Sets the version of the OCI infrastructure provider to 0.9.0\n  code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev components: clusterAPI: enabled: true overrides: - values: defaultProviders: ocneBootstrap: version: 1.6.1 ocneControlPlane: version: 1.6.1 oci: version: v0.9.0    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Use a private registry If you want to upgrade the clusterAPI providers but your Verrazzano instance is installed in a disconnected environment, you can configure the clusterAPI component to retrieve the provider assets from another location, instead of the public repository.\n Place the provider assets in a location that is accessible by your disconnected Verrazzano environment. For each provider that you want to upgrade, add a url override and then enter the path to the provider assets in the private registry for your environment.  For example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: dev components: clusterAPI: enabled: true overrides: - values: defaultProviders: ocneBootstrap: url: https://my.private.network/cluster-api-provider-ocne/releases/tag/v1.6.1 ocneControlPlane: url: https://my.private.network/cluster-api-provider-ocne/releases/tag/v1.6.1 oci: url: https://my.private.network/cluster-api-provider-oci/releases/tag/v0.9.0    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"Customize clusterAPI settings","excerpt":"Customize clusterAPI settings","ref":"/docs/setup/provision-cluster/clusterapi/","tags":"","title":"Customize clusterAPI"},{"body":"High availability designs follow three main principles:\n Elimination of single points of failure Fault detection Reliable failover points  Verrazzano provides a means to eliminate single points of failure among critical Verrazzano components. This is accomplished by increasing replica counts, anti-affinity rules, and implementing replicated data for components that rely on MySQL and OpenSearch.\nThe ha.yaml file illustrates how the prod profile can be extended to configure a highly available Verrazzano installation. The increased replica counts, along with the anti-affinity rules inherited from the prod profile, ensure that the pods of each component are distributed across the Kubernetes cluster nodes. MySQL and OpenSearch are configured to replicate data among replicas to avoid data loss.\nThe ha-oci-ccm.yaml file configures a highly available Verrazzano installation on OCNE.\nThe ha-ext-lb.yaml file configures a highly available Verrazzano installation using external load balancers.\nFault detection is managed natively by using Kubernetes Services and Istio VirtualServices that detect failed pods and route traffic to the remaining replicas.\nMySQL and OpenSearch provide reliable failover points for the replicated data.\nThe result of these measures would be no loss of service if a cluster node became unavailable. For more information regarding node failure and recovery, read the Node Failure Guide.\nWhen using the ha.yaml file, consider the following:\n It does not ensure a fault-tolerant environment. Your applications still must be designed and implemented as highly available. Running additional replicas of components will increase resource requirements. At least four CPUs, 100 GB disk storage, and 64 GB RAM available on the Kubernetes worker nodes is required. Additional customizations may be required for your environment, including other customizations described in individual sections.  For the expected behavior of the MySQL Component in a highly available environment, see Customize Keycloak and MySQL.\nFollow these best practices for a highly available Verrazzano installation:\n Size your Kubernetes cluster according to your node failure tolerance and workload requirements. Set the default Storage Class to one with a VolumeBindingMode of WaitForFirstConsumer. This is important for being able to recover from an Availability Domain or zone failure. Set the replica counts to values that correspond to your node failure tolerance.  To install the example high availability configuration using the Verrazzano CLI: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz install -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/ha/ha.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUsing the Verrazzano CLI, install the example high availability configuration on OCNE as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ vz install -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/ha/ha-oci-ccm.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUsing the Verrazzano CLI, install the example high availability configuration with external load balancers as follows: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ vz install -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/ha/ha-ext-lb.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nUpgrade recommendations An OKE in-place upgrade scales the cluster to N-1 nodes, where N is the original number of nodes, so you must scale the cluster back to N. This will start a new replacement node using the new node pool. For more information on in-place upgrades, see Performing an In-Place Worker Node Kubernetes Upgrade by Updating an Existing Node Pool.\n","categories":"","description":"Achieve high availability using the `prod` profile","excerpt":"Achieve high availability using the `prod` profile","ref":"/docs/guides/ha/ha/","tags":"","title":"Customize High Availability"},{"body":"To deploy applications in a custom namespace, create Argo CD applications that specify the Git repository path, which Argo CD requires to synchronize and deploy the applications in the specified namespace.\nNOTE: You can either pre-create a namespace and label it or auto-create a namespace when deploying an application.\nThis example provides information about how to deploy the Hello-helidon application. The Hello-helidon application and component YAML files are available at Hello World Helidon.\n Log in to the Argo CD console. Click New App. Specify a name for the application. For Project Name, select default. Select the required Sync Policy option:  Automatic - By default, every three minutes, Argo CD checks the specified Git repository and synchronizes the updates in Kubernetes to the Git repository. Manual - For manually synchronizing the updates to the Git repository, use the Manual option.   If you want to auto-create a namespace, in the Sync Options section, select Auto-Create Namespace. By auto-creating the namespace, the application will be deployed outside of the service mesh. The best practice is to pre-create the namespace and label it. Under the Source section, enter the following:  Repository URL: https://github.com/verrazzano/verrazzano/ Revision: master Path: Path in the repository where the Kubernetes resource definitions are listed. For example: examples/helidon-config   Under the Destination section, do the following:  Cluster URL: Select the cluster to which you want to deploy the applications. Namespace: Specify the namespace in which you want to deploy the applications. The instructions in this sample use hello-helidon as the namespace.   Click Create. If you selected Manual as the Sync Policy option, then click Sync. In the Synchronize Resources section, select all the resources, and then click Synchronize. This creates the Argo CD application and a pictorial representation of the deployed applications is displayed.  To verify or undeploy the Argo CD application, see Verify the deployed application and Undeploy applications.\n","categories":"","description":"Use Argo CD to synchronize and deploy applications","excerpt":"Use Argo CD to synchronize and deploy applications","ref":"/docs/applications/delivery/deploy/","tags":"","title":"Deploy Applications with Argo CD"},{"body":"Enable Google Chrome to accept self-signed Verrazzano certificates There are some installation scenarios where Verrazzano generates SSL certificates that are not trusted by browsers:\n The development (dev) profile installation, which uses its own self-signed CA to issue certificates. Using the Let’s Encrypt Staging authority, which uses untrusted CAs to sign certificates.  These are typical development or testing scenarios, not recommended for production. When accessing Verrazzano sites using these certificates, some browsers like Firefox let you manually accept these certificates. However, Google Chrome now prevents users from being able to accept self-signed certificates by default. This will prevent you from accessing Verrazzano consoles that are using untrusted certificates.\nWhen this occurs, while trying to access Verrazzano services, you will see an error message like the following:\nopensearch.vmi.system.default.129.153.98.156.nip.io normally uses encryption to protect your information. When Chrome tried to connect to opensearch.vmi.system.default.129.153.98.156.nip.io this time, the website sent back unusual and incorrect credentials You can choose to import the certificate into your local trust chain, but this will have to be done for each Verrazzano instance. From a security perspective, this is not recommended.\nAs an alternative, you can enter a secret passphrase in Chrome to enable it to prompt you to accept these certificates, by doing the following:\n When you see an error such as the one shown previously, when the browser window has the keyboard focus, enter the phrase thisisunsafe. Reload the site. Chrome will prompt you to accept the certificate.  NOTE: This should be used only when accessing sites that are known to be safe, such as in this situation.\nRelated articles   https://stackoverflow.com/questions/35274659/when-you-use-badidea-or-thisisunsafe-to-bypass-a-chrome-certificate-hsts-err\n  https://miguelpiedrafita.com/chrome-thisisunsafe\n  ","categories":"","description":"Answers to commonly asked questions and known issues","excerpt":"Answers to commonly asked questions and known issues","ref":"/docs/troubleshooting/faq/","tags":"","title":"FAQ"},{"body":"Installation overrides let you supply custom values to the underlying Helm charts or operator for a given component. You can supply Verrazzano installation overrides by using a configMapRef, secretRef, or raw values.\nThe following tables have examples of the Istio component InstallOverrides ConfigMap, Secret, and Values, where the external IP addresses are specified instead of using the defaults. For the default values, see the IstioOperatorSpec.\nIn the examples, the ConfigMap and Secret overrides are applied before applying the Verrazzano resource installation YAML file.\nConfigMap Note that the value of the metadata name in the configMap.yaml file must match the configMapRef name in the verrazzanoResourceWithConfigMapRef.yaml file. Also, the values of the key in the configMapRef and the key in the data section of the configMap must match.\n   ConfigMap\nconfigMap.yaml ConfigMapRef\nverrazzanoResourceWithConfigMapRef.yaml     code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:v1kind:ConfigMapmetadata:name:istio-cmdata:istio-override:|apiVersion: install.istio.io/v1alpha1 kind: IstioOperator spec: components: ingressGateways: - k8s: service: externalIPs: - 11.22.33.44 type: NodePort name: istio-ingressgateway   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:vz-with-cmspec:profile:devcomponents:rancher:enabled:falseistio:overrides:- configMapRef:name:istio-cmkey:istio-override   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));     Secret    Secret\nsecret.yaml SecretRef\nverrazzanoResourceWithSecretRef.yaml     code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:v1kind:Secretmetadata:name:istio-sstringData:istio-override:|apiVersion: install.istio.io/v1alpha1 kind: IstioOperator spec: components: ingressGateways: - k8s: service: externalIPs: - 11.22.33.44 type: NodePort name: istio-ingressgateway    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:vz-with-secretnamespace:defaultspec:profile:devcomponents:rancher:enabled:falseistio:overrides:- secretRef:name:istio-skey:istio-override   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));     Values    Values\nverrazzanoResourceWithValues.yaml     code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion:install.verrazzano.io/v1beta1kind:Verrazzanometadata:name:vz-with-valuesspec:components:istio:overrides:- values:apiVersion:install.istio.io/v1alpha1kind:IstioOperatorspec:components:ingressGateways:- enabled:truename:istio-ingressgatewayk8s:service:type:NodePortports:- name:httpsport:443nodePort:32443protocol:TCPtargetPort:8443externalIPs:- 11.22.33.44   function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));     ","categories":"","description":"Customize installation overrides","excerpt":"Customize installation overrides","ref":"/docs/setup/installationoverrides/","tags":"","title":"Installation Overrides"},{"body":"","categories":"","description":"Add clusters to your environment using the console","excerpt":"Add clusters to your environment using the console","ref":"/docs/setup/provision-cluster/","tags":"","title":"Provision Additional Clusters"},{"body":"If you are not able to view Verrazzano logs in Oracle Cloud Infrastructure Logging, then check the Fluentd container logs in the cluster to see if there are errors. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs -n verrazzano-system -l app=fluentd --tail=-1    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf you see not authorized error messages, then there is likely a problem with the Oracle Cloud Infrastructure Dynamic Group or IAM policy that is preventing the Fluentd plug-in from communicating with the Oracle Cloud Infrastructure API.\nTo ensure the appropriate permissions are in place, review the Oracle Cloud Infrastructure Logging required permissions documentation.\n","categories":"","description":"","excerpt":"If you are not able to view Verrazzano logs in Oracle Cloud Infrastructure Logging, then check the Fluentd container logs in the cluster to see if there are errors. code { margin: 0; padding: 0; } …","ref":"/docs/observability/logging/troubleshoot/","tags":"","title":"Troubleshoot logging issues"},{"body":"This document describes some common problems you might encounter when using multicluster Verrazzano, and how to troubleshoot them.\nIf you created multicluster resources in the admin cluster, and specified a placement value in a managed cluster, then those resources will get created in that managed cluster. If they do not get created in the managed cluster, then use the following steps to troubleshoot:\n Verify that the managed cluster is registered correctly and can connect to the admin cluster. Verify that the VerrazzanoProject for the resource’s namespace, also has a placement in that managed cluster. Check the multicluster resource’s status field on the admin cluster to know what the status of that resource is on each managed cluster to which it is targeted.  If you update the DNS of the admin cluster and notice that the managed cluster status is unavailable in the Rancher console, along with the error x509: certificate is valid for \u003crancher new url\u003e, not \u003crancher old url\u003e seen in the cattle-cluster-agent (Rancher Agent) logs on the managed cluster, then re-register the managed cluster, as described here.\nVerify managed cluster registration and connectivity You can verify that a managed cluster was successfully registered with an admin cluster by viewing the corresponding VerrazzanoManagedCluster (VMC) resource on the admin cluster. For example, to verify that a managed cluster named managed1 was successfully registered: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # on the admin cluster $ kubectl get verrazzanomanagedcluster managed1 \\ -n verrazzano-mc \\ -o yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nPartial sample output from the previous command. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   status: conditions: - lastTransitionTime: \"2021-06-22T21:03:27Z\" message: Ready status: \"True\" type: Ready lastAgentConnectTime: \"2021-06-22T21:06:04Z\" ... other fields ...    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nCheck the lastAgentConnectTime in the status of the VMC resource. This is the last time at which the managed cluster connected to the admin cluster. If this value is not present, or is not recent (within the last three minutes), then the managed cluster named managed1 cannot successfully connect to the admin cluster. This could be due to several reasons:\n  The managed cluster registration process step of applying the registration YAML on the managed cluster, was not completed. For the complete setup instructions, see here.\n  The managed cluster does not have network connectivity to the admin cluster. The managed cluster will attempt to connect to the admin cluster at regular intervals, and any errors will be reported in the verrazzano-application-operator pod’s log on the managed cluster. View the logs using the following command: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # on the managed cluster $ kubectl logs \\ -n verrazzano-system \\ -l app=verrazzano-application-operator    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  If these logs reveal that there is a connectivity issue, then in the case of an installation that includes Rancher on the admin cluster, there may have been a problem with Verrazzano pushing registration details or updates to the managed cluster. Try exporting and applying the registration manifest to the managed cluster as shown: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # on the admin cluster kubectl get secret \\ -n verrazzano-mc verrazzano-cluster-managed1-manifest \\ -o jsonpath={.data.yaml} | base64 --decode \u003e register.yaml # on the managed cluster kubectl apply -f register.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: If your installation disabled Rancher on the admin cluster, then check the admin cluster Kubernetes server address that you provided during registration and ensure that it is correct, and that it is reachable from the managed cluster. If it is incorrect, then you will need to repeat the managed cluster registration process described in the setup instructions here.\nVerify VerrazzanoProject placement For Verrazzano to create an application namespace in a managed cluster, that namespace must be part of a VerrazzanoProject that:\n Includes that namespace. Has a placement value that includes that managed cluster.  View the details of the project that corresponds to your application’s namespace. In the example command that follows, the project name is assumed to be myproject. All projects are expected to be created in the verrazzano-mc namespace. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # on the admin cluster $ kubectl get verrazzanoproject myproject \\ -n verrazzano-mc \\ -o yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe following partial sample output is for a project that will result in the namespace mynamespace being created on the managed cluster managed1. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  spec: placement: clusters: - name: managed1 template: namespaces: - metadata: name: mynamespace ....other fields....    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nCheck the multicluster resource status On the admin cluster, each multicluster resource’s status field is updated with the status of the underlying resource on each managed cluster in which it is placed.\nThe following example command shows how to view the status of a MultiClusterApplicationConfiguration named myapp, in the namespace mynamespace, that has a placement value that includes the managed cluster managed1. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get multiclusterapplicationconfiguration myapp \\ -n mynamespace \\ -o yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe status of the underlying resource in each cluster specified in the placement is shown in the following partial sample output. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   status: clusters: - lastUpdateTime: \"2021-06-22T21:05:04Z\" message: OAM Application Configuration created name: managed1 state: Succeeded conditions: - lastTransitionTime: \"2021-06-22T21:03:58Z\" message: OAM Application Configuration created status: \"True\" type: DeployComplete state: Succeeded    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe status message contains additional information on the operation’s success or failure.\nRe-register the managed cluster Perform the following steps to re-register the managed cluster with the admin cluster. The cluster against which to run the command is indicated in each code block.\n  On the admin cluster, export the register YAML file newly created on the admin cluster to re-register the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ get secret verrazzano-cluster-managed1-manifest \\ -n verrazzano-mc \\ -o jsonpath={.data.yaml} | base64 --decode \u003e register_new.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  On the managed cluster, apply the registration file exported in the previous step. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the managed cluster $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 --context $KUBECONTEXT_MANAGED1 \\ apply -f register_new.yaml # After the command succeeds, you may delete the register_new.yaml file $ rm register_new.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  On the admin cluster, run kubectl patch clusters.management.cattle.io to trigger redeployment of the Rancher agent on the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ get clusters.management.cattle.io # Sample output NAME AGE c-mzb2h 4h48m local 4h56m $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ patch clusters.management.cattle.io \u003cthe managed cluster name from the above output\u003e \\ -p '{\"status\":{\"agentImage\":\"dummy\"}}' --type merge # Sample output cluster.management.cattle.io/c-mzb2h patched    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"Troubleshoot issues with multicluster setup and applications","excerpt":"Troubleshoot issues with multicluster setup and applications","ref":"/docs/setup/mc-install/troubleshooting-multicluster/","tags":"","title":"Troubleshoot Multicluster Setup Issues"},{"body":"Each cluster of a multicluster environment is upgraded separately. Start with the admin cluster, and then for each managed cluster, follow the Upgrade Verrazzano instructions.\nVerify the upgrade of each managed cluster For each managed cluster, follow the instructions in each of the following sections:\n Verify that managed cluster registration has completed Verify that managed cluster metrics are being collected Verify that managed cluster logs are being collected  ","categories":"","description":"Upgrade a multicluster Verrazzano environment","excerpt":"Upgrade a multicluster Verrazzano environment","ref":"/docs/setup/upgrade/upgrade-mc/","tags":"","title":"Upgrade Verrazzano in a Multicluster Environment"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/applications/oam/workloads/","tags":"","title":"Verrazzano Application Workloads"},{"body":"","categories":"","description":"Develop and deploy applications in Verrazzano","excerpt":"Develop and deploy applications in Verrazzano","ref":"/docs/applications/","tags":"","title":"Deploy and Manage Applications"},{"body":"Before you begin  Install Verrazzano by following the installation instructions. To download the example image, you must first accept the license agreement.  In a browser, navigate to https://container-registry.oracle.com/ and sign in. Search for example-todo and weblogic. For each one:  Select the image name in the results. From the drop-down menu, select your language and click Continue. Then read and accept the license agreement.      NOTE: The ToDo List example application deployment files are contained in the Verrazzano project located at \u003cVERRAZZANO_HOME\u003e/examples/todo-list, where \u003cVERRAZZANO_HOME\u003e is the root of the Verrazzano project.\nAll files and paths in this document are relative to \u003cVERRAZZANO_HOME\u003e/examples/todo-list.\nDeploy the application ToDo List is an example application containing a WebLogic component. For more information and the source code of this application, see the Verrazzano Examples.\nNOTE To run this application in the default namespace:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl label namespace default verrazzano-managed=true istio-injection=enabled    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If you chose the default namespace, you can skip Step 1 and ignore the -n option in the rest of the commands.\n   Create a namespace for the ToDo List example and add a label identifying the namespace as managed by Verrazzano. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create namespace todo-list $ kubectl label namespace todo-list verrazzano-managed=true istio-injection=enabled    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Create a docker-registry secret to enable pulling the ToDo List example image from the registry. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create secret docker-registry tododomain-repo-credentials \\ --docker-server=container-registry.oracle.com \\ --docker-username=YOUR_REGISTRY_USERNAME \\ --docker-password=YOUR_REGISTRY_PASSWORD \\ --docker-email=YOUR_REGISTRY_EMAIL \\ -n todo-list    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nReplace YOUR_REGISTRY_USERNAME, YOUR_REGISTRY_PASSWORD, and YOUR_REGISTRY_EMAIL with the values you use to access the registry.\n  Create and label secrets for the WebLogic domain. The password must be at least 8 alphanumeric characters with at least one number or special character. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # Replace the values of the WLS_USERNAME and WLS_PASSWORD environment variables as appropriate. $ export WLS_USERNAME=\u003cusername\u003e $ export WLS_PASSWORD=\u003cpassword\u003e $ kubectl create secret generic tododomain-weblogic-credentials \\ --from-literal=password=$WLS_PASSWORD \\ --from-literal=username=$WLS_USERNAME \\ -n todo-list $ kubectl create secret generic tododomain-jdbc-tododb \\ --from-literal=username=$WLS_USERNAME \\ --from-literal=password=$WLS_PASSWORD \\ -n todo-list $ kubectl -n todo-list label secret tododomain-jdbc-tododb weblogic.domainUID=tododomain    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNote that the ToDo List example application is preconfigured to use specific secret names. For the source code of this application, see the Verrazzano Examples.\n  To deploy the application, apply the example resources. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/todo-list/todo-list-components.yaml -n todo-list $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/todo-list/todo-list-application.yaml -n todo-list    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the ToDo List application to be ready. You can monitor its progress by listing pods and inspecting the output. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n todo-list    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAlternatively, you can use the kubectl wait commands. However, if it is run before the respective pods are created, then the kubectl wait commands may report error: no matching resources found. Specifically, the tododomain-adminserver pod may take a while to be created and Ready, so you may need to repeat the kubectl wait command several times before it is successful. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl wait pod \\ --for=condition=Ready \\ -l app.oam.dev/component=todo-mysql-deployment \\ -n todo-list \\ --timeout=5m $ kubectl wait pod \\ --for=condition=Ready \\ -l weblogic.serverName=AdminServer \\ -n todo-list \\ --timeout=5m    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the generated host name for the application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ HOST=$(kubectl get gateways.networking.istio.io \\ -n todo-list \\ -o jsonpath='{.items[0].spec.servers[0].hosts[0]}') $ echo $HOST # Sample output todo-appconf.todo-list.10.11.12.13.nip.io    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the EXTERNAL_IP address of the istio-ingressgateway service. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ADDRESS=$(kubectl get service \\ -n istio-system istio-ingressgateway \\ -o jsonpath='{.status.loadBalancer.ingress[0].ip}') $ echo $ADDRESS # Sample output 10.11.12.13    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Access the ToDo List application.\n  Using the command line code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   # The expected response of this query is the HTML of a web page $ curl -sk \\ https://${HOST}/todo/ \\ --resolve ${HOST}:443:${ADDRESS}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf you are using nip.io, then you do not need to include --resolve.\n  Local testing with a browser\nTemporarily, modify the /etc/hosts file (on Mac or Linux) or c:\\Windows\\System32\\Drivers\\etc\\hosts file (on Windows 10), to add an entry mapping the host name to the ingress gateway’s EXTERNAL-IP address. For example:\n10.11.12.13 todo.example.com Then, you can access the application in a browser at https://todo.example.com/todo.\n If you are using nip.io, then you can access the application in a browser using the HOST variable (for example, https://${HOST}/todo). If you are going through a proxy, then you may need to add *.nip.io to the NO_PROXY list.    Using your own DNS name\nPoint your own DNS name to the ingress gateway’s EXTERNAL-IP address.\n  In this case, you would need to have edited the todo-list-application.yaml file to use the appropriate value under the hosts section (such as yourhost.your.domain), before deploying the ToDo List application.\n  Then, you can use a browser to access the application at https://\u003cyourhost.your.domain\u003e/todo/.\nAccessing the application in a browser opens the page, “Derek’s ToDo List”, with an edit field and an Add button that lets you add tasks.\n      A variety of endpoints associated with the deployed ToDo List application are available to further explore the logs, metrics, and such. You can access them according to the directions here.\n  Access the WebLogic Server Administration Console To access the Console from the machine where you are running kubectl:\n  Set up port forwarding. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl port-forward pods/tododomain-adminserver 7001:7001 -n todo-list    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nNOTE: If you are using the Oracle Cloud Infrastructure Cloud Shell to run kubectl, in order to access the Console using port forwarding, you will need to run kubectl on another machine.\n  Access the WebLogic Server Administration Console from your browser. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  http://localhost:7001/console    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  NOTE It is recommended that the WebLogic Server Administration Console not be exposed publicly.  Verify the deployed application   Verify that the application configuration, domain, and ingress trait all exist. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get ApplicationConfiguration -n todo-list # Sample output NAME AGE todo-appconf 19h $ kubectl get Domain -n todo-list # Sample output NAME AGE todo-domain 19h $ kubectl get IngressTrait -n todo-list # Sample output NAME AGE todo-domain-trait-7cbd798c96 19h    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Verify that the WebLogic Administration Server and MySQL pods have been created and are running. Note that this will take several minutes. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods -n todo-list # Sample output NAME READY STATUS RESTARTS AGE mysql-5c75c8b7f-vlhck 2/2 Running 0 19h tododomain-adminserver 4/4 Running 0 19h    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Undeploy the application   To undeploy the application, delete the ToDo List OAM resources. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/todo-list/todo-list-application.yaml -n todo-list $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/todo-list/todo-list-components.yaml -n todo-list    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the namespace todo-list after the application pods are terminated. The secrets created for the WebLogic domain also will be deleted. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete namespace todo-list    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"An example application containing a WebLogic component","excerpt":"An example application containing a WebLogic component","ref":"/docs/examples/wls-coh/todo-list/","tags":"","title":"ToDo List"},{"body":"","categories":"","description":"Information and tools to support operating Verrazzano","excerpt":"Information and tools to support operating Verrazzano","ref":"/docs/setup/access/","tags":"","title":"Access Verrazzano"},{"body":"Argo CD is a Kubernetes deployment tool that uses Git repositories as the source of truth. It monitors running applications and compares the deployed state against the desired one in Git. Argo CD lets you visualize the differences and provides methods to automatically or manually update the live state with the desired target state. For more information, see the Argo CD documentation.\nIn a multicluster Verrazzano environment, Argo CD integration depends on Rancher being enabled on the admin cluster. Argo CD connects to managed clusters using the Rancher proxy, to create the required resources for Argo CD cluster registration.\n","categories":"","description":"Use Argo CD to manage application life cycle and deployment","excerpt":"Use Argo CD to manage application life cycle and deployment","ref":"/docs/applications/delivery/","tags":"","title":"Continuous Delivery"},{"body":"You can customize the Verrazzano Istio component using settings in the Verrazzano custom resource.\nThe following table describes the fields in the Verrazzano custom resource pertaining to the Istio component.\n   Path to Field Description     spec.components.istio.egress.kubernetes.replicas The number of pods to replicate. The default is 2 for the prod profile and 1 for all other profiles.   spec.components.istio.egress.kubernetes.affinity The pod affinity definition expressed as a standard Kubernetes affinity definition. The default configuration spreads the Istio gateway pods across the available nodes. spec:\ncomponents:\nistio:\negress:\nkubernetes:\naffinity:\npodAntiAffinity:\npreferredDuringSchedulingIgnoredDuringExecution:\n- weight: 100\npodAffinityTerm:\nlabelSelector:\nmatchExpressions:\n- key: app\noperator: In\nvalues:\n- istio-egressgateway\ntopologyKey: kubernetes.io/hostname   spec.components.istio.ingress.kubernetes.replicas The number of pods to replicate. The default is 2 for the prod profile and 1 for all other profiles.   spec.components.istio.ingress.kubernetes.affinity The pod affinity definition expressed as a standard Kubernetes affinity definition. The default configuration spreads the Istio gateway pods across the available nodes. spec:\ncomponents:\nistio:\ningress:\nkubernetes:\naffinity:\npodAntiAffinity:\npreferredDuringSchedulingIgnoredDuringExecution:\n- weight: 100\npodAffinityTerm:\nlabelSelector:\nmatchExpressions:\n- key: app\noperator: In\nvalues:\n- istio-ingressgateway\ntopologyKey: kubernetes.io/hostname    The following example customizes a Verrazzano prod profile as follows:\n Increases the replicas count to 3 for istio-ingressgateway and istio-egressgateway Changes the podAffinity configuration to use requiredDuringSchedulingIgnoredDuringExecution for istio-ingressgateway and istio-egressgateway code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: example-verrazzano spec: profile: prod components: istio: overrides: - values: apiVersion: install.istio.io/v1alpha1 kind: IstioOperator spec: components: egressGateways: - enabled: true k8s: affinity: podAntiAffinity: requiredDuringSchedulingIgnoredDuringExecution: - podAffinityTerm: labelSelector: matchExpressions: - key: app operator: In values: - istio-egressgateway topologyKey: kubernetes.io/hostname weight: 100 replicaCount: 3 name: istio-egressgateway ingressGateways: - enabled: true k8s: affinity: podAntiAffinity: requiredDuringSchedulingIgnoredDuringExecution: - podAffinityTerm: labelSelector: matchExpressions: - key: app operator: In values: - istio-ingressgateway topologyKey: kubernetes.io/hostname weight: 100 replicaCount: 3 service: type: LoadBalancer name: istio-ingressgateway    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   ","categories":"","description":"Customize Verrazzano Istio settings","excerpt":"Customize Verrazzano Istio settings","ref":"/docs/networking/istio/","tags":"","title":"Customize Istio"},{"body":"","categories":"","description":"Use the observability stack to view logging, monitoring, tracing, and diagnostic data","excerpt":"Use the observability stack to view logging, monitoring, tracing, and diagnostic data","ref":"/docs/observability/","tags":"","title":"Observability"},{"body":"During application deployment, the oam-kubernetes-runtime and verrazzano-application-operator cooperate through the generation and update of Kubernetes resources. The oam-kubernetes-runtime processes the ApplicationConfiguration and Component resources provided by the user and generates workload and Trait resources. The verrazzano-application-operator processes Verrazzano specific workload and Trait resources. These are then used to generate additional child and related resources.\nTroubleshooting application deployments should follow three general steps:\n Review the status of the oam-kubernetes-runtime and verrazzano-application-operator operator pods. Review the logs of the oam-kubernetes-runtime and verrazzano-application-operator operator pods. Review the resources generated by the oam-kubernetes-runtime and the verrazzano-application-operator.  Review oam-kubernetes-runtime operator status For application deployment to succeed, the oam-kubernetes-runtime pod must have a status of Running.\nUse the following command to get the pod status: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods \\ -n verrazzano-system \\ -l app.kubernetes.io/name=oam-kubernetes-runtime    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf the pod status is not Running, then see the instructions for reviewing the oam-kubernetes-runtime pod logs.\nReview verrazzano-application-operator operator status For application deployment to succeed, the verrazzano-application-operator pod must have a status of Running.\nUse the following command to get the pod status: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods \\ -n verrazzano-system \\ -l app=verrazzano-application-operator    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf the pod status is not Running, then see the instructions for reviewing the verrazzano-application-operator logs.\nReview oam-kubernetes-runtime operator logs Review the oam-kubernetes-runtime pod logs for any indication that pod startup or the generation of workloads or traits has failed.\nUse the following command to get the logs: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs \\ -n verrazzano-system \\ -l app.kubernetes.io/name=oam-kubernetes-runtime    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nReview verrazzano-application-operator logs Review the verrazzano-application-operator logs for any indication that pod startup or resource generation has failed.\nUse the following command to get the logs: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs \\ -n verrazzano-system \\ -l app=verrazzano-application-operator    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nReview generated workload resources The processing of a Component reference within an ApplicationConfiguration results in the generation of workloads. For example, a referenced Component might result in the generation of a VerrazzanoHelidonWorkload workload resource. In turn, the VerrazzanoHelidonWorkload workload resource will be processed and result in the generation of related Deployment and Service resources.\nIf the expected workload resource, for example VerrazzanoHelidonWorkload, is missing, then review the oam-kubernetes-runtime logs. If the expected related resources, for example Deployment or Service, are missing, then review the verrazzano-application-operator logs.\nThe following commands are examples of checking for the resources related to a VerrazzanoHelidonWorkload deployment: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get -n hello-helidon verrazzanohelidonworkload hello-helidon-workload $ kubectl get -n hello-helidon deployment hello-helidon-deployment $ kubectl get -n hello-helidon service hello-helidon-deployment    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nReview generated Trait resources The processing of traits embedded with an ApplicationConfiguration results in the generation of Trait resources. For example, an IngressTrait embedded within an ApplicationConfiguration will result in the generation of an IngressTrait resource. In turn, the IngressTrait resource will be processed and result in the generation of related Certificate, Gateway, and VirtualService resources.\nIf the expected Trait resource, for example IngressTrait, is missing, then review the oam-kubernetes-runtime logs. If the expected related resources, for example Certificate, Gateway, and VirtualService, are missing, then review the verrazzano-application-operator logs.\nThe following commands are examples of checking for the resources related to an IngressTrait: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get -n hello-helidon ingresstrait hello-helidon-ingress $ kubectl get -n istio-system Certificate hello-helidon-hello-helidon-appconf-cert $ kubectl get -n hello-helidon gateway hello-helidon-hello-helidon-gw $ kubectl get -n hello-helidon virtualservice hello-helidon-ingress-rule-0-vs    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nCheck for RBAC privilege issues The use of generic Kubernetes resources as workloads and traits can result in deployment failures if privileges are insufficient. In this case, the oam-kubernetes-runtime logs will contain errors containing the term forbidden.\nThe following command shows how to query for this type of failure message: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl logs \\ -n verrazzano-system \\ -l app.kubernetes.io/name=oam-kubernetes-runtime | grep forbidden    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nCheck resource owners Kubernetes maintains the child to parent relationship within metadata fields.\nThe following example returns the parent of the IngressTrait, named hello-helidon-ingress, in the hello-helidon namespace: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get IngressTrait \\ -n hello-helidon hello-helidon-ingress \\ -o jsonpath='{range .metadata.ownerReferences[*]}{.name}{\"\\n\"}{end}'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe results of this command can help identify the lineage of a given resource.\nCheck related resources Some resources also record the related resources affected during their processing. For example, when processed, an IngressTrait will create related Gateway, VirtualService, and Certificate resources.\nThe following command is an example of how to obtain the related resources of an IngressTraits: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get IngressTrait \\ -n hello-helidon hello-helidon-ingress \\ -o jsonpath='{range .status.resources[*]}{.kind}: {.name}{\"\\n\"}{end}'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nThe results of this command can help identify which other resources, the given resource affected.\n","categories":"","description":"Troubleshoot issues deploying applications on Verrazzano","excerpt":"Troubleshoot issues deploying applications on Verrazzano","ref":"/docs/applications/troubleshooting-application-deployment/","tags":"","title":"Troubleshoot Application Deployment Issues"},{"body":"After Verrazzano is installed in a cluster, you may want to upgrade the Kubernetes version of that cluster. For information on the Kubernetes versions that Verrazzano supports, see the Prerequisites.\nThe following lists documentation sources for Kubernetes cluster updates. If yours does not appear on this list, then consult your cluster provider’s upgrade documentation.\n OKE Kubernetes Upgrade OLCNE Kubernetes Upgrade kubeadm Kubernetes Upgrade  Upgrade a multinode cluster For a typical multinode Kubernetes cluster, we recommend keeping one or more nodes present and available while upgrading nodes. This allows the cordoned nodes to distribute the pods to available nodes, which eliminates downtime during an upgrade. Your cluster provider can provide information on maintaining node availability for an in-place upgrade.\nUpgrade a single-node cluster For a single-node cluster upgrade, there will be downtime in the cluster to allow the node to cordon while it is upgraded. For this reason, there are a few manual workaround steps that you may need to perform to be able to fully drain the Kubernetes node.\nDisable the MySQL pod disruption budget The MySQL Operator deploys a Pod Disruption Budget for the MySQL database pods. This Pod Disruption Budget will prevent the node from being drained. To change this, you can patch the Pod Disruption budget to allow the MySQL replicas to be drained from the node.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl patch poddisruptionbudgets.policy -n keycloak mysql-pdb -p '{\"spec\":{\"minAvailable\":0, \"maxUnavailable\":null}}' --type=merge    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Remove the MySQL pod finalizers It is possible that the MySQL pods will be stuck in the Terminating state while the node is being drained. If you find that the MySQL pod will not complete termination, then you can remove the finalizers to manually terminate these pods.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl patch pod -n keycloak mysql-0 -p '{\"metadata\":{\"finalizers\":null}}' --type=merge    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Delete the Rancher Helm pods Rancher spins up Helm pods for cluster operations. Because these pods are not managed by any parent resources, they can prevent the node from being drained. If this is the case, then you can delete these pods with the following command.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get pods --no-headers=true -n cattle-system | awk '{print $1}' | grep helm | xargs kubectl delete pod --ignore-not-found -n cattle-system    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  ","categories":"","description":"","excerpt":"After Verrazzano is installed in a cluster, you may want to upgrade the Kubernetes version of that cluster. For information on the Kubernetes versions that Verrazzano supports, see the Prerequisites. …","ref":"/docs/setup/upgrade/kubernetes-upgrade/","tags":"","title":"Upgrade Kubernetes with Verrazzano installed"},{"body":"Customize MySQL settings for high availability  To scale the number of MySQL instances use the Verrazzano custom resource, not the MySQL StatefulSet. Directly modifying the StatefulSet may change the status of the cluster to ONLINE_PARTIAL. You must have at least one running mysql-router to access the MySQL InnoDB Cluster. Scaling the number of mysql-router instances to zero may result in the MySQL Operator permanently losing communication with the cluster and Keycloak being unable to communicate with MySQL. There are limitations to MySQL group replication policy to provide distributed coordination between servers. See MySQL Fault-tolerance.  For instructions to customize persistent storage settings, see Customize Persistent Storage.\nCustomize MySQL my.cnf settings The file, my.cnf, contains the main configuration for MySQL. You can customize the contents of the my.cnf file by providing overrides to the Keycloak subcomponent MySQL in the Verrazzano custom resource.\nFor example, you can override the default value of max_connections as follows:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  apiVersion: install.verrazzano.io/v1beta1 kind: Verrazzano metadata: name: verrazzano spec: profile: dev components: keycloak: mysql: overrides: - values: serverConfig: mycnf: | max_connections = 250    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The MySQL Operator supports my.cnf file configuration overrides only upon installation. After initial installation, the following steps are required to make changes to the my.cnf file.\n Edit the Verrazzano custom resource and set the overrides for serverConfig.mycnf as shown previously in the max_connections example. For example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl patch verrazzano verrazzano -p '{\"spec\":{\"components\":{\"keycloak\":{\"mysql\":{\"overrides\":[{\"values\": {\"serverConfig\": {\"mycnf\": \"max_connections = 250\\n\"}}}]}}}}}' --type=merge    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Wait for the Verrazzano platform operator to reconcile the changes made to the Verrazzano custom resource. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl -n verrazzano-install rollout status deployment/verrazzano-platform-operator    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  The MySQL InnoDBCluster object is updated by the Verrazzano platform-operator to contain the serverConfig.mycnf overrides. You can use the following command to view the contents of the InnoDBCluster object. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get innodbcluster -n keycloak mysql -o yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Edit the mysql-initconf ConfigMap in the keycloak namespace and update the settings in the 99-extra.cnf section. For example: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl patch configmap -n keycloak mysql-initconf -p \\ '{\"data\":{\"99-extra.cnf\": \"# Additional user configurations taken from spec.mycnf in InnoDBCluster.\\n# Do not edit directly.\\n[mysqld]\\nmax_connections = 250\\n\"}}' \\ --type=merge    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Example snippet of the 99-extra.cnf portion of the ConfigMap after the patch. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   99-extra.cnf: | # Additional user configurations taken from spec.mycnf in InnoDBCluster. # Do not edit directly. [mysqld] max_connections = 250    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Start a rollout restart of the MySQL StatefulSet. After the rollout restart completes, the MySQL pods will be using the configuration overrides. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl rollout restart -n keycloak statefulset mysql    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  Wait for the rollout restart of the MySQL StatefulSet to complete. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl -n keycloak rollout status statefulset/mysql    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));   ","categories":"","description":"","excerpt":"Customize MySQL settings for high availability  To scale the number of MySQL instances use the Verrazzano custom resource, not the MySQL StatefulSet. Directly modifying the StatefulSet may change the …","ref":"/docs/security/keycloak/keycloak/","tags":"","title":"Customize Keycloak and MySQL"},{"body":"Verrazzano supports Kubernetes Role-Based Access Control (RBAC) for Verrazzano resources, and integrates with Keycloak to enable Single Sign-On (SSO) across the Verrazzano Console and the Verrazzano Monitoring Instance (VMI) logging and metrics consoles. Verrazzano provides proxies that enable SSO and Kubernetes API access for Keycloak user accounts.\nFor information on how Verrazzano secures network traffic, see Network Security.\n","categories":"","description":"","excerpt":"Verrazzano supports Kubernetes Role-Based Access Control (RBAC) for Verrazzano resources, and integrates with Keycloak to enable Single Sign-On (SSO) across the Verrazzano Console and the Verrazzano …","ref":"/docs/security/","tags":"","title":"Security"},{"body":"","categories":"","description":"Upgrade your Verrazzano installation","excerpt":"Upgrade your Verrazzano installation","ref":"/docs/setup/upgrade/","tags":"","title":"Upgrade Verrazzano"},{"body":"Complete the following steps to configure NFS storage in an Oracle Cloud Native Environment.\n  Create an OLCNE cluster. See OLCNE cluster.\nThe cluster must have at least 3 worker nodes.\n  Create an NFS server. For an example that uses an NFS server on Oracle Linux, see Create an NFS server on Oracle Linux.\na. Install the NFS utility package on the server and client instances. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ sudo dnf install -y nfs-utils    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nb. Create a directory for your shared files. Make sure that the server does not have root ownership.\nc. Define the shared directory in /etc/exports with the correct permissions. Make sure to disable root squashing. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ \u003cpath to directory\u003e \u003cip-address/subnet-mask\u003e(rw,sync,no_root_squash,no_subtree_check)    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nd. Set the firewall to allow NFS traffic. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ sudo firewall-cmd --permanent --zone=public --add-service=nfs $ sudo firewall-cmd --reload $ sudo firewall-cmd --list-all    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \ne. Enable and start the NFS service. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ sudo systemctl enable --now nfs-server    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Deploy an NFS provisioner to your cluster.\na. Install an NFS client provisioner of your choice. For an example, see Kubernetes NFS Subdir External Provisioner.\nb. Add the required Helm repo. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nc. Install the provisioner. Set your storage class as a default and create a service account. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ helm install nfs-test \\ --set nfs.server=\u003cserver ip address\u003e \\ --set nfs.path=\u003cpath\u003e \\ --set storageClass.name=\u003cname\u003e \\ --set storageClass.defaultClass=true,rbac.create=true \\ --set storageClass.provisionerName=nfsclientprov/nfs \\ --set serviceAccount.create=true \\ --set serviceAccount.name=nfs-svc-acc-nfs nfs-subdir-external-provisioner/nfs-subdir-external-provisioner    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nd. Only one storage class should be listed as the default. If required, edit the other storage classes and delete the following annotation: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ storageclass.kubernetes.io/is-default-class: \"true\"    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"","excerpt":"Complete the following steps to configure NFS storage in an Oracle Cloud Native Environment.\n  Create an OLCNE cluster. See OLCNE cluster.\nThe cluster must have at least 3 worker nodes.\n  Create an …","ref":"/docs/setup/install/prepare/platforms/olcne/nfs/","tags":"","title":"Configure NFS Storage"},{"body":"A Verrazzano instance is comprised of both Verrazzano components and several third party products. Collectively, these components are called the Verrazzano system components. In addition, after Verrazzano is installed, a Verrazzano instance can include applications deployed by the user. Applications can also be referred to as components, not to be confused with OAM Components.\nAll of the system components and applications use the network to some degree. Verrazzano configures networking to provide network security and traffic management. Network settings are configured both at installation and during runtime as applications are deployed into the Kubernetes cluster.\nHigh-level overview The following diagram shows the high-level overview of Verrazzano networking using ExternalDNS and Let’s Encrypt for certificates. ExternalDNS and cert-manager both run outside the mesh and connect to external services using TLS. This diagram does not show Prometheus scraping.\nVerrazzano system traffic enters a platform load balancer over TLS and is routed to the NGINX Ingress Controller, where TLS is terminated. From there, the traffic is routed to one of the system components in the mesh over mutual TLS authentication (mTLS), or using HTTP to a system component, outside the mesh.\nApplication traffic enters a second Oracle Cloud Infrastructure load balancer over TLS and is routed to the Istio ingress gateway, where TLS is terminated. From there, the traffic is routed to one of several applications using mTLS.\nNOTE: Applications can be deployed outside the mesh, but the Istio ingress gateway will send traffic to them using plain text. You need to do some additional configuration to enable TLS passthrough, as described at Istio Gateway Passthrough.\nHigh-level network diagram Platform network connectivity A Kubernetes cluster is installed on a platform, such as Oracle OKE, an on-premises installation, a hybrid cloud topology, or such. Verrazzano interfaces only with Kubernetes; it has no knowledge of platform topology or network security. You must ensure that there is network connectivity. For example, the ingresses might use a platform load balancer that provides the entry point into the cluster for Verrazzano consoles and applications. These load balancer IP addresses must be accessible for your users. In the multicluster case, clusters might be on different platform technologies with firewalls between them. Again, you must ensure that the clusters have network connectivity.\nNetwork configuration during installation A summary of the network-related configuration follows.\nVerrazzano does the following as it relates to networking:\n Installs and configures NGINX Ingress Controller. Creates Ingress resources for system components. Installs and configures Istio. Enables strict mTLS for the mesh by creating an Istio PeerAuthentication resource. Creates an Istio egress gateway service. Creates an Istio ingress gateway service. Configures several Verrazzano system components to be in the mesh. Optionally, installs ExternalDNS and creates DNS records. Creates certificates required by TLS, used by system components. Creates certificates required by Kubernetes API server to call a webhook. Creates NetworkPolicies for all of the system components.  Network configuration during application life cycle Verrazzano does the following as it relates to applications being deployed and terminated:\n Optionally, creates an Istio Gateway and VirtualService resources. Creates Istio AuthorizationPolicies, as needed. Creates Istio DestinationRules, as needed. Optionally, creates a self-signed certificate for the application. Optionally, creates DNS records using ExternalDNS.  ","categories":"","description":"","excerpt":"A Verrazzano instance is comprised of both Verrazzano components and several third party products. Collectively, these components are called the Verrazzano system components. In addition, after …","ref":"/docs/networking/","tags":"","title":"Networking"},{"body":"","categories":"","description":"Prepare Kubernetes platforms before installing Verrazzano","excerpt":"Prepare Kubernetes platforms before installing Verrazzano","ref":"/docs/setup/install/prepare/platforms/","tags":"","title":"Platform Setup"},{"body":"","categories":"","description":"Uninstall Verrazzano","excerpt":"Uninstall Verrazzano","ref":"/docs/setup/uninstall/","tags":"","title":"Uninstall Verrazzano"},{"body":"","categories":"","description":"Troubleshooting Verrazzano issues and FAQ","excerpt":"Troubleshooting Verrazzano issues and FAQ","ref":"/docs/troubleshooting/","tags":"","title":"Troubleshoot and FAQ"},{"body":"Rancher is recommended for Verrazzano multicluster installations. However, if Rancher is not enabled on the admin cluster, then registration requires you to perform a few additional steps. The following instructions show you how to register a managed cluster when Rancher is not enabled in Verrazzano.\nPrerequisites Before you begin, make sure you have completed the Prerequisites and Install Verrazzano, as described in Install Multicluster Verrazzano.\nPreregistration setup Before registering the managed cluster, first you will need to set up the following items:\n A Secret containing the managed cluster’s CA certificate. Note that the cacrt field in this secret can be empty only if the managed cluster uses a well-known CA. This CA certificate is used by the admin cluster to scrape metrics from the managed cluster, for both applications and Verrazzano components. A ConfigMap containing the externally reachable address of the admin cluster. This will be provided to the managed cluster during registration so that it can connect to the admin cluster.  Follow these preregistration setup steps.\n  If needed for the admin cluster, then obtain the managed cluster’s CA certificate. The admin cluster scrapes metrics from the managed cluster’s Prometheus endpoint. If the managed cluster Verrazzano installation uses self-signed certificates, then the admin cluster will need the managed cluster’s CA certificate to make an https connection.\n  Depending on whether the Verrazzano installation on the managed cluster uses self-signed certificates or certificates signed by a well-known certificate authority, choose the appropriate instructions:\n Well-known CA Self-signed certificates    If you are unsure what type of certificates are used, use the following instructions.\n  To check the ca.crt field of the verrazzano-tls secret in the verrazzano-system namespace on the managed cluster: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the managed cluster $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 --context $KUBECONTEXT_MANAGED1 \\ -n verrazzano-system get secret verrazzano-tls -o jsonpath='{.data.ca\\.crt}'    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If this value is empty, then your managed cluster is using certificates signed by a well-known certificate authority. Otherwise, your managed cluster is using self-signed certificates. Well-known CA In this case, no additional configuration is necessary.\nSelf-signed certificates If the managed cluster certificates are self-signed, create a file called managed1.yaml containing the CA certificate of the managed cluster as the value of the cacrt field. In the following commands, the managed cluster’s CA certificate is saved in an environment variable called MGD_CA_CERT. Then use the --dry-run option of the kubectl command to generate the managed1.yaml file. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the managed cluster $ export MGD_CA_CERT=$(kubectl --kubeconfig $KUBECONFIG_MANAGED1 --context $KUBECONTEXT_MANAGED1 \\ get secret verrazzano-tls \\ -n verrazzano-system \\ -o jsonpath=\"{.data.ca\\.crt}\" | base64 --decode) $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 --context $KUBECONTEXT_MANAGED1 \\ create secret generic \"ca-secret-managed1\" \\ -n verrazzano-mc \\ --from-literal=cacrt=\"$MGD_CA_CERT\" \\ --dry-run=client \\ -o yaml \u003e managed1.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nCreate a Secret on the admin cluster that contains the CA certificate for the managed cluster. This secret will be used for scraping metrics from the managed cluster. The managed1.yaml file that was created in the previous step provides input to this step. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ apply -f managed1.yaml # After the command succeeds, you may delete the managed1.yaml file $ rm managed1.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n      Use the following instructions to obtain the Kubernetes API server address for the admin cluster. This address must be accessible from the managed cluster.\n Most Kubernetes clusters Kind clusters  Most Kubernetes clusters For most types of Kubernetes clusters, except for Kind clusters, you can find the externally accessible API server address of the admin cluster from its kubeconfig file. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # View the information for the admin cluster in your kubeconfig file $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN config view --minify # Sample output apiVersion: v1 kind: Config clusters: - cluster: certificate-authority-data: DATA+OMITTED server: https://11.22.33.44:6443 name: my-admin-cluster contexts: .... ....    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  In the output of this command, you will find the URL of the admin cluster API server in the server field. Set the value of the ADMIN_K8S_SERVER_ADDRESS variable to this URL. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ export ADMIN_K8S_SERVER_ADDRESS=\u003cthe server address from the config output\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nKind clusters Kind clusters run within a Docker container. If your admin and managed clusters are Kind clusters, then the API server address of the admin cluster in its kubeconfig file is typically a local address on the host machine, which will not be accessible from the managed cluster. Use the kind command to obtain the internal kubeconfig of the admin cluster, which will contain a server address accessible from other Kind clusters on the same machine, and therefore in the same Docker network. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kind get kubeconfig --internal --name \u003cyour-admin-cluster-name\u003e | grep server    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  In the output of this command, you can find the URL of the admin cluster API server in the server field. Set the value of the ADMIN_K8S_SERVER_ADDRESS variable to this URL. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ export ADMIN_K8S_SERVER_ADDRESS=\u003cthe server address from the config output\u003e    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  On the admin cluster, create a ConfigMap that contains the externally accessible admin cluster Kubernetes server address found in the previous step. To be detected by Verrazzano, this ConfigMap must be named verrazzano-admin-cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ apply -f \u003c\u003cEOF - apiVersion: v1 kind: ConfigMap metadata: name: verrazzano-admin-cluster namespace: verrazzano-mc data: server: \"${ADMIN_K8S_SERVER_ADDRESS}\" EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Registration steps Perform the first three registration steps on the admin cluster, and the last step, on the managed cluster. The cluster against which to run the command is indicated in each code block.\nOn the admin cluster   To begin the registration process for a managed cluster named managed1, apply the VerrazzanoManagedCluster resource on the admin cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ apply -f \u003c\u003cEOF - apiVersion: clusters.verrazzano.io/v1alpha1 kind: VerrazzanoManagedCluster metadata: name: managed1 namespace: verrazzano-mc spec: description: \"Test VerrazzanoManagedCluster object\" caSecret: ca-secret-managed1 EOF    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Wait for the VerrazzanoManagedCluster resource to reach the Ready status. At that point, it will have generated a YAML file that must be applied on the managed cluster to complete the registration process. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ wait --for=condition=Ready \\ vmc managed1 -n verrazzano-mc    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Export the YAML file created to register the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ get secret verrazzano-cluster-managed1-manifest \\ -n verrazzano-mc \\ -o jsonpath={.data.yaml} | base64 --decode \u003e register.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  On the managed cluster Apply the registration file exported in the previous step, on the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the managed cluster $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 --context $KUBECONTEXT_MANAGED1 \\ apply -f register.yaml # After the command succeeds, you may delete the register.yaml file $ rm register.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nAfter this step, the managed cluster will begin connecting to the admin cluster periodically. When the managed cluster connects to the admin cluster, it will update the Status field of the VerrazzanoManagedCluster resource for this managed cluster, with the following information:\n The timestamp of the most recent connection made from the managed cluster, in the lastAgentConnectTime status field. The host address of the Prometheus instance running on the managed cluster, in the prometheusHost status field. Then this is used by the admin cluster to scrape metrics from the managed cluster. The API address of the managed cluster, in the apiUrl status field. This is used by the admin cluster’s authentication proxy to route incoming requests for managed cluster information, to the managed cluster’s authentication proxy.  Verify that managed cluster registration has completed After these steps have been completed, return to Verify that managed cluster registration has completed.\nDeregister a managed cluster without Rancher NOTE: The following procedure is for a Verrazzano multicluster environment in which Rancher is not enabled on the admin cluster. If Rancher is enabled, see Deregister a managed cluster.\nIf you want to deregister a managed cluster because you no longer want it to be part of a Verrazzano multicluster environment, then complete the following steps.\nOn the admin cluster   Export the YAML file created to register the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ get secret verrazzano-cluster-managed1-manifest \\ -n verrazzano-mc \\ -o jsonpath={.data.yaml} | base64 --decode \u003e register.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the VerrazzanoManagedCluster resource on the admin cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the admin cluster $ kubectl --kubeconfig $KUBECONFIG_ADMIN --context $KUBECONTEXT_ADMIN \\ delete vmc -n verrazzano-mc managed1    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  On the managed cluster Delete the resources in the registration file exported in the previous step, on the managed cluster. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  # On the managed cluster $ kubectl --kubeconfig $KUBECONFIG_MANAGED1 --context $KUBECONTEXT_MANAGED1 \\ delete -f register.yaml # After the command succeeds, you may delete the register.yaml file $ rm register.yaml    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"Set up a multicluster Verrazzano environment when Rancher is disabled","excerpt":"Set up a multicluster Verrazzano environment when Rancher is disabled","ref":"/docs/setup/mc-install/advanced-mc-install/","tags":"","title":"Advanced Multicluster Installation"},{"body":"","categories":"","description":"Guides for common tasks with Verrazzano","excerpt":"Guides for common tasks with Verrazzano","ref":"/docs/guides/","tags":"","title":"Guides"},{"body":"","categories":"","description":"Example applications that demonstrate Verrazzano use case scenarios","excerpt":"Example applications that demonstrate Verrazzano use case scenarios","ref":"/docs/examples/","tags":"","title":"Examples"},{"body":"","categories":"","description":"Verrazzano reference information","excerpt":"Verrazzano reference information","ref":"/docs/reference/","tags":"","title":"API Reference"},{"body":"A private Docker registry is called an insecure registry when it is configured for access using a self-signed certificate or over an unencrypted HTTP connection. For example, for the Oracle Cloud Native Environment platform, insecure registries must be configured in /etc/containers/registries.conf as follows on the worker nodes: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   [registries] [registries.insecure] registries = [\"insecure-registry-1:1001/registry1\",\"insecure-registry-2:1001/registry2\"]    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n","categories":"","description":"","excerpt":"A private Docker registry is called an insecure registry when it is configured for access using a self-signed certificate or over an unencrypted HTTP connection. For example, for the Oracle Cloud …","ref":"/docs/setup/install/prepare/platforms/olcne/private-registry/","tags":"","title":"Configure Access to a Private Registry"},{"body":"Verrazzano is an end-to-end enterprise container platform for deploying cloud native and traditional applications in multicloud environments. It is made up of a curated set of open source components – many that you may already use and trust, and some that were written specifically to pull together all of the pieces that make Verrazzano a cohesive and easy to use platform.\nLearn more about the advantages of using Verrazzano at Verrazzano Features.\nSelect Quick Start to get started.\nVerrazzano release versions and source code are available at https://github.com/verrazzano/verrazzano. This repository contains a Kubernetes operator for installing Verrazzano and example applications for use with Verrazzano. Find the Verrazzano release history here.\nFor documentation from all releases, use the Documentation version menu at the top of this page. For developers’ perspectives, check us out on Medium.\n","categories":"","description":"","excerpt":"Verrazzano is an end-to-end enterprise container platform for deploying cloud native and traditional applications in multicloud environments. It is made up of a curated set of open source components – …","ref":"/docs/","tags":"","title":"Welcome to Verrazzano"},{"body":"As the Verrazzano API evolves, APIs are periodically updated. When APIs evolve, the old API is deprecated and eventually removed. This document contains information that you need to know when migrating from deprecated API versions to newer and more stable API versions.\nVerrazzano The install.verrazzano.io/v1alpha1 API version of Verrazzano resources is deprecated and will no longer be served in a future release.\n Migrate manifests and API clients to use the install.verrazzano.io/v1beta1 API version, available since 1.4.0. All existing persisted objects are accessible using the new API.  Notable Changes In install.verrazzano.io/v1beta1  spec.components.ingress is renamed to spec.components.ingressNGINX. spec.components.kibana is renamed to spec.components.opensearchDashboards spec.components.elasticsearch is renamed to spec.components.opensearch spec.components.fluentd.elasticsearchSecret is renamed to spec.components.fluentd.opensearchSecret spec.components.fluentd.elasticsearchURL is renamed to spec.components.fluentd.opensearchURL status.instance.kibanaUrl is renamed to status.instance.opensearchDashboardsUrl status.instance.elasticUrl is renamed to status.instance.opensearchUrl Use spec.components.opensearch.nodes instead of spec.components.elasticsearch.installArgs. Use spec.components.ingressNGINX.overrides instead of spec.components.ingress.nginxInstallArgs. Use spec.components.istio.overrides instead of spec.components.istio.istioInstallArgs. Use spec.components.istio.overrides instead of spec.components.istio.ingress. Use spec.components.istio.overrides instead of spec.components.istio.egress. Use spec.components.keycloak.overrides instead of spec.components.keycloak.keycloakInstallArgs. Use spec.components.verrazzano.overrides instead of spec.components.verrazzano.installArgs. Use spec.components.authProxy.overrides instead of spec.components.authProxy.kubernetes.  Co-installing previous Verrazzano versions After installing Verrazzano version 1.4.0 or later, and not uninstalling it before installing versions of Verrazzano prior to 1.4.0, will result in the following error: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  The CustomResourceDefinition \"verrazzanos.install.verrazzano.io\" is invalid: status.storedVersions[0]: Invalid value: \"v1beta1\": must appear in spec.versions    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nTo resolve this error, delete the verrazzanos.install.verrazzano.io Custom Resource Definition: code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete customresourcedefinition verrazzanos.install.verrazzano.io    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nMulticluster Some of the multicluster wrappers APIs, which are part of clusters.verrazzano.io/v1alpha1, are deprecated and will be removed in Verrazzano v2.0.0. The APIs that will be removed are:\n MultiClusterComponent - Should be replaced with a core.oam/dev/v1alpha2 Component resource. MultiClusterConfigMap - Should be replaced with a core.oam/dev/v1alpha2 Component resource. MultiClusterSecret - Should be replaced with a Kubernetes Secret and referenced in the spec.secrets of a MultiClusterApplicationConfiguration resource.  ","categories":"","description":"","excerpt":"As the Verrazzano API evolves, APIs are periodically updated. When APIs evolve, the old API is deprecated and eventually removed. This document contains information that you need to know when …","ref":"/docs/reference/migration/","tags":"","title":"Migrate from Deprecated API Versions"},{"body":"Hello Config World Helidon This example is a Helidon-based service that returns a “HelloConfig World” response when invoked. The application configuration uses a Kubernetes ConfigMap, instead of the default, microprofile properties file.\nBefore you begin Install Verrazzano by following the installation instructions.\nNOTE: The Hello World Helidon configuration example application deployment files are contained in the Verrazzano project located at \u003cVERRAZZANO_HOME\u003e/examples/helidon-config, where \u003cVERRAZZANO_HOME\u003e is the root of the Verrazzano project.\nDeploy the Hello Config World Helidon application NOTE To run this application in the default namespace:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl label namespace default verrazzano-managed=true istio-injection=enabled     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If you chose the default namespace, you can skip Step 1 and ignore the -n option in the rest of the commands.\n   Create a namespace for the application and add a label identifying the namespace as managed by Verrazzano.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create namespace helidon-config $ kubectl label namespace helidon-config verrazzano-managed=true istio-injection=enabled     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    To deploy the application, apply the helidon-config OAM resources.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/helidon-config/helidon-config-comp.yaml -n helidon-config $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/helidon-config/helidon-config-app.yaml -n helidon-config     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Wait for the application to be ready.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl wait \\ --for=condition=Ready pods \\ --all -n helidon-config \\ --timeout=300s     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Explore the application The Hello World Helidon configuration example implements a REST API endpoint, /config, which returns a message {\"message\":\"HelloConfig World!\"} when invoked.\nNOTE: The following instructions assume that you are using a Kubernetes environment such as OKE. Other environments or deployments may require alternative mechanisms for retrieving addresses, ports, and such.\nFollow these steps to test the endpoints.\n  Get the generated host name for the application.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ HOST=$(kubectl get gateways.networking.istio.io helidon-config-helidon-config-appconf-gw \\ -n helidon-config \\ -o jsonpath='{.spec.servers[0].hosts[0]}') $ echo $HOST # Sample output helidon-config-appconf.helidon-config.11.22.33.44.nip.io     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Get the EXTERNAL_IP address of the istio-ingressgateway service.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ADDRESS=$(kubectl get service \\ -n istio-system istio-ingressgateway \\ -o jsonpath='{.status.loadBalancer.ingress[0].ip}') $ echo $ADDRESS # Sample output 11.22.33.44     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Access the application.\n  Using the command line code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -sk \\ -X GET \\ https://${HOST}/config \\ --resolve ${HOST}:443:${ADDRESS} # Expected response output {\"message\":\"HelloConfig World!\"}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf you are using nip.io, then you do not need to include --resolve.\n  Local testing with a browser\nTemporarily, modify the /etc/hosts file (on Mac or Linux) or c:\\Windows\\System32\\Drivers\\etc\\hosts file (on Windows 10), to add an entry mapping the host name to the ingress gateway’s EXTERNAL-IP address. For example:\n11.22.33.44 helidon-config.example.com Then you can access the application in a browser at https://\u003chost\u003e/config.\n If you are using nip.io, then you can access the application in a browser using the HOST variable (for example, https://${HOST}/config). If you are going through a proxy, then you may need to add *.nip.io to the NO_PROXY list.    Using your own DNS name\nPoint your own DNS name to the ingress gateway’s EXTERNAL-IP address.\n In this case, you would need to edit the helidon-config-app.yaml file to use the appropriate value under the hosts section (such as yourhost.your.domain), before deploying the helidon-config application. Then, you can use a browser to access the application at https://\u003cyourhost.your.domain\u003e/config.      A variety of endpoints associated with the deployed application are available to further explore the logs, metrics, and such. You can access them according to the directions here.\n  Troubleshooting   Verify that the application configuration, domain, and ingress trait all exist. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get ApplicationConfiguration -n helidon-config $ kubectl get IngressTrait -n helidon-config     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Verify that the helidon-config service pods are successfully created and transition to the READY state. Note that this may take a few minutes and that you may see some of the services terminate and restart. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl get pods -n helidon-config # Sample output NAME READY STATUS RESTARTS AGE helidon-config-deployment-676d97c7d4-wkrj2 3/3 Running 0 5m39s     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Undeploy the application   To undeploy the application, delete the Hello Config World Helidon OAM resources. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/helidon-config/helidon-config-app.yaml -n helidon-config $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/helidon-config/helidon-config-comp.yaml -n helidon-config     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Delete the namespace helidon-config after the application pod is terminated. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete namespace helidon-config     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  ","categories":"","description":"","excerpt":"Hello Config World Helidon This example is a Helidon-based service that returns a “HelloConfig World” response when invoked. The application configuration uses a Kubernetes ConfigMap, instead of the …","ref":"/docs/examples/helidon-config/","tags":"","title":""},{"body":"Hello World Helidon This example is a Helidon-based service that returns a “Hello World” response when invoked. The application configuration uses the default, microprofile properties file.\nBefore you begin Install Verrazzano by following the installation instructions.\nNOTE: The Hello World Helidon example application deployment files are contained in the Verrazzano project located at \u003cVERRAZZANO_HOME\u003e/examples/hello-helidon, where \u003cVERRAZZANO_HOME\u003e is the root of the Verrazzano project.\nDeploy the Hello World Helidon application NOTE To run this application in the default namespace:\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl label namespace default verrazzano-managed=true istio-injection=enabled     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));  If you chose the default namespace, you can skip Step 1 and ignore the -n option in the rest of the commands.\n   To run the application in a namespace other than default namespace, create a namespace for the application and add a label identifying the namespace as managed by Verrazzano.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl create namespace hello-helidon $ kubectl label namespace hello-helidon verrazzano-managed=true istio-injection=enabled     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    To deploy the application, apply the hello-helidon OAM resources.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-comp.yaml -n hello-helidon $ kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-app.yaml -n hello-helidon     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Wait for the application to be ready.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl wait \\ --for=condition=Ready pods \\ --all \\ -n hello-helidon \\ --timeout=300s     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Explore the application The Hello World Helidon microservices application implements a REST API endpoint, /greet, which returns a message {\"message\":\"Hello World!\"} when invoked.\nNOTE: The following instructions assume that you are using a Kubernetes environment such as OKE. Other environments or deployments may require alternative mechanisms for retrieving addresses, ports, and such.\nFollow these steps to test the endpoints.\n  Get the generated host name for the application. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ HOST=$(kubectl get gateways.networking.istio.io hello-helidon-hello-helidon-gw \\ -n hello-helidon \\ -o jsonpath='{.spec.servers[0].hosts[0]}') $ echo $HOST # Sample output hello-helidon-appconf.hello-helidon.11.22.33.44.nip.io     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Get the EXTERNAL_IP address of the istio-ingressgateway service.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ ADDRESS=$(kubectl get service \\ -n istio-system istio-ingressgateway \\ -o jsonpath='{.status.loadBalancer.ingress[0].ip}') $ echo $ADDRESS # Sample output 11.22.33.44     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Access the application.\n  Using the command line code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ curl -sk \\ -X GET \\ https://${HOST}/greet \\ --resolve ${HOST}:443:${ADDRESS} # Expected response output {\"message\":\"Hello World!\"}    function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \nIf you are using nip.io, then you do not need to include --resolve.\n  Local testing with a browser\nTemporarily, modify the /etc/hosts file (on Mac or Linux) or c:\\Windows\\System32\\Drivers\\etc\\hosts file (on Windows 10), to add an entry mapping the host name to the ingress gateway’s EXTERNAL-IP address. For example:\n11.22.33.44 hello-helidon.example.com Then you can access the application in a browser at https://\u003chost\u003e/greet.\n If you are using nip.io, then you can access the application in a browser using the HOST variable (for example, https://${HOST}/greet). If you are going through a proxy, then you may need to add *.nip.io to the NO_PROXY list.    Using your own DNS name\nPoint your own DNS name to the ingress gateway’s EXTERNAL-IP address.\n In this case, you would need to edit the hello-helidon-app.yaml file to use the appropriate value under the hosts section (such as yourhost.your.domain), before deploying the hello-helidon application. Then, you can use a browser to access the application at https://\u003cyourhost.your.domain\u003e/greet.      A variety of endpoints associated with the deployed application are available to further explore the logs, metrics, and such. You can access them according to the directions here.\n  Troubleshooting   Verify that the application configuration, domain, and ingress trait all exist. code { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl get ApplicationConfiguration -n hello-helidon $ kubectl get IngressTrait -n hello-helidon     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv)); \n  Verify that the hello-helidon service pods are successfully created and transition to the READY state. Note that this may take a few minutes and that you may see some of the services terminate and restart.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }   $ kubectl get pods -n hello-helidon # Sample output NAME READY STATUS RESTARTS AGE hello-helidon-workload-676d97c7d4-wkrj2 2/2 Running 0 5m39s     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Undeploy the application   To undeploy the application, delete the Hello World Helidon OAM resources.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-app.yaml -n hello-helidon $ kubectl delete -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-comp.yaml -n hello-helidon     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    Delete the namespace hello-helidon after the application pod is terminated.\ncode { margin: 0; padding: 0; } .copy-code-button { position: absolute; right: 0; top: -29px; font-size: 12px; line-height: 14px; width: 65px; color: white; background-color: #30638E; border: 1px solid #30638E; white-space: nowrap; padding: 6px 6px 7px 6px; } .copy-code-button:hover, .copy-code-button:focus{ background-color: gray; opacity: 1; }  $ kubectl delete namespace hello-helidon     function createCopyButton(highlightDiv) { const button = document.createElement(\"button\"); button.innerText = \"Copy\"; button.className = \"copy-code-button\"; button.addEventListener(\"click\", () = copyCodeToClipboard(button, highlightDiv) ); addCopyButton(button, highlightDiv); } function addCopyButton(button, highlightDiv) { highlightDiv.insertBefore(button, highlightDiv.firstChild); const wrapper = document.createElement(\"div\"); highlightDiv.parentNode.insertBefore(wrapper, highlightDiv); wrapper.appendChild(highlightDiv); } async function copyCodeToClipboard(button, highlightDiv) { let codeToCopy = highlightDiv.querySelector(\":last-child  code, pre\").innerText; let codeBlock = codeToCopy.split(\"\\n\"); let expectedLine = codeBlock.findIndex(line = line.toLowerCase().startsWith(\"# expected response\") || line.toLowerCase().startsWith(\"# sample output\")); if (expectedLine !== -1) { codeBlock.splice(expectedLine); } codeToCopy = codeBlock.join(\"\\n\"); codeToCopy = codeToCopy.replace(/^#(.*)$/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\$\\s+/gm, '').trim(); codeToCopy = codeToCopy.replace(/\\n{2,}/g,'\\n'); console.log(codeToCopy); try { await navigator.clipboard.writeText(codeToCopy); } catch (err) { const textarea = document.createElement('textarea'); textarea.value = codeToCopy; document.body.appendChild(textarea); textarea.select(); document.execCommand('copy'); textarea.remove(); } button.blur(); button.innerText = \"Copied\"; setTimeout(function () { button.innerText = \"Copy\"; }, 2000); } document .querySelectorAll(\".highlight\") .forEach((highlightDiv) = createCopyButton(highlightDiv));    ","categories":"","description":"","excerpt":"Hello World Helidon This example is a Helidon-based service that returns a “Hello World” response when invoked. The application configuration uses the default, microprofile properties file.\nBefore you …","ref":"/docs/examples/hello-helidon/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"  #td-cover-block-0 { background-image: url(./featured-background_hu782cb335b85f9f9418d05341676d005b_196571_960x540_fill_catmullrom_bottom_3.png); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(./featured-background_hu782cb335b85f9f9418d05341676d005b_196571_1920x1080_fill_catmullrom_bottom_3.png); } }  Verrazzano Enterprise Container Platform Learn More  View Repository   An open source, easy-to-adopt container platform for managing applications and Kubernetes clusters across clouds.\n       Benefits    -- Features   Easy to Adopt   Simple, easy installation and upgrade Familiar open source components Cross-cloud consistency — same tools and behavior regardless of hosting environment Flexible configuration and deployment options     Enhanced Developer Productivity   Flatten the learning curve for cloud native technology adoption DevOps/GitOps enablement Combined infrastructure and application management Polyglot – any container workload     Secure by Default   Preconfigured and automated service mesh Embedded identity provider Easy federation to corporate LDAP or Oauth providers Cross-cluster authentication and authorization Automatic certificate management     Day 2 Multi-Cloud Operations   Centralized cross-cloud cluster and application management Centralized automated observability Optimized multicloud application life cycle Application portability across clouds     Application Modernization   Complete platform for Day 1 and Day 2 operations Easily move traditional applications to containers to manage with new microservices Write new microservices using Java or other programming languages     New Application Development   Application modeling for enhanced microservice cross-cloud life cycle and application portability Write new microservices using Java or other programming languages Use Coherence for state management and in-memory data processing      ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: url(./featured-background_hu782cb335b85f9f9418d05341676d005b_196571_960x540_fill_catmullrom_bottom_3.png); } @media only screen and (min-width: 1200px) { …","ref":"/","tags":"","title":"Verrazzano Enterprise Container Platform"}]